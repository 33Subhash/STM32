
11_Multiple_UART_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002954  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002ae0  08002ae0  00003ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b18  08002b18  00004024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002b18  08002b18  00003b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b20  08002b20  00004024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b20  08002b20  00003b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b24  08002b24  00003b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08002b28  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00004024  2**0
                  CONTENTS
 10 .bss          00000154  20000024  20000024  00004024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000178  20000178  00004024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008c81  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000144b  00000000  00000000  0000ccd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000700  00000000  00000000  0000e120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000055c  00000000  00000000  0000e820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000197a  00000000  00000000  0000ed7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009410  00000000  00000000  000106f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8ac8  00000000  00000000  00019b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001025ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c78  00000000  00000000  00102614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0010428c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000024 	.word	0x20000024
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002ac8 	.word	0x08002ac8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000028 	.word	0x20000028
 80001c8:	08002ac8 	.word	0x08002ac8

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004fe:	2300      	movs	r3, #0
 8000500:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000502:	2003      	movs	r0, #3
 8000504:	f000 f944 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000508:	200f      	movs	r0, #15
 800050a:	f000 f815 	bl	8000538 <HAL_InitTick>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d002      	beq.n	800051a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000514:	2301      	movs	r3, #1
 8000516:	71fb      	strb	r3, [r7, #7]
 8000518:	e001      	b.n	800051e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800051a:	f000 f805 	bl	8000528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800051e:	79fb      	ldrb	r3, [r7, #7]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
	...

08000538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000540:	2300      	movs	r3, #0
 8000542:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000544:	4b17      	ldr	r3, [pc, #92]	@ (80005a4 <HAL_InitTick+0x6c>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d023      	beq.n	8000594 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800054c:	4b16      	ldr	r3, [pc, #88]	@ (80005a8 <HAL_InitTick+0x70>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	4b14      	ldr	r3, [pc, #80]	@ (80005a4 <HAL_InitTick+0x6c>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	4619      	mov	r1, r3
 8000556:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800055a:	fbb3 f3f1 	udiv	r3, r3, r1
 800055e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f949 	bl	80007fa <HAL_SYSTICK_Config>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d10f      	bne.n	800058e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d809      	bhi.n	8000588 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295
 800057c:	f000 f913 	bl	80007a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000580:	4a0a      	ldr	r2, [pc, #40]	@ (80005ac <HAL_InitTick+0x74>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
 8000586:	e007      	b.n	8000598 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000588:	2301      	movs	r3, #1
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e004      	b.n	8000598 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800058e:	2301      	movs	r3, #1
 8000590:	73fb      	strb	r3, [r7, #15]
 8000592:	e001      	b.n	8000598 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000594:	2301      	movs	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000598:	7bfb      	ldrb	r3, [r7, #15]
}
 800059a:	4618      	mov	r0, r3
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000004 	.word	0x20000004
 80005a8:	20000020 	.word	0x20000020
 80005ac:	20000000 	.word	0x20000000

080005b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <HAL_IncTick+0x20>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <HAL_IncTick+0x24>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	4a04      	ldr	r2, [pc, #16]	@ (80005d4 <HAL_IncTick+0x24>)
 80005c2:	6013      	str	r3, [r2, #0]
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000004 	.word	0x20000004
 80005d4:	20000040 	.word	0x20000040

080005d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  return uwTick;
 80005dc:	4b03      	ldr	r3, [pc, #12]	@ (80005ec <HAL_GetTick+0x14>)
 80005de:	681b      	ldr	r3, [r3, #0]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000040 	.word	0x20000040

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	@ (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	@ (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4907      	ldr	r1, [pc, #28]	@ (800068c <__NVIC_EnableIRQ+0x38>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	@ (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	@ (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	@ 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	@ 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	@ (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	@ (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	@ (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff29 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff3e 	bl	8000638 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff8e 	bl	80006e4 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff31 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ffa2 	bl	800074c <SysTick_Config>
 8000808:	4603      	mov	r3, r0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000812:	b480      	push	{r7}
 8000814:	b085      	sub	sp, #20
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800081a:	2300      	movs	r3, #0
 800081c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b02      	cmp	r3, #2
 8000828:	d008      	beq.n	800083c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2204      	movs	r2, #4
 800082e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2200      	movs	r2, #0
 8000834:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000838:	2301      	movs	r3, #1
 800083a:	e022      	b.n	8000882 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f022 020e 	bic.w	r2, r2, #14
 800084a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f022 0201 	bic.w	r2, r2, #1
 800085a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000860:	f003 021c 	and.w	r2, r3, #28
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000868:	2101      	movs	r1, #1
 800086a:	fa01 f202 	lsl.w	r2, r1, r2
 800086e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2201      	movs	r2, #1
 8000874:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000880:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000882:	4618      	mov	r0, r3
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b084      	sub	sp, #16
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000896:	2300      	movs	r3, #0
 8000898:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d005      	beq.n	80008b2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2204      	movs	r2, #4
 80008aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80008ac:	2301      	movs	r3, #1
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	e029      	b.n	8000906 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f022 020e 	bic.w	r2, r2, #14
 80008c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f022 0201 	bic.w	r2, r2, #1
 80008d0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d6:	f003 021c 	and.w	r2, r3, #28
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008de:	2101      	movs	r1, #1
 80008e0:	fa01 f202 	lsl.w	r2, r1, r2
 80008e4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2201      	movs	r2, #1
 80008ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d003      	beq.n	8000906 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	4798      	blx	r3
    }
  }
  return status;
 8000906:	7bfb      	ldrb	r3, [r7, #15]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000910:	b480      	push	{r7}
 8000912:	b087      	sub	sp, #28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800091e:	e17f      	b.n	8000c20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	2101      	movs	r1, #1
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	fa01 f303 	lsl.w	r3, r1, r3
 800092c:	4013      	ands	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2b00      	cmp	r3, #0
 8000934:	f000 8171 	beq.w	8000c1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f003 0303 	and.w	r3, r3, #3
 8000940:	2b01      	cmp	r3, #1
 8000942:	d005      	beq.n	8000950 <HAL_GPIO_Init+0x40>
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	f003 0303 	and.w	r3, r3, #3
 800094c:	2b02      	cmp	r3, #2
 800094e:	d130      	bne.n	80009b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	2203      	movs	r2, #3
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	4013      	ands	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	68da      	ldr	r2, [r3, #12]
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	4313      	orrs	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000986:	2201      	movs	r2, #1
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43db      	mvns	r3, r3
 8000990:	693a      	ldr	r2, [r7, #16]
 8000992:	4013      	ands	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	091b      	lsrs	r3, r3, #4
 800099c:	f003 0201 	and.w	r2, r3, #1
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f003 0303 	and.w	r3, r3, #3
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d118      	bne.n	80009f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80009c4:	2201      	movs	r2, #1
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4013      	ands	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	08db      	lsrs	r3, r3, #3
 80009da:	f003 0201 	and.w	r2, r3, #1
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f003 0303 	and.w	r3, r3, #3
 80009f8:	2b03      	cmp	r3, #3
 80009fa:	d017      	beq.n	8000a2c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	2203      	movs	r2, #3
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4013      	ands	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	689a      	ldr	r2, [r3, #8]
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f003 0303 	and.w	r3, r3, #3
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d123      	bne.n	8000a80 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	08da      	lsrs	r2, r3, #3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3208      	adds	r2, #8
 8000a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a44:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	f003 0307 	and.w	r3, r3, #7
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	220f      	movs	r2, #15
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	43db      	mvns	r3, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	691a      	ldr	r2, [r3, #16]
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	08da      	lsrs	r2, r3, #3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	3208      	adds	r2, #8
 8000a7a:	6939      	ldr	r1, [r7, #16]
 8000a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f003 0203 	and.w	r2, r3, #3
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	f000 80ac 	beq.w	8000c1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	4b5f      	ldr	r3, [pc, #380]	@ (8000c40 <HAL_GPIO_Init+0x330>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ac6:	4a5e      	ldr	r2, [pc, #376]	@ (8000c40 <HAL_GPIO_Init+0x330>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ace:	4b5c      	ldr	r3, [pc, #368]	@ (8000c40 <HAL_GPIO_Init+0x330>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ada:	4a5a      	ldr	r2, [pc, #360]	@ (8000c44 <HAL_GPIO_Init+0x334>)
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	089b      	lsrs	r3, r3, #2
 8000ae0:	3302      	adds	r3, #2
 8000ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	f003 0303 	and.w	r3, r3, #3
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	220f      	movs	r2, #15
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b04:	d025      	beq.n	8000b52 <HAL_GPIO_Init+0x242>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a4f      	ldr	r2, [pc, #316]	@ (8000c48 <HAL_GPIO_Init+0x338>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d01f      	beq.n	8000b4e <HAL_GPIO_Init+0x23e>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a4e      	ldr	r2, [pc, #312]	@ (8000c4c <HAL_GPIO_Init+0x33c>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d019      	beq.n	8000b4a <HAL_GPIO_Init+0x23a>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a4d      	ldr	r2, [pc, #308]	@ (8000c50 <HAL_GPIO_Init+0x340>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d013      	beq.n	8000b46 <HAL_GPIO_Init+0x236>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a4c      	ldr	r2, [pc, #304]	@ (8000c54 <HAL_GPIO_Init+0x344>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d00d      	beq.n	8000b42 <HAL_GPIO_Init+0x232>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a4b      	ldr	r2, [pc, #300]	@ (8000c58 <HAL_GPIO_Init+0x348>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d007      	beq.n	8000b3e <HAL_GPIO_Init+0x22e>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a4a      	ldr	r2, [pc, #296]	@ (8000c5c <HAL_GPIO_Init+0x34c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d101      	bne.n	8000b3a <HAL_GPIO_Init+0x22a>
 8000b36:	2306      	movs	r3, #6
 8000b38:	e00c      	b.n	8000b54 <HAL_GPIO_Init+0x244>
 8000b3a:	2307      	movs	r3, #7
 8000b3c:	e00a      	b.n	8000b54 <HAL_GPIO_Init+0x244>
 8000b3e:	2305      	movs	r3, #5
 8000b40:	e008      	b.n	8000b54 <HAL_GPIO_Init+0x244>
 8000b42:	2304      	movs	r3, #4
 8000b44:	e006      	b.n	8000b54 <HAL_GPIO_Init+0x244>
 8000b46:	2303      	movs	r3, #3
 8000b48:	e004      	b.n	8000b54 <HAL_GPIO_Init+0x244>
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	e002      	b.n	8000b54 <HAL_GPIO_Init+0x244>
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e000      	b.n	8000b54 <HAL_GPIO_Init+0x244>
 8000b52:	2300      	movs	r3, #0
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	f002 0203 	and.w	r2, r2, #3
 8000b5a:	0092      	lsls	r2, r2, #2
 8000b5c:	4093      	lsls	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b64:	4937      	ldr	r1, [pc, #220]	@ (8000c44 <HAL_GPIO_Init+0x334>)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	089b      	lsrs	r3, r3, #2
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b72:	4b3b      	ldr	r3, [pc, #236]	@ (8000c60 <HAL_GPIO_Init+0x350>)
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b96:	4a32      	ldr	r2, [pc, #200]	@ (8000c60 <HAL_GPIO_Init+0x350>)
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b9c:	4b30      	ldr	r3, [pc, #192]	@ (8000c60 <HAL_GPIO_Init+0x350>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bc0:	4a27      	ldr	r2, [pc, #156]	@ (8000c60 <HAL_GPIO_Init+0x350>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000bc6:	4b26      	ldr	r3, [pc, #152]	@ (8000c60 <HAL_GPIO_Init+0x350>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d003      	beq.n	8000bea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bea:	4a1d      	ldr	r2, [pc, #116]	@ (8000c60 <HAL_GPIO_Init+0x350>)
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c60 <HAL_GPIO_Init+0x350>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d003      	beq.n	8000c14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c14:	4a12      	ldr	r2, [pc, #72]	@ (8000c60 <HAL_GPIO_Init+0x350>)
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	fa22 f303 	lsr.w	r3, r2, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f47f ae78 	bne.w	8000920 <HAL_GPIO_Init+0x10>
  }
}
 8000c30:	bf00      	nop
 8000c32:	bf00      	nop
 8000c34:	371c      	adds	r7, #28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40010000 	.word	0x40010000
 8000c48:	48000400 	.word	0x48000400
 8000c4c:	48000800 	.word	0x48000800
 8000c50:	48000c00 	.word	0x48000c00
 8000c54:	48001000 	.word	0x48001000
 8000c58:	48001400 	.word	0x48001400
 8000c5c:	48001800 	.word	0x48001800
 8000c60:	40010400 	.word	0x40010400

08000c64 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c76:	887a      	ldrh	r2, [r7, #2]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	041a      	lsls	r2, r3, #16
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	43d9      	mvns	r1, r3
 8000c82:	887b      	ldrh	r3, [r7, #2]
 8000c84:	400b      	ands	r3, r1
 8000c86:	431a      	orrs	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	619a      	str	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	@ 0x24
 8000c9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ca6:	4b3e      	ldr	r3, [pc, #248]	@ (8000da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	f003 030c 	and.w	r3, r3, #12
 8000cae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cb0:	4b3b      	ldr	r3, [pc, #236]	@ (8000da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d005      	beq.n	8000ccc <HAL_RCC_GetSysClockFreq+0x34>
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	2b0c      	cmp	r3, #12
 8000cc4:	d121      	bne.n	8000d0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d11e      	bne.n	8000d0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000ccc:	4b34      	ldr	r3, [pc, #208]	@ (8000da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f003 0308 	and.w	r3, r3, #8
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d107      	bne.n	8000ce8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000cd8:	4b31      	ldr	r3, [pc, #196]	@ (8000da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cde:	0a1b      	lsrs	r3, r3, #8
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	61fb      	str	r3, [r7, #28]
 8000ce6:	e005      	b.n	8000cf4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8000da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	091b      	lsrs	r3, r3, #4
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8000cf4:	4a2b      	ldr	r2, [pc, #172]	@ (8000da4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d10d      	bne.n	8000d20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d08:	e00a      	b.n	8000d20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	2b04      	cmp	r3, #4
 8000d0e:	d102      	bne.n	8000d16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8000d10:	4b25      	ldr	r3, [pc, #148]	@ (8000da8 <HAL_RCC_GetSysClockFreq+0x110>)
 8000d12:	61bb      	str	r3, [r7, #24]
 8000d14:	e004      	b.n	8000d20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	2b08      	cmp	r3, #8
 8000d1a:	d101      	bne.n	8000d20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000d1c:	4b23      	ldr	r3, [pc, #140]	@ (8000dac <HAL_RCC_GetSysClockFreq+0x114>)
 8000d1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	2b0c      	cmp	r3, #12
 8000d24:	d134      	bne.n	8000d90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000d26:	4b1e      	ldr	r3, [pc, #120]	@ (8000da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d003      	beq.n	8000d3e <HAL_RCC_GetSysClockFreq+0xa6>
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d003      	beq.n	8000d44 <HAL_RCC_GetSysClockFreq+0xac>
 8000d3c:	e005      	b.n	8000d4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000da8 <HAL_RCC_GetSysClockFreq+0x110>)
 8000d40:	617b      	str	r3, [r7, #20]
      break;
 8000d42:	e005      	b.n	8000d50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8000d44:	4b19      	ldr	r3, [pc, #100]	@ (8000dac <HAL_RCC_GetSysClockFreq+0x114>)
 8000d46:	617b      	str	r3, [r7, #20]
      break;
 8000d48:	e002      	b.n	8000d50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	617b      	str	r3, [r7, #20]
      break;
 8000d4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000d50:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	091b      	lsrs	r3, r3, #4
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	0a1b      	lsrs	r3, r3, #8
 8000d64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	fb03 f202 	mul.w	r2, r3, r2
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000d76:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	0e5b      	lsrs	r3, r3, #25
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	3301      	adds	r3, #1
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8000d90:	69bb      	ldr	r3, [r7, #24]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3724      	adds	r7, #36	@ 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000
 8000da4:	08002ae8 	.word	0x08002ae8
 8000da8:	00f42400 	.word	0x00f42400
 8000dac:	007a1200 	.word	0x007a1200

08000db0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000db4:	4b03      	ldr	r3, [pc, #12]	@ (8000dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000020 	.word	0x20000020

08000dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8000dcc:	f7ff fff0 	bl	8000db0 <HAL_RCC_GetHCLKFreq>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	0a1b      	lsrs	r3, r3, #8
 8000dd8:	f003 0307 	and.w	r3, r3, #7
 8000ddc:	4904      	ldr	r1, [pc, #16]	@ (8000df0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000dde:	5ccb      	ldrb	r3, [r1, r3]
 8000de0:	f003 031f 	and.w	r3, r3, #31
 8000de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40021000 	.word	0x40021000
 8000df0:	08002ae0 	.word	0x08002ae0

08000df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8000df8:	f7ff ffda 	bl	8000db0 <HAL_RCC_GetHCLKFreq>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	0adb      	lsrs	r3, r3, #11
 8000e04:	f003 0307 	and.w	r3, r3, #7
 8000e08:	4904      	ldr	r1, [pc, #16]	@ (8000e1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8000e0a:	5ccb      	ldrb	r3, [r1, r3]
 8000e0c:	f003 031f 	and.w	r3, r3, #31
 8000e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	08002ae0 	.word	0x08002ae0

08000e20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e040      	b.n	8000eb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d106      	bne.n	8000e48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 f83a 	bl	8000ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2224      	movs	r2, #36	@ 0x24
 8000e4c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f022 0201 	bic.w	r2, r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f000 fe94 	bl	8001b94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f000 fbd9 	bl	8001624 <UART_SetConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d101      	bne.n	8000e7c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e01b      	b.n	8000eb4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8000e8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8000e9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f042 0201 	orr.w	r2, r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 ff13 	bl	8001cd8 <UART_CheckIdleState>
 8000eb2:	4603      	mov	r3, r0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b08b      	sub	sp, #44	@ 0x2c
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	4613      	mov	r3, r2
 8000edc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000ee2:	2b20      	cmp	r3, #32
 8000ee4:	d147      	bne.n	8000f76 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d002      	beq.n	8000ef2 <HAL_UART_Transmit_IT+0x22>
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e040      	b.n	8000f78 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	68ba      	ldr	r2, [r7, #8]
 8000efa:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	88fa      	ldrh	r2, [r7, #6]
 8000f00:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	88fa      	ldrh	r2, [r7, #6]
 8000f08:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	2221      	movs	r2, #33	@ 0x21
 8000f1e:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f28:	d107      	bne.n	8000f3a <HAL_UART_Transmit_IT+0x6a>
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d103      	bne.n	8000f3a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4a13      	ldr	r2, [pc, #76]	@ (8000f84 <HAL_UART_Transmit_IT+0xb4>)
 8000f36:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000f38:	e002      	b.n	8000f40 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4a12      	ldr	r2, [pc, #72]	@ (8000f88 <HAL_UART_Transmit_IT+0xb8>)
 8000f3e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	e853 3f00 	ldrex	r3, [r3]
 8000f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5e:	623b      	str	r3, [r7, #32]
 8000f60:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000f62:	69f9      	ldr	r1, [r7, #28]
 8000f64:	6a3a      	ldr	r2, [r7, #32]
 8000f66:	e841 2300 	strex	r3, r2, [r1]
 8000f6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1e6      	bne.n	8000f40 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8000f76:	2302      	movs	r3, #2
  }
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	372c      	adds	r7, #44	@ 0x2c
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	0800222f 	.word	0x0800222f
 8000f88:	08002179 	.word	0x08002179

08000f8c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	@ 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	4613      	mov	r3, r2
 8000f98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fa0:	2b20      	cmp	r3, #32
 8000fa2:	d137      	bne.n	8001014 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <HAL_UART_Receive_IT+0x24>
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e030      	b.n	8001016 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a18      	ldr	r2, [pc, #96]	@ (8001020 <HAL_UART_Receive_IT+0x94>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d01f      	beq.n	8001004 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d018      	beq.n	8001004 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	e853 3f00 	ldrex	r3, [r3]
 8000fde:	613b      	str	r3, [r7, #16]
   return(result);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff0:	623b      	str	r3, [r7, #32]
 8000ff2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ff4:	69f9      	ldr	r1, [r7, #28]
 8000ff6:	6a3a      	ldr	r2, [r7, #32]
 8000ff8:	e841 2300 	strex	r3, r2, [r1]
 8000ffc:	61bb      	str	r3, [r7, #24]
   return(result);
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1e6      	bne.n	8000fd2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	461a      	mov	r2, r3
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f000 ff74 	bl	8001ef8 <UART_Start_Receive_IT>
 8001010:	4603      	mov	r3, r0
 8001012:	e000      	b.n	8001016 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001014:	2302      	movs	r3, #2
  }
}
 8001016:	4618      	mov	r0, r3
 8001018:	3728      	adds	r7, #40	@ 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40008000 	.word	0x40008000

08001024 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b0ba      	sub	sp, #232	@ 0xe8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800104a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800104e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8001052:	4013      	ands	r3, r2
 8001054:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8001058:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800105c:	2b00      	cmp	r3, #0
 800105e:	d115      	bne.n	800108c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001064:	f003 0320 	and.w	r3, r3, #32
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00f      	beq.n	800108c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800106c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001070:	f003 0320 	and.w	r3, r3, #32
 8001074:	2b00      	cmp	r3, #0
 8001076:	d009      	beq.n	800108c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 82ae 	beq.w	80015de <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	4798      	blx	r3
      }
      return;
 800108a:	e2a8      	b.n	80015de <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800108c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 8117 	beq.w	80012c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d106      	bne.n	80010b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80010a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80010a6:	4b85      	ldr	r3, [pc, #532]	@ (80012bc <HAL_UART_IRQHandler+0x298>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 810a 	beq.w	80012c4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80010b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d011      	beq.n	80010e0 <HAL_UART_IRQHandler+0xbc>
 80010bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80010c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00b      	beq.n	80010e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2201      	movs	r2, #1
 80010ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80010d6:	f043 0201 	orr.w	r2, r3, #1
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80010e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d011      	beq.n	8001110 <HAL_UART_IRQHandler+0xec>
 80010ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00b      	beq.n	8001110 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2202      	movs	r2, #2
 80010fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001106:	f043 0204 	orr.w	r2, r3, #4
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	2b00      	cmp	r3, #0
 800111a:	d011      	beq.n	8001140 <HAL_UART_IRQHandler+0x11c>
 800111c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00b      	beq.n	8001140 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2204      	movs	r2, #4
 800112e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001136:	f043 0202 	orr.w	r2, r3, #2
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	2b00      	cmp	r3, #0
 800114a:	d017      	beq.n	800117c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800114c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001150:	f003 0320 	and.w	r3, r3, #32
 8001154:	2b00      	cmp	r3, #0
 8001156:	d105      	bne.n	8001164 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800115c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00b      	beq.n	800117c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2208      	movs	r2, #8
 800116a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001172:	f043 0208 	orr.w	r2, r3, #8
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800117c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001180:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001184:	2b00      	cmp	r3, #0
 8001186:	d012      	beq.n	80011ae <HAL_UART_IRQHandler+0x18a>
 8001188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800118c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00c      	beq.n	80011ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800119c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80011a4:	f043 0220 	orr.w	r2, r3, #32
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 8214 	beq.w	80015e2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80011ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80011be:	f003 0320 	and.w	r3, r3, #32
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00d      	beq.n	80011e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80011c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80011ca:	f003 0320 	and.w	r3, r3, #32
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d007      	beq.n	80011e2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80011e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011f6:	2b40      	cmp	r3, #64	@ 0x40
 80011f8:	d005      	beq.n	8001206 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80011fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80011fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001202:	2b00      	cmp	r3, #0
 8001204:	d04f      	beq.n	80012a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 ff3c 	bl	8002084 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001216:	2b40      	cmp	r3, #64	@ 0x40
 8001218:	d141      	bne.n	800129e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3308      	adds	r3, #8
 8001220:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001224:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001228:	e853 3f00 	ldrex	r3, [r3]
 800122c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001230:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001234:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001238:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3308      	adds	r3, #8
 8001242:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001246:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800124a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800124e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001252:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001256:	e841 2300 	strex	r3, r2, [r1]
 800125a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800125e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1d9      	bne.n	800121a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800126a:	2b00      	cmp	r3, #0
 800126c:	d013      	beq.n	8001296 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001272:	4a13      	ldr	r2, [pc, #76]	@ (80012c0 <HAL_UART_IRQHandler+0x29c>)
 8001274:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fb07 	bl	800088e <HAL_DMA_Abort_IT>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d017      	beq.n	80012b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800128a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001290:	4610      	mov	r0, r2
 8001292:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001294:	e00f      	b.n	80012b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 f9ae 	bl	80015f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800129c:	e00b      	b.n	80012b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 f9aa 	bl	80015f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012a4:	e007      	b.n	80012b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f9a6 	bl	80015f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80012b4:	e195      	b.n	80015e2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012b6:	bf00      	nop
    return;
 80012b8:	e193      	b.n	80015e2 <HAL_UART_IRQHandler+0x5be>
 80012ba:	bf00      	nop
 80012bc:	04000120 	.word	0x04000120
 80012c0:	0800214d 	.word	0x0800214d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	f040 814e 	bne.w	800156a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80012ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 8147 	beq.w	800156a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80012dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 8140 	beq.w	800156a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2210      	movs	r2, #16
 80012f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012fc:	2b40      	cmp	r3, #64	@ 0x40
 80012fe:	f040 80b8 	bne.w	8001472 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800130e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8167 	beq.w	80015e6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800131e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001322:	429a      	cmp	r2, r3
 8001324:	f080 815f 	bcs.w	80015e6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800132e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0320 	and.w	r3, r3, #32
 800133e:	2b00      	cmp	r3, #0
 8001340:	f040 8086 	bne.w	8001450 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800134c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001350:	e853 3f00 	ldrex	r3, [r3]
 8001354:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001358:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800135c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001360:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800136e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001372:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001376:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800137a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800137e:	e841 2300 	strex	r3, r2, [r1]
 8001382:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001386:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1da      	bne.n	8001344 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	3308      	adds	r3, #8
 8001394:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001398:	e853 3f00 	ldrex	r3, [r3]
 800139c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800139e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013a0:	f023 0301 	bic.w	r3, r3, #1
 80013a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3308      	adds	r3, #8
 80013ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80013b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80013b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80013ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80013be:	e841 2300 	strex	r3, r2, [r1]
 80013c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80013c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1e1      	bne.n	800138e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3308      	adds	r3, #8
 80013d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80013d4:	e853 3f00 	ldrex	r3, [r3]
 80013d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80013da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80013e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3308      	adds	r3, #8
 80013ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80013ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80013f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80013f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80013f6:	e841 2300 	strex	r3, r2, [r1]
 80013fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80013fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1e3      	bne.n	80013ca <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2220      	movs	r2, #32
 8001406:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001418:	e853 3f00 	ldrex	r3, [r3]
 800141c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800141e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001420:	f023 0310 	bic.w	r3, r3, #16
 8001424:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001432:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001434:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001436:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001438:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800143a:	e841 2300 	strex	r3, r2, [r1]
 800143e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001440:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1e4      	bne.n	8001410 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f9e1 	bl	8000812 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2202      	movs	r2, #2
 8001454:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001462:	b29b      	uxth	r3, r3
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	b29b      	uxth	r3, r3
 8001468:	4619      	mov	r1, r3
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f8ce 	bl	800160c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001470:	e0b9      	b.n	80015e6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800147e:	b29b      	uxth	r3, r3
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800148c:	b29b      	uxth	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 80ab 	beq.w	80015ea <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8001494:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80a6 	beq.w	80015ea <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014a6:	e853 3f00 	ldrex	r3, [r3]
 80014aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80014ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80014b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80014c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80014c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80014c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80014c8:	e841 2300 	strex	r3, r2, [r1]
 80014cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80014ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1e4      	bne.n	800149e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3308      	adds	r3, #8
 80014da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014de:	e853 3f00 	ldrex	r3, [r3]
 80014e2:	623b      	str	r3, [r7, #32]
   return(result);
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	3308      	adds	r3, #8
 80014f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80014f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80014fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80014fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001500:	e841 2300 	strex	r3, r2, [r1]
 8001504:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1e3      	bne.n	80014d4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2220      	movs	r2, #32
 8001510:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	e853 3f00 	ldrex	r3, [r3]
 800152c:	60fb      	str	r3, [r7, #12]
   return(result);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f023 0310 	bic.w	r3, r3, #16
 8001534:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001542:	61fb      	str	r3, [r7, #28]
 8001544:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001546:	69b9      	ldr	r1, [r7, #24]
 8001548:	69fa      	ldr	r2, [r7, #28]
 800154a:	e841 2300 	strex	r3, r2, [r1]
 800154e:	617b      	str	r3, [r7, #20]
   return(result);
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1e4      	bne.n	8001520 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2202      	movs	r2, #2
 800155a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800155c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001560:	4619      	mov	r1, r3
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f852 	bl	800160c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001568:	e03f      	b.n	80015ea <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800156a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800156e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00e      	beq.n	8001594 <HAL_UART_IRQHandler+0x570>
 8001576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800157a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d008      	beq.n	8001594 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800158a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f001 f895 	bl	80026bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001592:	e02d      	b.n	80015f0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00e      	beq.n	80015be <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80015a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80015a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d008      	beq.n	80015be <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d01c      	beq.n	80015ee <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	4798      	blx	r3
    }
    return;
 80015bc:	e017      	b.n	80015ee <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80015be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80015c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d012      	beq.n	80015f0 <HAL_UART_IRQHandler+0x5cc>
 80015ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80015ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00c      	beq.n	80015f0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 fe89 	bl	80022ee <UART_EndTransmit_IT>
    return;
 80015dc:	e008      	b.n	80015f0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80015de:	bf00      	nop
 80015e0:	e006      	b.n	80015f0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80015e2:	bf00      	nop
 80015e4:	e004      	b.n	80015f0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80015e6:	bf00      	nop
 80015e8:	e002      	b.n	80015f0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80015ea:	bf00      	nop
 80015ec:	e000      	b.n	80015f0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80015ee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80015f0:	37e8      	adds	r7, #232	@ 0xe8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop

080015f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001628:	b08a      	sub	sp, #40	@ 0x28
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	431a      	orrs	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	431a      	orrs	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	4313      	orrs	r3, r2
 800164a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4ba4      	ldr	r3, [pc, #656]	@ (80018e4 <UART_SetConfig+0x2c0>)
 8001654:	4013      	ands	r3, r2
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800165c:	430b      	orrs	r3, r1
 800165e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a99      	ldr	r2, [pc, #612]	@ (80018e8 <UART_SetConfig+0x2c4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d004      	beq.n	8001690 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800168c:	4313      	orrs	r3, r2
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016a0:	430a      	orrs	r2, r1
 80016a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a90      	ldr	r2, [pc, #576]	@ (80018ec <UART_SetConfig+0x2c8>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d126      	bne.n	80016fc <UART_SetConfig+0xd8>
 80016ae:	4b90      	ldr	r3, [pc, #576]	@ (80018f0 <UART_SetConfig+0x2cc>)
 80016b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d81b      	bhi.n	80016f4 <UART_SetConfig+0xd0>
 80016bc:	a201      	add	r2, pc, #4	@ (adr r2, 80016c4 <UART_SetConfig+0xa0>)
 80016be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c2:	bf00      	nop
 80016c4:	080016d5 	.word	0x080016d5
 80016c8:	080016e5 	.word	0x080016e5
 80016cc:	080016dd 	.word	0x080016dd
 80016d0:	080016ed 	.word	0x080016ed
 80016d4:	2301      	movs	r3, #1
 80016d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80016da:	e116      	b.n	800190a <UART_SetConfig+0x2e6>
 80016dc:	2302      	movs	r3, #2
 80016de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80016e2:	e112      	b.n	800190a <UART_SetConfig+0x2e6>
 80016e4:	2304      	movs	r3, #4
 80016e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80016ea:	e10e      	b.n	800190a <UART_SetConfig+0x2e6>
 80016ec:	2308      	movs	r3, #8
 80016ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80016f2:	e10a      	b.n	800190a <UART_SetConfig+0x2e6>
 80016f4:	2310      	movs	r3, #16
 80016f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80016fa:	e106      	b.n	800190a <UART_SetConfig+0x2e6>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a7c      	ldr	r2, [pc, #496]	@ (80018f4 <UART_SetConfig+0x2d0>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d138      	bne.n	8001778 <UART_SetConfig+0x154>
 8001706:	4b7a      	ldr	r3, [pc, #488]	@ (80018f0 <UART_SetConfig+0x2cc>)
 8001708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800170c:	f003 030c 	and.w	r3, r3, #12
 8001710:	2b0c      	cmp	r3, #12
 8001712:	d82d      	bhi.n	8001770 <UART_SetConfig+0x14c>
 8001714:	a201      	add	r2, pc, #4	@ (adr r2, 800171c <UART_SetConfig+0xf8>)
 8001716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171a:	bf00      	nop
 800171c:	08001751 	.word	0x08001751
 8001720:	08001771 	.word	0x08001771
 8001724:	08001771 	.word	0x08001771
 8001728:	08001771 	.word	0x08001771
 800172c:	08001761 	.word	0x08001761
 8001730:	08001771 	.word	0x08001771
 8001734:	08001771 	.word	0x08001771
 8001738:	08001771 	.word	0x08001771
 800173c:	08001759 	.word	0x08001759
 8001740:	08001771 	.word	0x08001771
 8001744:	08001771 	.word	0x08001771
 8001748:	08001771 	.word	0x08001771
 800174c:	08001769 	.word	0x08001769
 8001750:	2300      	movs	r3, #0
 8001752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001756:	e0d8      	b.n	800190a <UART_SetConfig+0x2e6>
 8001758:	2302      	movs	r3, #2
 800175a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800175e:	e0d4      	b.n	800190a <UART_SetConfig+0x2e6>
 8001760:	2304      	movs	r3, #4
 8001762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001766:	e0d0      	b.n	800190a <UART_SetConfig+0x2e6>
 8001768:	2308      	movs	r3, #8
 800176a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800176e:	e0cc      	b.n	800190a <UART_SetConfig+0x2e6>
 8001770:	2310      	movs	r3, #16
 8001772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001776:	e0c8      	b.n	800190a <UART_SetConfig+0x2e6>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a5e      	ldr	r2, [pc, #376]	@ (80018f8 <UART_SetConfig+0x2d4>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d125      	bne.n	80017ce <UART_SetConfig+0x1aa>
 8001782:	4b5b      	ldr	r3, [pc, #364]	@ (80018f0 <UART_SetConfig+0x2cc>)
 8001784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001788:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800178c:	2b30      	cmp	r3, #48	@ 0x30
 800178e:	d016      	beq.n	80017be <UART_SetConfig+0x19a>
 8001790:	2b30      	cmp	r3, #48	@ 0x30
 8001792:	d818      	bhi.n	80017c6 <UART_SetConfig+0x1a2>
 8001794:	2b20      	cmp	r3, #32
 8001796:	d00a      	beq.n	80017ae <UART_SetConfig+0x18a>
 8001798:	2b20      	cmp	r3, #32
 800179a:	d814      	bhi.n	80017c6 <UART_SetConfig+0x1a2>
 800179c:	2b00      	cmp	r3, #0
 800179e:	d002      	beq.n	80017a6 <UART_SetConfig+0x182>
 80017a0:	2b10      	cmp	r3, #16
 80017a2:	d008      	beq.n	80017b6 <UART_SetConfig+0x192>
 80017a4:	e00f      	b.n	80017c6 <UART_SetConfig+0x1a2>
 80017a6:	2300      	movs	r3, #0
 80017a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80017ac:	e0ad      	b.n	800190a <UART_SetConfig+0x2e6>
 80017ae:	2302      	movs	r3, #2
 80017b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80017b4:	e0a9      	b.n	800190a <UART_SetConfig+0x2e6>
 80017b6:	2304      	movs	r3, #4
 80017b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80017bc:	e0a5      	b.n	800190a <UART_SetConfig+0x2e6>
 80017be:	2308      	movs	r3, #8
 80017c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80017c4:	e0a1      	b.n	800190a <UART_SetConfig+0x2e6>
 80017c6:	2310      	movs	r3, #16
 80017c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80017cc:	e09d      	b.n	800190a <UART_SetConfig+0x2e6>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a4a      	ldr	r2, [pc, #296]	@ (80018fc <UART_SetConfig+0x2d8>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d125      	bne.n	8001824 <UART_SetConfig+0x200>
 80017d8:	4b45      	ldr	r3, [pc, #276]	@ (80018f0 <UART_SetConfig+0x2cc>)
 80017da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80017e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80017e4:	d016      	beq.n	8001814 <UART_SetConfig+0x1f0>
 80017e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80017e8:	d818      	bhi.n	800181c <UART_SetConfig+0x1f8>
 80017ea:	2b80      	cmp	r3, #128	@ 0x80
 80017ec:	d00a      	beq.n	8001804 <UART_SetConfig+0x1e0>
 80017ee:	2b80      	cmp	r3, #128	@ 0x80
 80017f0:	d814      	bhi.n	800181c <UART_SetConfig+0x1f8>
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <UART_SetConfig+0x1d8>
 80017f6:	2b40      	cmp	r3, #64	@ 0x40
 80017f8:	d008      	beq.n	800180c <UART_SetConfig+0x1e8>
 80017fa:	e00f      	b.n	800181c <UART_SetConfig+0x1f8>
 80017fc:	2300      	movs	r3, #0
 80017fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001802:	e082      	b.n	800190a <UART_SetConfig+0x2e6>
 8001804:	2302      	movs	r3, #2
 8001806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800180a:	e07e      	b.n	800190a <UART_SetConfig+0x2e6>
 800180c:	2304      	movs	r3, #4
 800180e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001812:	e07a      	b.n	800190a <UART_SetConfig+0x2e6>
 8001814:	2308      	movs	r3, #8
 8001816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800181a:	e076      	b.n	800190a <UART_SetConfig+0x2e6>
 800181c:	2310      	movs	r3, #16
 800181e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001822:	e072      	b.n	800190a <UART_SetConfig+0x2e6>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a35      	ldr	r2, [pc, #212]	@ (8001900 <UART_SetConfig+0x2dc>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d12a      	bne.n	8001884 <UART_SetConfig+0x260>
 800182e:	4b30      	ldr	r3, [pc, #192]	@ (80018f0 <UART_SetConfig+0x2cc>)
 8001830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001834:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001838:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800183c:	d01a      	beq.n	8001874 <UART_SetConfig+0x250>
 800183e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001842:	d81b      	bhi.n	800187c <UART_SetConfig+0x258>
 8001844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001848:	d00c      	beq.n	8001864 <UART_SetConfig+0x240>
 800184a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800184e:	d815      	bhi.n	800187c <UART_SetConfig+0x258>
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <UART_SetConfig+0x238>
 8001854:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001858:	d008      	beq.n	800186c <UART_SetConfig+0x248>
 800185a:	e00f      	b.n	800187c <UART_SetConfig+0x258>
 800185c:	2300      	movs	r3, #0
 800185e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001862:	e052      	b.n	800190a <UART_SetConfig+0x2e6>
 8001864:	2302      	movs	r3, #2
 8001866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800186a:	e04e      	b.n	800190a <UART_SetConfig+0x2e6>
 800186c:	2304      	movs	r3, #4
 800186e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001872:	e04a      	b.n	800190a <UART_SetConfig+0x2e6>
 8001874:	2308      	movs	r3, #8
 8001876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800187a:	e046      	b.n	800190a <UART_SetConfig+0x2e6>
 800187c:	2310      	movs	r3, #16
 800187e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001882:	e042      	b.n	800190a <UART_SetConfig+0x2e6>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a17      	ldr	r2, [pc, #92]	@ (80018e8 <UART_SetConfig+0x2c4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d13a      	bne.n	8001904 <UART_SetConfig+0x2e0>
 800188e:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <UART_SetConfig+0x2cc>)
 8001890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001894:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001898:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800189c:	d01a      	beq.n	80018d4 <UART_SetConfig+0x2b0>
 800189e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80018a2:	d81b      	bhi.n	80018dc <UART_SetConfig+0x2b8>
 80018a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018a8:	d00c      	beq.n	80018c4 <UART_SetConfig+0x2a0>
 80018aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018ae:	d815      	bhi.n	80018dc <UART_SetConfig+0x2b8>
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <UART_SetConfig+0x298>
 80018b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018b8:	d008      	beq.n	80018cc <UART_SetConfig+0x2a8>
 80018ba:	e00f      	b.n	80018dc <UART_SetConfig+0x2b8>
 80018bc:	2300      	movs	r3, #0
 80018be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80018c2:	e022      	b.n	800190a <UART_SetConfig+0x2e6>
 80018c4:	2302      	movs	r3, #2
 80018c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80018ca:	e01e      	b.n	800190a <UART_SetConfig+0x2e6>
 80018cc:	2304      	movs	r3, #4
 80018ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80018d2:	e01a      	b.n	800190a <UART_SetConfig+0x2e6>
 80018d4:	2308      	movs	r3, #8
 80018d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80018da:	e016      	b.n	800190a <UART_SetConfig+0x2e6>
 80018dc:	2310      	movs	r3, #16
 80018de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80018e2:	e012      	b.n	800190a <UART_SetConfig+0x2e6>
 80018e4:	efff69f3 	.word	0xefff69f3
 80018e8:	40008000 	.word	0x40008000
 80018ec:	40013800 	.word	0x40013800
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40004400 	.word	0x40004400
 80018f8:	40004800 	.word	0x40004800
 80018fc:	40004c00 	.word	0x40004c00
 8001900:	40005000 	.word	0x40005000
 8001904:	2310      	movs	r3, #16
 8001906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a9f      	ldr	r2, [pc, #636]	@ (8001b8c <UART_SetConfig+0x568>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d17a      	bne.n	8001a0a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001914:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001918:	2b08      	cmp	r3, #8
 800191a:	d824      	bhi.n	8001966 <UART_SetConfig+0x342>
 800191c:	a201      	add	r2, pc, #4	@ (adr r2, 8001924 <UART_SetConfig+0x300>)
 800191e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001922:	bf00      	nop
 8001924:	08001949 	.word	0x08001949
 8001928:	08001967 	.word	0x08001967
 800192c:	08001951 	.word	0x08001951
 8001930:	08001967 	.word	0x08001967
 8001934:	08001957 	.word	0x08001957
 8001938:	08001967 	.word	0x08001967
 800193c:	08001967 	.word	0x08001967
 8001940:	08001967 	.word	0x08001967
 8001944:	0800195f 	.word	0x0800195f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001948:	f7ff fa3e 	bl	8000dc8 <HAL_RCC_GetPCLK1Freq>
 800194c:	61f8      	str	r0, [r7, #28]
        break;
 800194e:	e010      	b.n	8001972 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001950:	4b8f      	ldr	r3, [pc, #572]	@ (8001b90 <UART_SetConfig+0x56c>)
 8001952:	61fb      	str	r3, [r7, #28]
        break;
 8001954:	e00d      	b.n	8001972 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001956:	f7ff f99f 	bl	8000c98 <HAL_RCC_GetSysClockFreq>
 800195a:	61f8      	str	r0, [r7, #28]
        break;
 800195c:	e009      	b.n	8001972 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800195e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001962:	61fb      	str	r3, [r7, #28]
        break;
 8001964:	e005      	b.n	8001972 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8001970:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80fb 	beq.w	8001b70 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	429a      	cmp	r2, r3
 8001988:	d305      	bcc.n	8001996 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001990:	69fa      	ldr	r2, [r7, #28]
 8001992:	429a      	cmp	r2, r3
 8001994:	d903      	bls.n	800199e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800199c:	e0e8      	b.n	8001b70 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	2200      	movs	r2, #0
 80019a2:	461c      	mov	r4, r3
 80019a4:	4615      	mov	r5, r2
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	022b      	lsls	r3, r5, #8
 80019b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80019b4:	0222      	lsls	r2, r4, #8
 80019b6:	68f9      	ldr	r1, [r7, #12]
 80019b8:	6849      	ldr	r1, [r1, #4]
 80019ba:	0849      	lsrs	r1, r1, #1
 80019bc:	2000      	movs	r0, #0
 80019be:	4688      	mov	r8, r1
 80019c0:	4681      	mov	r9, r0
 80019c2:	eb12 0a08 	adds.w	sl, r2, r8
 80019c6:	eb43 0b09 	adc.w	fp, r3, r9
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019d8:	4650      	mov	r0, sl
 80019da:	4659      	mov	r1, fp
 80019dc:	f7fe fbf6 	bl	80001cc <__aeabi_uldivmod>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4613      	mov	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80019ee:	d308      	bcc.n	8001a02 <UART_SetConfig+0x3de>
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019f6:	d204      	bcs.n	8001a02 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	e0b6      	b.n	8001b70 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001a08:	e0b2      	b.n	8001b70 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a12:	d15e      	bne.n	8001ad2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8001a14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d828      	bhi.n	8001a6e <UART_SetConfig+0x44a>
 8001a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001a24 <UART_SetConfig+0x400>)
 8001a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a22:	bf00      	nop
 8001a24:	08001a49 	.word	0x08001a49
 8001a28:	08001a51 	.word	0x08001a51
 8001a2c:	08001a59 	.word	0x08001a59
 8001a30:	08001a6f 	.word	0x08001a6f
 8001a34:	08001a5f 	.word	0x08001a5f
 8001a38:	08001a6f 	.word	0x08001a6f
 8001a3c:	08001a6f 	.word	0x08001a6f
 8001a40:	08001a6f 	.word	0x08001a6f
 8001a44:	08001a67 	.word	0x08001a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a48:	f7ff f9be 	bl	8000dc8 <HAL_RCC_GetPCLK1Freq>
 8001a4c:	61f8      	str	r0, [r7, #28]
        break;
 8001a4e:	e014      	b.n	8001a7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001a50:	f7ff f9d0 	bl	8000df4 <HAL_RCC_GetPCLK2Freq>
 8001a54:	61f8      	str	r0, [r7, #28]
        break;
 8001a56:	e010      	b.n	8001a7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001a58:	4b4d      	ldr	r3, [pc, #308]	@ (8001b90 <UART_SetConfig+0x56c>)
 8001a5a:	61fb      	str	r3, [r7, #28]
        break;
 8001a5c:	e00d      	b.n	8001a7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001a5e:	f7ff f91b 	bl	8000c98 <HAL_RCC_GetSysClockFreq>
 8001a62:	61f8      	str	r0, [r7, #28]
        break;
 8001a64:	e009      	b.n	8001a7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a6a:	61fb      	str	r3, [r7, #28]
        break;
 8001a6c:	e005      	b.n	8001a7a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8001a78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d077      	beq.n	8001b70 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005a      	lsls	r2, r3, #1
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	085b      	lsrs	r3, r3, #1
 8001a8a:	441a      	add	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	2b0f      	cmp	r3, #15
 8001a9a:	d916      	bls.n	8001aca <UART_SetConfig+0x4a6>
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa2:	d212      	bcs.n	8001aca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	f023 030f 	bic.w	r3, r3, #15
 8001aac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	085b      	lsrs	r3, r3, #1
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	8afb      	ldrh	r3, [r7, #22]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	8afa      	ldrh	r2, [r7, #22]
 8001ac6:	60da      	str	r2, [r3, #12]
 8001ac8:	e052      	b.n	8001b70 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001ad0:	e04e      	b.n	8001b70 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001ad2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d827      	bhi.n	8001b2a <UART_SetConfig+0x506>
 8001ada:	a201      	add	r2, pc, #4	@ (adr r2, 8001ae0 <UART_SetConfig+0x4bc>)
 8001adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae0:	08001b05 	.word	0x08001b05
 8001ae4:	08001b0d 	.word	0x08001b0d
 8001ae8:	08001b15 	.word	0x08001b15
 8001aec:	08001b2b 	.word	0x08001b2b
 8001af0:	08001b1b 	.word	0x08001b1b
 8001af4:	08001b2b 	.word	0x08001b2b
 8001af8:	08001b2b 	.word	0x08001b2b
 8001afc:	08001b2b 	.word	0x08001b2b
 8001b00:	08001b23 	.word	0x08001b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001b04:	f7ff f960 	bl	8000dc8 <HAL_RCC_GetPCLK1Freq>
 8001b08:	61f8      	str	r0, [r7, #28]
        break;
 8001b0a:	e014      	b.n	8001b36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001b0c:	f7ff f972 	bl	8000df4 <HAL_RCC_GetPCLK2Freq>
 8001b10:	61f8      	str	r0, [r7, #28]
        break;
 8001b12:	e010      	b.n	8001b36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001b14:	4b1e      	ldr	r3, [pc, #120]	@ (8001b90 <UART_SetConfig+0x56c>)
 8001b16:	61fb      	str	r3, [r7, #28]
        break;
 8001b18:	e00d      	b.n	8001b36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001b1a:	f7ff f8bd 	bl	8000c98 <HAL_RCC_GetSysClockFreq>
 8001b1e:	61f8      	str	r0, [r7, #28]
        break;
 8001b20:	e009      	b.n	8001b36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001b22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b26:	61fb      	str	r3, [r7, #28]
        break;
 8001b28:	e005      	b.n	8001b36 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8001b34:	bf00      	nop
    }

    if (pclk != 0U)
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d019      	beq.n	8001b70 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	085a      	lsrs	r2, r3, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	441a      	add	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	2b0f      	cmp	r3, #15
 8001b54:	d909      	bls.n	8001b6a <UART_SetConfig+0x546>
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b5c:	d205      	bcs.n	8001b6a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	e002      	b.n	8001b70 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8001b7c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3728      	adds	r7, #40	@ 0x28
 8001b84:	46bd      	mov	sp, r7
 8001b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40008000 	.word	0x40008000
 8001b90:	00f42400 	.word	0x00f42400

08001b94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00a      	beq.n	8001bbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00a      	beq.n	8001be0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00a      	beq.n	8001c02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00a      	beq.n	8001c24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c28:	f003 0310 	and.w	r3, r3, #16
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00a      	beq.n	8001c46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4a:	f003 0320 	and.w	r3, r3, #32
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00a      	beq.n	8001c68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d01a      	beq.n	8001caa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c92:	d10a      	bne.n	8001caa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00a      	beq.n	8001ccc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	605a      	str	r2, [r3, #4]
  }
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b098      	sub	sp, #96	@ 0x60
 8001cdc:	af02      	add	r7, sp, #8
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001ce8:	f7fe fc76 	bl	80005d8 <HAL_GetTick>
 8001cec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d12e      	bne.n	8001d5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001cfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d04:	2200      	movs	r2, #0
 8001d06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f88c 	bl	8001e28 <UART_WaitOnFlagUntilTimeout>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d021      	beq.n	8001d5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d1e:	e853 3f00 	ldrex	r3, [r3]
 8001d22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001d3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d3c:	e841 2300 	strex	r3, r2, [r1]
 8001d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1e6      	bne.n	8001d16 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e062      	b.n	8001e20 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d149      	bne.n	8001dfc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d70:	2200      	movs	r2, #0
 8001d72:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f856 	bl	8001e28 <UART_WaitOnFlagUntilTimeout>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d03c      	beq.n	8001dfc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8a:	e853 3f00 	ldrex	r3, [r3]
 8001d8e:	623b      	str	r3, [r7, #32]
   return(result);
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001da0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001da4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001da8:	e841 2300 	strex	r3, r2, [r1]
 8001dac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1e6      	bne.n	8001d82 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	3308      	adds	r3, #8
 8001dba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	e853 3f00 	ldrex	r3, [r3]
 8001dc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f023 0301 	bic.w	r3, r3, #1
 8001dca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3308      	adds	r3, #8
 8001dd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001dd4:	61fa      	str	r2, [r7, #28]
 8001dd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dd8:	69b9      	ldr	r1, [r7, #24]
 8001dda:	69fa      	ldr	r2, [r7, #28]
 8001ddc:	e841 2300 	strex	r3, r2, [r1]
 8001de0:	617b      	str	r3, [r7, #20]
   return(result);
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1e5      	bne.n	8001db4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2220      	movs	r2, #32
 8001dec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e011      	b.n	8001e20 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2220      	movs	r2, #32
 8001e06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3758      	adds	r7, #88	@ 0x58
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	4613      	mov	r3, r2
 8001e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e38:	e049      	b.n	8001ece <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e40:	d045      	beq.n	8001ece <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e42:	f7fe fbc9 	bl	80005d8 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d302      	bcc.n	8001e58 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e048      	b.n	8001eee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d031      	beq.n	8001ece <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d110      	bne.n	8001e9a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2208      	movs	r2, #8
 8001e7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 f8ff 	bl	8002084 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2208      	movs	r2, #8
 8001e8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e029      	b.n	8001eee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ea8:	d111      	bne.n	8001ece <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001eb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 f8e5 	bl	8002084 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e00f      	b.n	8001eee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	69da      	ldr	r2, [r3, #28]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	bf0c      	ite	eq
 8001ede:	2301      	moveq	r3, #1
 8001ee0:	2300      	movne	r3, #0
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d0a6      	beq.n	8001e3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b097      	sub	sp, #92	@ 0x5c
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	4613      	mov	r3, r2
 8001f04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	88fa      	ldrh	r2, [r7, #6]
 8001f10:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	88fa      	ldrh	r2, [r7, #6]
 8001f18:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f2a:	d10e      	bne.n	8001f4a <UART_Start_Receive_IT+0x52>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d105      	bne.n	8001f40 <UART_Start_Receive_IT+0x48>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001f3a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8001f3e:	e02d      	b.n	8001f9c <UART_Start_Receive_IT+0xa4>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	22ff      	movs	r2, #255	@ 0xff
 8001f44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8001f48:	e028      	b.n	8001f9c <UART_Start_Receive_IT+0xa4>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10d      	bne.n	8001f6e <UART_Start_Receive_IT+0x76>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d104      	bne.n	8001f64 <UART_Start_Receive_IT+0x6c>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	22ff      	movs	r2, #255	@ 0xff
 8001f5e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8001f62:	e01b      	b.n	8001f9c <UART_Start_Receive_IT+0xa4>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	227f      	movs	r2, #127	@ 0x7f
 8001f68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8001f6c:	e016      	b.n	8001f9c <UART_Start_Receive_IT+0xa4>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f76:	d10d      	bne.n	8001f94 <UART_Start_Receive_IT+0x9c>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d104      	bne.n	8001f8a <UART_Start_Receive_IT+0x92>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	227f      	movs	r2, #127	@ 0x7f
 8001f84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8001f88:	e008      	b.n	8001f9c <UART_Start_Receive_IT+0xa4>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	223f      	movs	r2, #63	@ 0x3f
 8001f8e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8001f92:	e003      	b.n	8001f9c <UART_Start_Receive_IT+0xa4>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2222      	movs	r2, #34	@ 0x22
 8001fa8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3308      	adds	r3, #8
 8001fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fb6:	e853 3f00 	ldrex	r3, [r3]
 8001fba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	3308      	adds	r3, #8
 8001fca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001fcc:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001fce:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fd0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001fd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001fd4:	e841 2300 	strex	r3, r2, [r1]
 8001fd8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8001fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1e5      	bne.n	8001fac <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fe8:	d107      	bne.n	8001ffa <UART_Start_Receive_IT+0x102>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d103      	bne.n	8001ffa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4a21      	ldr	r2, [pc, #132]	@ (800207c <UART_Start_Receive_IT+0x184>)
 8001ff6:	669a      	str	r2, [r3, #104]	@ 0x68
 8001ff8:	e002      	b.n	8002000 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4a20      	ldr	r2, [pc, #128]	@ (8002080 <UART_Start_Receive_IT+0x188>)
 8001ffe:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d019      	beq.n	800203c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800200e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002010:	e853 3f00 	ldrex	r3, [r3]
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800201c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002026:	637b      	str	r3, [r7, #52]	@ 0x34
 8002028:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800202a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800202c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800202e:	e841 2300 	strex	r3, r2, [r1]
 8002032:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1e6      	bne.n	8002008 <UART_Start_Receive_IT+0x110>
 800203a:	e018      	b.n	800206e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	e853 3f00 	ldrex	r3, [r3]
 8002048:	613b      	str	r3, [r7, #16]
   return(result);
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	f043 0320 	orr.w	r3, r3, #32
 8002050:	653b      	str	r3, [r7, #80]	@ 0x50
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800205a:	623b      	str	r3, [r7, #32]
 800205c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800205e:	69f9      	ldr	r1, [r7, #28]
 8002060:	6a3a      	ldr	r2, [r7, #32]
 8002062:	e841 2300 	strex	r3, r2, [r1]
 8002066:	61bb      	str	r3, [r7, #24]
   return(result);
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1e6      	bne.n	800203c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	375c      	adds	r7, #92	@ 0x5c
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	08002501 	.word	0x08002501
 8002080:	08002345 	.word	0x08002345

08002084 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002084:	b480      	push	{r7}
 8002086:	b095      	sub	sp, #84	@ 0x54
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002094:	e853 3f00 	ldrex	r3, [r3]
 8002098:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800209a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800209c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80020a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80020ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80020b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80020b2:	e841 2300 	strex	r3, r2, [r1]
 80020b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80020b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1e6      	bne.n	800208c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	3308      	adds	r3, #8
 80020c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	e853 3f00 	ldrex	r3, [r3]
 80020cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	f023 0301 	bic.w	r3, r3, #1
 80020d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	3308      	adds	r3, #8
 80020dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020e6:	e841 2300 	strex	r3, r2, [r1]
 80020ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1e5      	bne.n	80020be <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d118      	bne.n	800212c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	e853 3f00 	ldrex	r3, [r3]
 8002106:	60bb      	str	r3, [r7, #8]
   return(result);
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f023 0310 	bic.w	r3, r3, #16
 800210e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800211c:	6979      	ldr	r1, [r7, #20]
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	e841 2300 	strex	r3, r2, [r1]
 8002124:	613b      	str	r3, [r7, #16]
   return(result);
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1e6      	bne.n	80020fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2220      	movs	r2, #32
 8002130:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002140:	bf00      	nop
 8002142:	3754      	adds	r7, #84	@ 0x54
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002158:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f7ff fa44 	bl	80015f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002178:	b480      	push	{r7}
 800217a:	b08f      	sub	sp, #60	@ 0x3c
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002184:	2b21      	cmp	r3, #33	@ 0x21
 8002186:	d14c      	bne.n	8002222 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d132      	bne.n	80021fa <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	e853 3f00 	ldrex	r3, [r3]
 80021a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021b4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021ba:	e841 2300 	strex	r3, r2, [r1]
 80021be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80021c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1e6      	bne.n	8002194 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	e853 3f00 	ldrex	r3, [r3]
 80021d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021da:	633b      	str	r3, [r7, #48]	@ 0x30
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	461a      	mov	r2, r3
 80021e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021e8:	6979      	ldr	r1, [r7, #20]
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	e841 2300 	strex	r3, r2, [r1]
 80021f0:	613b      	str	r3, [r7, #16]
   return(result);
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1e6      	bne.n	80021c6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80021f8:	e013      	b.n	8002222 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8002222:	bf00      	nop
 8002224:	373c      	adds	r7, #60	@ 0x3c
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800222e:	b480      	push	{r7}
 8002230:	b091      	sub	sp, #68	@ 0x44
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800223a:	2b21      	cmp	r3, #33	@ 0x21
 800223c:	d151      	bne.n	80022e2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d132      	bne.n	80022b0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002252:	e853 3f00 	ldrex	r3, [r3]
 8002256:	623b      	str	r3, [r7, #32]
   return(result);
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800225e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002268:	633b      	str	r3, [r7, #48]	@ 0x30
 800226a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800226c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800226e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002270:	e841 2300 	strex	r3, r2, [r1]
 8002274:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1e6      	bne.n	800224a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	e853 3f00 	ldrex	r3, [r3]
 8002288:	60fb      	str	r3, [r7, #12]
   return(result);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002290:	637b      	str	r3, [r7, #52]	@ 0x34
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800229a:	61fb      	str	r3, [r7, #28]
 800229c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800229e:	69b9      	ldr	r1, [r7, #24]
 80022a0:	69fa      	ldr	r2, [r7, #28]
 80022a2:	e841 2300 	strex	r3, r2, [r1]
 80022a6:	617b      	str	r3, [r7, #20]
   return(result);
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1e6      	bne.n	800227c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80022ae:	e018      	b.n	80022e2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80022b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b8:	881a      	ldrh	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022c2:	b292      	uxth	r2, r2
 80022c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ca:	1c9a      	adds	r2, r3, #2
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80022e2:	bf00      	nop
 80022e4:	3744      	adds	r7, #68	@ 0x44
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b088      	sub	sp, #32
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	e853 3f00 	ldrex	r3, [r3]
 8002302:	60bb      	str	r3, [r7, #8]
   return(result);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	61bb      	str	r3, [r7, #24]
 8002316:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002318:	6979      	ldr	r1, [r7, #20]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	e841 2300 	strex	r3, r2, [r1]
 8002320:	613b      	str	r3, [r7, #16]
   return(result);
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1e6      	bne.n	80022f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2220      	movs	r2, #32
 800232c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f9cb 	bl	80026d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800233a:	bf00      	nop
 800233c:	3720      	adds	r7, #32
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b09c      	sub	sp, #112	@ 0x70
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002352:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800235c:	2b22      	cmp	r3, #34	@ 0x22
 800235e:	f040 80be 	bne.w	80024de <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002368:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800236c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002370:	b2d9      	uxtb	r1, r3
 8002372:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002376:	b2da      	uxtb	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237c:	400a      	ands	r2, r1
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002392:	b29b      	uxth	r3, r3
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f040 80a3 	bne.w	80024f2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023b4:	e853 3f00 	ldrex	r3, [r3]
 80023b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80023ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80023cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80023d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80023d2:	e841 2300 	strex	r3, r2, [r1]
 80023d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80023d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1e6      	bne.n	80023ac <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	3308      	adds	r3, #8
 80023e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e8:	e853 3f00 	ldrex	r3, [r3]
 80023ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80023ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	3308      	adds	r3, #8
 80023fc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80023fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8002400:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002402:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002404:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002406:	e841 2300 	strex	r3, r2, [r1]
 800240a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800240c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1e5      	bne.n	80023de <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2220      	movs	r2, #32
 8002416:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a34      	ldr	r2, [pc, #208]	@ (80024fc <UART_RxISR_8BIT+0x1b8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d01f      	beq.n	8002470 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d018      	beq.n	8002470 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002446:	e853 3f00 	ldrex	r3, [r3]
 800244a:	623b      	str	r3, [r7, #32]
   return(result);
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002452:	663b      	str	r3, [r7, #96]	@ 0x60
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800245c:	633b      	str	r3, [r7, #48]	@ 0x30
 800245e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002460:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002464:	e841 2300 	strex	r3, r2, [r1]
 8002468:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800246a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1e6      	bne.n	800243e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002474:	2b01      	cmp	r3, #1
 8002476:	d12e      	bne.n	80024d6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	e853 3f00 	ldrex	r3, [r3]
 800248a:	60fb      	str	r3, [r7, #12]
   return(result);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 0310 	bic.w	r3, r3, #16
 8002492:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a0:	69b9      	ldr	r1, [r7, #24]
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	e841 2300 	strex	r3, r2, [r1]
 80024a8:	617b      	str	r3, [r7, #20]
   return(result);
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1e6      	bne.n	800247e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	2b10      	cmp	r3, #16
 80024bc:	d103      	bne.n	80024c6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2210      	movs	r2, #16
 80024c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80024cc:	4619      	mov	r1, r3
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff f89c 	bl	800160c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80024d4:	e00d      	b.n	80024f2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f920 	bl	800271c <HAL_UART_RxCpltCallback>
}
 80024dc:	e009      	b.n	80024f2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	8b1b      	ldrh	r3, [r3, #24]
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0208 	orr.w	r2, r2, #8
 80024ee:	b292      	uxth	r2, r2
 80024f0:	831a      	strh	r2, [r3, #24]
}
 80024f2:	bf00      	nop
 80024f4:	3770      	adds	r7, #112	@ 0x70
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40008000 	.word	0x40008000

08002500 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b09c      	sub	sp, #112	@ 0x70
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800250e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002518:	2b22      	cmp	r3, #34	@ 0x22
 800251a:	f040 80be 	bne.w	800269a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002524:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800252e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8002532:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002536:	4013      	ands	r3, r2
 8002538:	b29a      	uxth	r2, r3
 800253a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800253c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002542:	1c9a      	adds	r2, r3, #2
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002560:	b29b      	uxth	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	f040 80a3 	bne.w	80026ae <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800256e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002570:	e853 3f00 	ldrex	r3, [r3]
 8002574:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002576:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002578:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800257c:	667b      	str	r3, [r7, #100]	@ 0x64
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002586:	657b      	str	r3, [r7, #84]	@ 0x54
 8002588:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800258a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800258c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800258e:	e841 2300 	strex	r3, r2, [r1]
 8002592:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8002594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1e6      	bne.n	8002568 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3308      	adds	r3, #8
 80025a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a4:	e853 3f00 	ldrex	r3, [r3]
 80025a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80025aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	3308      	adds	r3, #8
 80025b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80025ba:	643a      	str	r2, [r7, #64]	@ 0x40
 80025bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80025c2:	e841 2300 	strex	r3, r2, [r1]
 80025c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80025c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1e5      	bne.n	800259a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a34      	ldr	r2, [pc, #208]	@ (80026b8 <UART_RxISR_16BIT+0x1b8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d01f      	beq.n	800262c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d018      	beq.n	800262c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	e853 3f00 	ldrex	r3, [r3]
 8002606:	61fb      	str	r3, [r7, #28]
   return(result);
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800260e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800261a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800261e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002620:	e841 2300 	strex	r3, r2, [r1]
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1e6      	bne.n	80025fa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002630:	2b01      	cmp	r3, #1
 8002632:	d12e      	bne.n	8002692 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	e853 3f00 	ldrex	r3, [r3]
 8002646:	60bb      	str	r3, [r7, #8]
   return(result);
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f023 0310 	bic.w	r3, r3, #16
 800264e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265c:	6979      	ldr	r1, [r7, #20]
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	e841 2300 	strex	r3, r2, [r1]
 8002664:	613b      	str	r3, [r7, #16]
   return(result);
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1e6      	bne.n	800263a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b10      	cmp	r3, #16
 8002678:	d103      	bne.n	8002682 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2210      	movs	r2, #16
 8002680:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002688:	4619      	mov	r1, r3
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe ffbe 	bl	800160c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002690:	e00d      	b.n	80026ae <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f842 	bl	800271c <HAL_UART_RxCpltCallback>
}
 8002698:	e009      	b.n	80026ae <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	8b1b      	ldrh	r3, [r3, #24]
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0208 	orr.w	r2, r2, #8
 80026aa:	b292      	uxth	r2, r2
 80026ac:	831a      	strh	r2, [r3, #24]
}
 80026ae:	bf00      	nop
 80026b0:	3770      	adds	r7, #112	@ 0x70
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40008000 	.word	0x40008000

080026bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_UART_TxCpltCallback>:
void led_init(void);
void Error_Handler(void);


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0b      	ldr	r2, [pc, #44]	@ (800270c <HAL_UART_TxCpltCallback+0x3c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d104      	bne.n	80026ec <HAL_UART_TxCpltCallback+0x1c>
	{
		tx_count1++;
 80026e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002710 <HAL_UART_TxCpltCallback+0x40>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3301      	adds	r3, #1
 80026e8:	4a09      	ldr	r2, [pc, #36]	@ (8002710 <HAL_UART_TxCpltCallback+0x40>)
 80026ea:	6013      	str	r3, [r2, #0]
	}
	if(huart->Instance == USART2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a08      	ldr	r2, [pc, #32]	@ (8002714 <HAL_UART_TxCpltCallback+0x44>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d104      	bne.n	8002700 <HAL_UART_TxCpltCallback+0x30>
	{
		tx_count2++;
 80026f6:	4b08      	ldr	r3, [pc, #32]	@ (8002718 <HAL_UART_TxCpltCallback+0x48>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	3301      	adds	r3, #1
 80026fc:	4a06      	ldr	r2, [pc, #24]	@ (8002718 <HAL_UART_TxCpltCallback+0x48>)
 80026fe:	6013      	str	r3, [r2, #0]
	}


}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	40013800 	.word	0x40013800
 8002710:	20000170 	.word	0x20000170
 8002714:	40004400 	.word	0x40004400
 8002718:	20000174 	.word	0x20000174

0800271c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a12      	ldr	r2, [pc, #72]	@ (8002774 <HAL_UART_RxCpltCallback+0x58>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10e      	bne.n	800274c <HAL_UART_RxCpltCallback+0x30>
	{
		rx_count1++;
 800272e:	4b12      	ldr	r3, [pc, #72]	@ (8002778 <HAL_UART_RxCpltCallback+0x5c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	3301      	adds	r3, #1
 8002734:	4a10      	ldr	r2, [pc, #64]	@ (8002778 <HAL_UART_RxCpltCallback+0x5c>)
 8002736:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002738:	2120      	movs	r1, #32
 800273a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800273e:	f7fe fa91 	bl	8000c64 <HAL_GPIO_TogglePin>
		HAL_UART_Receive_IT(&huart1, rx_buffer1, 10);
 8002742:	220a      	movs	r2, #10
 8002744:	490d      	ldr	r1, [pc, #52]	@ (800277c <HAL_UART_RxCpltCallback+0x60>)
 8002746:	480e      	ldr	r0, [pc, #56]	@ (8002780 <HAL_UART_RxCpltCallback+0x64>)
 8002748:	f7fe fc20 	bl	8000f8c <HAL_UART_Receive_IT>
	}
	if(huart->Instance == USART2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0c      	ldr	r2, [pc, #48]	@ (8002784 <HAL_UART_RxCpltCallback+0x68>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d109      	bne.n	800276a <HAL_UART_RxCpltCallback+0x4e>
	{
		rx_count1++;
 8002756:	4b08      	ldr	r3, [pc, #32]	@ (8002778 <HAL_UART_RxCpltCallback+0x5c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	3301      	adds	r3, #1
 800275c:	4a06      	ldr	r2, [pc, #24]	@ (8002778 <HAL_UART_RxCpltCallback+0x5c>)
 800275e:	6013      	str	r3, [r2, #0]

		HAL_UART_Receive_IT(&huart2, rx_buffer2, 10);
 8002760:	220a      	movs	r2, #10
 8002762:	4909      	ldr	r1, [pc, #36]	@ (8002788 <HAL_UART_RxCpltCallback+0x6c>)
 8002764:	4809      	ldr	r0, [pc, #36]	@ (800278c <HAL_UART_RxCpltCallback+0x70>)
 8002766:	f7fe fc11 	bl	8000f8c <HAL_UART_Receive_IT>
	}

}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40013800 	.word	0x40013800
 8002778:	2000016c 	.word	0x2000016c
 800277c:	20000154 	.word	0x20000154
 8002780:	20000044 	.word	0x20000044
 8002784:	40004400 	.word	0x40004400
 8002788:	20000160 	.word	0x20000160
 800278c:	200000cc 	.word	0x200000cc

08002790 <main>:

int main()
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
	HAL_Init();
 8002794:	f7fd feb0 	bl	80004f8 <HAL_Init>
	uart1_init();
 8002798:	f000 f820 	bl	80027dc <uart1_init>
	uart2_init();
 800279c:	f000 f88c 	bl	80028b8 <uart2_init>
	led_init();
 80027a0:	f000 f8f8 	bl	8002994 <led_init>

	HAL_UART_Transmit_IT(&huart1, tx_buffer1, 10);
 80027a4:	220a      	movs	r2, #10
 80027a6:	4908      	ldr	r1, [pc, #32]	@ (80027c8 <main+0x38>)
 80027a8:	4808      	ldr	r0, [pc, #32]	@ (80027cc <main+0x3c>)
 80027aa:	f7fe fb91 	bl	8000ed0 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, rx_buffer1, 10);
 80027ae:	220a      	movs	r2, #10
 80027b0:	4907      	ldr	r1, [pc, #28]	@ (80027d0 <main+0x40>)
 80027b2:	4806      	ldr	r0, [pc, #24]	@ (80027cc <main+0x3c>)
 80027b4:	f7fe fbea 	bl	8000f8c <HAL_UART_Receive_IT>

	HAL_UART_Transmit_IT(&huart2, tx_buffer2, 10);
 80027b8:	220a      	movs	r2, #10
 80027ba:	4906      	ldr	r1, [pc, #24]	@ (80027d4 <main+0x44>)
 80027bc:	4806      	ldr	r0, [pc, #24]	@ (80027d8 <main+0x48>)
 80027be:	f7fe fb87 	bl	8000ed0 <HAL_UART_Transmit_IT>
	while(1)
 80027c2:	bf00      	nop
 80027c4:	e7fd      	b.n	80027c2 <main+0x32>
 80027c6:	bf00      	nop
 80027c8:	20000008 	.word	0x20000008
 80027cc:	20000044 	.word	0x20000044
 80027d0:	20000154 	.word	0x20000154
 80027d4:	20000014 	.word	0x20000014
 80027d8:	200000cc 	.word	0x200000cc

080027dc <uart1_init>:

	}
}

void uart1_init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e2:	f107 030c 	add.w	r3, r7, #12
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	609a      	str	r2, [r3, #8]
 80027ee:	60da      	str	r2, [r3, #12]
 80027f0:	611a      	str	r2, [r3, #16]
	//Enable clock for UART pins
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80027f2:	4b2e      	ldr	r3, [pc, #184]	@ (80028ac <uart1_init+0xd0>)
 80027f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f6:	4a2d      	ldr	r2, [pc, #180]	@ (80028ac <uart1_init+0xd0>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027fe:	4b2b      	ldr	r3, [pc, #172]	@ (80028ac <uart1_init+0xd0>)
 8002800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]

	//Enable UART module clock access
	__HAL_RCC_USART1_CLK_ENABLE();
 800280a:	4b28      	ldr	r3, [pc, #160]	@ (80028ac <uart1_init+0xd0>)
 800280c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800280e:	4a27      	ldr	r2, [pc, #156]	@ (80028ac <uart1_init+0xd0>)
 8002810:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002814:	6613      	str	r3, [r2, #96]	@ 0x60
 8002816:	4b25      	ldr	r3, [pc, #148]	@ (80028ac <uart1_init+0xd0>)
 8002818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800281a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	687b      	ldr	r3, [r7, #4]

	//Configure GPIO pins as alternate functionality pins for UART2
	GPIO_InitStruct.Pin   = GPIO_PIN_9 | GPIO_PIN_10;
 8002822:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002826:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002830:	2303      	movs	r3, #3
 8002832:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002834:	2307      	movs	r3, #7
 8002836:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002838:	f107 030c 	add.w	r3, r7, #12
 800283c:	4619      	mov	r1, r3
 800283e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002842:	f7fe f865 	bl	8000910 <HAL_GPIO_Init>

	  huart1.Instance = USART1;
 8002846:	4b1a      	ldr	r3, [pc, #104]	@ (80028b0 <uart1_init+0xd4>)
 8002848:	4a1a      	ldr	r2, [pc, #104]	@ (80028b4 <uart1_init+0xd8>)
 800284a:	601a      	str	r2, [r3, #0]
	  huart1.Init.BaudRate = 115200;
 800284c:	4b18      	ldr	r3, [pc, #96]	@ (80028b0 <uart1_init+0xd4>)
 800284e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002852:	605a      	str	r2, [r3, #4]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002854:	4b16      	ldr	r3, [pc, #88]	@ (80028b0 <uart1_init+0xd4>)
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 800285a:	4b15      	ldr	r3, [pc, #84]	@ (80028b0 <uart1_init+0xd4>)
 800285c:	2200      	movs	r2, #0
 800285e:	60da      	str	r2, [r3, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 8002860:	4b13      	ldr	r3, [pc, #76]	@ (80028b0 <uart1_init+0xd4>)
 8002862:	2200      	movs	r2, #0
 8002864:	611a      	str	r2, [r3, #16]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 8002866:	4b12      	ldr	r3, [pc, #72]	@ (80028b0 <uart1_init+0xd4>)
 8002868:	220c      	movs	r2, #12
 800286a:	615a      	str	r2, [r3, #20]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800286c:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <uart1_init+0xd4>)
 800286e:	2200      	movs	r2, #0
 8002870:	619a      	str	r2, [r3, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002872:	4b0f      	ldr	r3, [pc, #60]	@ (80028b0 <uart1_init+0xd4>)
 8002874:	2200      	movs	r2, #0
 8002876:	61da      	str	r2, [r3, #28]
	  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002878:	4b0d      	ldr	r3, [pc, #52]	@ (80028b0 <uart1_init+0xd4>)
 800287a:	2200      	movs	r2, #0
 800287c:	621a      	str	r2, [r3, #32]
	  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800287e:	4b0c      	ldr	r3, [pc, #48]	@ (80028b0 <uart1_init+0xd4>)
 8002880:	2200      	movs	r2, #0
 8002882:	625a      	str	r2, [r3, #36]	@ 0x24
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002884:	480a      	ldr	r0, [pc, #40]	@ (80028b0 <uart1_init+0xd4>)
 8002886:	f7fe facb 	bl	8000e20 <HAL_UART_Init>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <uart1_init+0xb8>
	  {
	    Error_Handler();
 8002890:	f000 f8c4 	bl	8002a1c <Error_Handler>
	  }

	  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002894:	2200      	movs	r2, #0
 8002896:	2100      	movs	r1, #0
 8002898:	2025      	movs	r0, #37	@ 0x25
 800289a:	f7fd ff84 	bl	80007a6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800289e:	2025      	movs	r0, #37	@ 0x25
 80028a0:	f7fd ff9d 	bl	80007de <HAL_NVIC_EnableIRQ>

}
 80028a4:	bf00      	nop
 80028a6:	3720      	adds	r7, #32
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000
 80028b0:	20000044 	.word	0x20000044
 80028b4:	40013800 	.word	0x40013800

080028b8 <uart2_init>:

void uart2_init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028be:	f107 030c 	add.w	r3, r7, #12
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	60da      	str	r2, [r3, #12]
 80028cc:	611a      	str	r2, [r3, #16]
	//Enable clock for UART pins
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80028ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002988 <uart2_init+0xd0>)
 80028d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002988 <uart2_init+0xd0>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028da:	4b2b      	ldr	r3, [pc, #172]	@ (8002988 <uart2_init+0xd0>)
 80028dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]

	//Enable UART module clock access
	__HAL_RCC_USART2_CLK_ENABLE();
 80028e6:	4b28      	ldr	r3, [pc, #160]	@ (8002988 <uart2_init+0xd0>)
 80028e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ea:	4a27      	ldr	r2, [pc, #156]	@ (8002988 <uart2_init+0xd0>)
 80028ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80028f2:	4b25      	ldr	r3, [pc, #148]	@ (8002988 <uart2_init+0xd0>)
 80028f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]

	//Configure GPIO pins as alternate functionality pins for UART2
	GPIO_InitStruct.Pin   = GPIO_PIN_2 | GPIO_PIN_3;
 80028fe:	230c      	movs	r3, #12
 8002900:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290a:	2303      	movs	r3, #3
 800290c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800290e:	2307      	movs	r3, #7
 8002910:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002912:	f107 030c 	add.w	r3, r7, #12
 8002916:	4619      	mov	r1, r3
 8002918:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800291c:	f7fd fff8 	bl	8000910 <HAL_GPIO_Init>

	  huart2.Instance = USART2;
 8002920:	4b1a      	ldr	r3, [pc, #104]	@ (800298c <uart2_init+0xd4>)
 8002922:	4a1b      	ldr	r2, [pc, #108]	@ (8002990 <uart2_init+0xd8>)
 8002924:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8002926:	4b19      	ldr	r3, [pc, #100]	@ (800298c <uart2_init+0xd4>)
 8002928:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800292c:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800292e:	4b17      	ldr	r3, [pc, #92]	@ (800298c <uart2_init+0xd4>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8002934:	4b15      	ldr	r3, [pc, #84]	@ (800298c <uart2_init+0xd4>)
 8002936:	2200      	movs	r2, #0
 8002938:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 800293a:	4b14      	ldr	r3, [pc, #80]	@ (800298c <uart2_init+0xd4>)
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8002940:	4b12      	ldr	r3, [pc, #72]	@ (800298c <uart2_init+0xd4>)
 8002942:	220c      	movs	r2, #12
 8002944:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002946:	4b11      	ldr	r3, [pc, #68]	@ (800298c <uart2_init+0xd4>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800294c:	4b0f      	ldr	r3, [pc, #60]	@ (800298c <uart2_init+0xd4>)
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002952:	4b0e      	ldr	r3, [pc, #56]	@ (800298c <uart2_init+0xd4>)
 8002954:	2200      	movs	r2, #0
 8002956:	621a      	str	r2, [r3, #32]
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002958:	4b0c      	ldr	r3, [pc, #48]	@ (800298c <uart2_init+0xd4>)
 800295a:	2200      	movs	r2, #0
 800295c:	625a      	str	r2, [r3, #36]	@ 0x24
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 800295e:	480b      	ldr	r0, [pc, #44]	@ (800298c <uart2_init+0xd4>)
 8002960:	f7fe fa5e 	bl	8000e20 <HAL_UART_Init>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <uart2_init+0xb6>
	  {
	    Error_Handler();
 800296a:	f000 f857 	bl	8002a1c <Error_Handler>
	  }

	  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	2100      	movs	r1, #0
 8002972:	2026      	movs	r0, #38	@ 0x26
 8002974:	f7fd ff17 	bl	80007a6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002978:	2026      	movs	r0, #38	@ 0x26
 800297a:	f7fd ff30 	bl	80007de <HAL_NVIC_EnableIRQ>

}
 800297e:	bf00      	nop
 8002980:	3720      	adds	r7, #32
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000
 800298c:	200000cc 	.word	0x200000cc
 8002990:	40004400 	.word	0x40004400

08002994 <led_init>:
void led_init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299a:	1d3b      	adds	r3, r7, #4
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
	//1. Configure PA5 as GPIO output for LED
	//Enable Clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80029a8:	4b0e      	ldr	r3, [pc, #56]	@ (80029e4 <led_init+0x50>)
 80029aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ac:	4a0d      	ldr	r2, [pc, #52]	@ (80029e4 <led_init+0x50>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029b4:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <led_init+0x50>)
 80029b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	603b      	str	r3, [r7, #0]
 80029be:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = LED_PIN;
 80029c0:	2320      	movs	r3, #32
 80029c2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c4:	2301      	movs	r3, #1
 80029c6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029cc:	2300      	movs	r3, #0
 80029ce:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 80029d0:	1d3b      	adds	r3, r7, #4
 80029d2:	4619      	mov	r1, r3
 80029d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029d8:	f7fd ff9a 	bl	8000910 <HAL_GPIO_Init>
}
 80029dc:	bf00      	nop
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000

080029e8 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 80029ec:	4802      	ldr	r0, [pc, #8]	@ (80029f8 <USART1_IRQHandler+0x10>)
 80029ee:	f7fe fb19 	bl	8001024 <HAL_UART_IRQHandler>
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000044 	.word	0x20000044

080029fc <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8002a00:	4802      	ldr	r0, [pc, #8]	@ (8002a0c <USART2_IRQHandler+0x10>)
 8002a02:	f7fe fb0f 	bl	8001024 <HAL_UART_IRQHandler>
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200000cc 	.word	0x200000cc

08002a10 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8002a14:	f7fd fdcc 	bl	80005b0 <HAL_IncTick>
}
 8002a18:	bf00      	nop
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <Error_Handler>:
void Error_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0

}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
	...

08002a2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a2c:	480d      	ldr	r0, [pc, #52]	@ (8002a64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a2e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a30:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a34:	480c      	ldr	r0, [pc, #48]	@ (8002a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a36:	490d      	ldr	r1, [pc, #52]	@ (8002a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a38:	4a0d      	ldr	r2, [pc, #52]	@ (8002a70 <LoopForever+0xe>)
  movs r3, #0
 8002a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a3c:	e002      	b.n	8002a44 <LoopCopyDataInit>

08002a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a42:	3304      	adds	r3, #4

08002a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a48:	d3f9      	bcc.n	8002a3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a4c:	4c0a      	ldr	r4, [pc, #40]	@ (8002a78 <LoopForever+0x16>)
  movs r3, #0
 8002a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a50:	e001      	b.n	8002a56 <LoopFillZerobss>

08002a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a54:	3204      	adds	r2, #4

08002a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a58:	d3fb      	bcc.n	8002a52 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8002a5a:	f000 f811 	bl	8002a80 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8002a5e:	f7ff fe97 	bl	8002790 <main>

08002a62 <LoopForever>:

LoopForever:
  b LoopForever
 8002a62:	e7fe      	b.n	8002a62 <LoopForever>
  ldr   r0, =_estack
 8002a64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a6c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002a70:	08002b28 	.word	0x08002b28
  ldr r2, =_sbss
 8002a74:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002a78:	20000178 	.word	0x20000178

08002a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a7c:	e7fe      	b.n	8002a7c <ADC1_2_IRQHandler>
	...

08002a80 <__libc_init_array>:
 8002a80:	b570      	push	{r4, r5, r6, lr}
 8002a82:	4d0d      	ldr	r5, [pc, #52]	@ (8002ab8 <__libc_init_array+0x38>)
 8002a84:	4c0d      	ldr	r4, [pc, #52]	@ (8002abc <__libc_init_array+0x3c>)
 8002a86:	1b64      	subs	r4, r4, r5
 8002a88:	10a4      	asrs	r4, r4, #2
 8002a8a:	2600      	movs	r6, #0
 8002a8c:	42a6      	cmp	r6, r4
 8002a8e:	d109      	bne.n	8002aa4 <__libc_init_array+0x24>
 8002a90:	4d0b      	ldr	r5, [pc, #44]	@ (8002ac0 <__libc_init_array+0x40>)
 8002a92:	4c0c      	ldr	r4, [pc, #48]	@ (8002ac4 <__libc_init_array+0x44>)
 8002a94:	f000 f818 	bl	8002ac8 <_init>
 8002a98:	1b64      	subs	r4, r4, r5
 8002a9a:	10a4      	asrs	r4, r4, #2
 8002a9c:	2600      	movs	r6, #0
 8002a9e:	42a6      	cmp	r6, r4
 8002aa0:	d105      	bne.n	8002aae <__libc_init_array+0x2e>
 8002aa2:	bd70      	pop	{r4, r5, r6, pc}
 8002aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aa8:	4798      	blx	r3
 8002aaa:	3601      	adds	r6, #1
 8002aac:	e7ee      	b.n	8002a8c <__libc_init_array+0xc>
 8002aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ab2:	4798      	blx	r3
 8002ab4:	3601      	adds	r6, #1
 8002ab6:	e7f2      	b.n	8002a9e <__libc_init_array+0x1e>
 8002ab8:	08002b20 	.word	0x08002b20
 8002abc:	08002b20 	.word	0x08002b20
 8002ac0:	08002b20 	.word	0x08002b20
 8002ac4:	08002b24 	.word	0x08002b24

08002ac8 <_init>:
 8002ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aca:	bf00      	nop
 8002acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ace:	bc08      	pop	{r3}
 8002ad0:	469e      	mov	lr, r3
 8002ad2:	4770      	bx	lr

08002ad4 <_fini>:
 8002ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad6:	bf00      	nop
 8002ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ada:	bc08      	pop	{r3}
 8002adc:	469e      	mov	lr, r3
 8002ade:	4770      	bx	lr
