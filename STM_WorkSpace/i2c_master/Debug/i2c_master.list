
i2c_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000140c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001598  08001598  00003018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001598  08001598  00003018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001598  08001598  00003018  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001598  08001598  00003018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001598  08001598  00002598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800159c  0800159c  0000259c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080015a0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00003018  2**0
                  CONTENTS
 10 .bss          00000108  20000018  20000018  00003018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000120  20000120  00003018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac53  00000000  00000000  00003048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016c2  00000000  00000000  0000dc9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  0000f360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000965  00000000  00000000  0000ff68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001f27  00000000  00000000  000108cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f052  00000000  00000000  000127f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001070cc  00000000  00000000  00021846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00128912  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003358  00000000  00000000  00128958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0012bcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000018 	.word	0x20000018
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001580 	.word	0x08001580

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	08001580 	.word	0x08001580

080001cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001d2:	2300      	movs	r3, #0
 80001d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d6:	2003      	movs	r0, #3
 80001d8:	f000 f94a 	bl	8000470 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001dc:	200f      	movs	r0, #15
 80001de:	f000 f815 	bl	800020c <HAL_InitTick>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e8:	2301      	movs	r3, #1
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	e001      	b.n	80001f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ee:	f000 f805 	bl	80001fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001f2:	79fb      	ldrb	r3, [r7, #7]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
	...

0800020c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000214:	2300      	movs	r3, #0
 8000216:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000218:	4b17      	ldr	r3, [pc, #92]	@ (8000278 <HAL_InitTick+0x6c>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d023      	beq.n	8000268 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000220:	4b16      	ldr	r3, [pc, #88]	@ (800027c <HAL_InitTick+0x70>)
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	4b14      	ldr	r3, [pc, #80]	@ (8000278 <HAL_InitTick+0x6c>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	4619      	mov	r1, r3
 800022a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800022e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000232:	fbb2 f3f3 	udiv	r3, r2, r3
 8000236:	4618      	mov	r0, r3
 8000238:	f000 f941 	bl	80004be <HAL_SYSTICK_Config>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d10f      	bne.n	8000262 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b0f      	cmp	r3, #15
 8000246:	d809      	bhi.n	800025c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000248:	2200      	movs	r2, #0
 800024a:	6879      	ldr	r1, [r7, #4]
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	f000 f919 	bl	8000486 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000254:	4a0a      	ldr	r2, [pc, #40]	@ (8000280 <HAL_InitTick+0x74>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	6013      	str	r3, [r2, #0]
 800025a:	e007      	b.n	800026c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800025c:	2301      	movs	r3, #1
 800025e:	73fb      	strb	r3, [r7, #15]
 8000260:	e004      	b.n	800026c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000262:	2301      	movs	r3, #1
 8000264:	73fb      	strb	r3, [r7, #15]
 8000266:	e001      	b.n	800026c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000268:	2301      	movs	r3, #1
 800026a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800026c:	7bfb      	ldrb	r3, [r7, #15]
}
 800026e:	4618      	mov	r0, r3
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000004 	.word	0x20000004
 800027c:	20000014 	.word	0x20000014
 8000280:	20000000 	.word	0x20000000

08000284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000288:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <HAL_IncTick+0x20>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	461a      	mov	r2, r3
 800028e:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <HAL_IncTick+0x24>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4413      	add	r3, r2
 8000294:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <HAL_IncTick+0x24>)
 8000296:	6013      	str	r3, [r2, #0]
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000004 	.word	0x20000004
 80002a8:	20000034 	.word	0x20000034

080002ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  return uwTick;
 80002b0:	4b03      	ldr	r3, [pc, #12]	@ (80002c0 <HAL_GetTick+0x14>)
 80002b2:	681b      	ldr	r3, [r3, #0]
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	20000034 	.word	0x20000034

080002c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002cc:	f7ff ffee 	bl	80002ac <HAL_GetTick>
 80002d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002dc:	d005      	beq.n	80002ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80002de:	4b0a      	ldr	r3, [pc, #40]	@ (8000308 <HAL_Delay+0x44>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	461a      	mov	r2, r3
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	4413      	add	r3, r2
 80002e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002ea:	bf00      	nop
 80002ec:	f7ff ffde 	bl	80002ac <HAL_GetTick>
 80002f0:	4602      	mov	r2, r0
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	1ad3      	subs	r3, r2, r3
 80002f6:	68fa      	ldr	r2, [r7, #12]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d8f7      	bhi.n	80002ec <HAL_Delay+0x28>
  {
  }
}
 80002fc:	bf00      	nop
 80002fe:	bf00      	nop
 8000300:	3710      	adds	r7, #16
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20000004 	.word	0x20000004

0800030c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	f003 0307 	and.w	r3, r3, #7
 800031a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800031c:	4b0c      	ldr	r3, [pc, #48]	@ (8000350 <__NVIC_SetPriorityGrouping+0x44>)
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000322:	68ba      	ldr	r2, [r7, #8]
 8000324:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000328:	4013      	ands	r3, r2
 800032a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000334:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800033c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800033e:	4a04      	ldr	r2, [pc, #16]	@ (8000350 <__NVIC_SetPriorityGrouping+0x44>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	60d3      	str	r3, [r2, #12]
}
 8000344:	bf00      	nop
 8000346:	3714      	adds	r7, #20
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	e000ed00 	.word	0xe000ed00

08000354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000358:	4b04      	ldr	r3, [pc, #16]	@ (800036c <__NVIC_GetPriorityGrouping+0x18>)
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	0a1b      	lsrs	r3, r3, #8
 800035e:	f003 0307 	and.w	r3, r3, #7
}
 8000362:	4618      	mov	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	e000ed00 	.word	0xe000ed00

08000370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	6039      	str	r1, [r7, #0]
 800037a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800037c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000380:	2b00      	cmp	r3, #0
 8000382:	db0a      	blt.n	800039a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	b2da      	uxtb	r2, r3
 8000388:	490c      	ldr	r1, [pc, #48]	@ (80003bc <__NVIC_SetPriority+0x4c>)
 800038a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800038e:	0112      	lsls	r2, r2, #4
 8000390:	b2d2      	uxtb	r2, r2
 8000392:	440b      	add	r3, r1
 8000394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000398:	e00a      	b.n	80003b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	b2da      	uxtb	r2, r3
 800039e:	4908      	ldr	r1, [pc, #32]	@ (80003c0 <__NVIC_SetPriority+0x50>)
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	f003 030f 	and.w	r3, r3, #15
 80003a6:	3b04      	subs	r3, #4
 80003a8:	0112      	lsls	r2, r2, #4
 80003aa:	b2d2      	uxtb	r2, r2
 80003ac:	440b      	add	r3, r1
 80003ae:	761a      	strb	r2, [r3, #24]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	e000e100 	.word	0xe000e100
 80003c0:	e000ed00 	.word	0xe000ed00

080003c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b089      	sub	sp, #36	@ 0x24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	60b9      	str	r1, [r7, #8]
 80003ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f003 0307 	and.w	r3, r3, #7
 80003d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003d8:	69fb      	ldr	r3, [r7, #28]
 80003da:	f1c3 0307 	rsb	r3, r3, #7
 80003de:	2b04      	cmp	r3, #4
 80003e0:	bf28      	it	cs
 80003e2:	2304      	movcs	r3, #4
 80003e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003e6:	69fb      	ldr	r3, [r7, #28]
 80003e8:	3304      	adds	r3, #4
 80003ea:	2b06      	cmp	r3, #6
 80003ec:	d902      	bls.n	80003f4 <NVIC_EncodePriority+0x30>
 80003ee:	69fb      	ldr	r3, [r7, #28]
 80003f0:	3b03      	subs	r3, #3
 80003f2:	e000      	b.n	80003f6 <NVIC_EncodePriority+0x32>
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f8:	f04f 32ff 	mov.w	r2, #4294967295
 80003fc:	69bb      	ldr	r3, [r7, #24]
 80003fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000402:	43da      	mvns	r2, r3
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	401a      	ands	r2, r3
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800040c:	f04f 31ff 	mov.w	r1, #4294967295
 8000410:	697b      	ldr	r3, [r7, #20]
 8000412:	fa01 f303 	lsl.w	r3, r1, r3
 8000416:	43d9      	mvns	r1, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800041c:	4313      	orrs	r3, r2
         );
}
 800041e:	4618      	mov	r0, r3
 8000420:	3724      	adds	r7, #36	@ 0x24
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
	...

0800042c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	3b01      	subs	r3, #1
 8000438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800043c:	d301      	bcc.n	8000442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800043e:	2301      	movs	r3, #1
 8000440:	e00f      	b.n	8000462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000442:	4a0a      	ldr	r2, [pc, #40]	@ (800046c <SysTick_Config+0x40>)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3b01      	subs	r3, #1
 8000448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800044a:	210f      	movs	r1, #15
 800044c:	f04f 30ff 	mov.w	r0, #4294967295
 8000450:	f7ff ff8e 	bl	8000370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000454:	4b05      	ldr	r3, [pc, #20]	@ (800046c <SysTick_Config+0x40>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800045a:	4b04      	ldr	r3, [pc, #16]	@ (800046c <SysTick_Config+0x40>)
 800045c:	2207      	movs	r2, #7
 800045e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000460:	2300      	movs	r3, #0
}
 8000462:	4618      	mov	r0, r3
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	e000e010 	.word	0xe000e010

08000470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000478:	6878      	ldr	r0, [r7, #4]
 800047a:	f7ff ff47 	bl	800030c <__NVIC_SetPriorityGrouping>
}
 800047e:	bf00      	nop
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000486:	b580      	push	{r7, lr}
 8000488:	b086      	sub	sp, #24
 800048a:	af00      	add	r7, sp, #0
 800048c:	4603      	mov	r3, r0
 800048e:	60b9      	str	r1, [r7, #8]
 8000490:	607a      	str	r2, [r7, #4]
 8000492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000498:	f7ff ff5c 	bl	8000354 <__NVIC_GetPriorityGrouping>
 800049c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	68b9      	ldr	r1, [r7, #8]
 80004a2:	6978      	ldr	r0, [r7, #20]
 80004a4:	f7ff ff8e 	bl	80003c4 <NVIC_EncodePriority>
 80004a8:	4602      	mov	r2, r0
 80004aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff ff5d 	bl	8000370 <__NVIC_SetPriority>
}
 80004b6:	bf00      	nop
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	b082      	sub	sp, #8
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	f7ff ffb0 	bl	800042c <SysTick_Config>
 80004cc:	4603      	mov	r3, r0
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b084      	sub	sp, #16
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004f2:	f003 031c 	and.w	r3, r3, #28
 80004f6:	2204      	movs	r2, #4
 80004f8:	409a      	lsls	r2, r3
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	4013      	ands	r3, r2
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d026      	beq.n	8000550 <HAL_DMA_IRQHandler+0x7a>
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	f003 0304 	and.w	r3, r3, #4
 8000508:	2b00      	cmp	r3, #0
 800050a:	d021      	beq.n	8000550 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f003 0320 	and.w	r3, r3, #32
 8000516:	2b00      	cmp	r3, #0
 8000518:	d107      	bne.n	800052a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f022 0204 	bic.w	r2, r2, #4
 8000528:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800052e:	f003 021c 	and.w	r2, r3, #28
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000536:	2104      	movs	r1, #4
 8000538:	fa01 f202 	lsl.w	r2, r1, r2
 800053c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	2b00      	cmp	r3, #0
 8000544:	d071      	beq.n	800062a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800054e:	e06c      	b.n	800062a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000554:	f003 031c 	and.w	r3, r3, #28
 8000558:	2202      	movs	r2, #2
 800055a:	409a      	lsls	r2, r3
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	4013      	ands	r3, r2
 8000560:	2b00      	cmp	r3, #0
 8000562:	d02e      	beq.n	80005c2 <HAL_DMA_IRQHandler+0xec>
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	2b00      	cmp	r3, #0
 800056c:	d029      	beq.n	80005c2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f003 0320 	and.w	r3, r3, #32
 8000578:	2b00      	cmp	r3, #0
 800057a:	d10b      	bne.n	8000594 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f022 020a 	bic.w	r2, r2, #10
 800058a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000598:	f003 021c 	and.w	r2, r3, #28
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	2102      	movs	r1, #2
 80005a2:	fa01 f202 	lsl.w	r2, r1, r2
 80005a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2200      	movs	r2, #0
 80005ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d038      	beq.n	800062a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80005c0:	e033      	b.n	800062a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005c6:	f003 031c 	and.w	r3, r3, #28
 80005ca:	2208      	movs	r2, #8
 80005cc:	409a      	lsls	r2, r3
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	4013      	ands	r3, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d02a      	beq.n	800062c <HAL_DMA_IRQHandler+0x156>
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	f003 0308 	and.w	r3, r3, #8
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d025      	beq.n	800062c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f022 020e 	bic.w	r2, r2, #14
 80005ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f4:	f003 021c 	and.w	r2, r3, #28
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	2101      	movs	r1, #1
 80005fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000602:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2201      	movs	r2, #1
 8000608:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2201      	movs	r2, #1
 800060e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800061e:	2b00      	cmp	r3, #0
 8000620:	d004      	beq.n	800062c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800062a:	bf00      	nop
 800062c:	bf00      	nop
}
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000634:	b480      	push	{r7}
 8000636:	b087      	sub	sp, #28
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000642:	e17f      	b.n	8000944 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	2101      	movs	r1, #1
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	fa01 f303 	lsl.w	r3, r1, r3
 8000650:	4013      	ands	r3, r2
 8000652:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	2b00      	cmp	r3, #0
 8000658:	f000 8171 	beq.w	800093e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	f003 0303 	and.w	r3, r3, #3
 8000664:	2b01      	cmp	r3, #1
 8000666:	d005      	beq.n	8000674 <HAL_GPIO_Init+0x40>
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	f003 0303 	and.w	r3, r3, #3
 8000670:	2b02      	cmp	r3, #2
 8000672:	d130      	bne.n	80006d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	2203      	movs	r2, #3
 8000680:	fa02 f303 	lsl.w	r3, r2, r3
 8000684:	43db      	mvns	r3, r3
 8000686:	693a      	ldr	r2, [r7, #16]
 8000688:	4013      	ands	r3, r2
 800068a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	68da      	ldr	r2, [r3, #12]
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	fa02 f303 	lsl.w	r3, r2, r3
 8000698:	693a      	ldr	r2, [r7, #16]
 800069a:	4313      	orrs	r3, r2
 800069c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	693a      	ldr	r2, [r7, #16]
 80006a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80006aa:	2201      	movs	r2, #1
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	fa02 f303 	lsl.w	r3, r2, r3
 80006b2:	43db      	mvns	r3, r3
 80006b4:	693a      	ldr	r2, [r7, #16]
 80006b6:	4013      	ands	r3, r2
 80006b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	091b      	lsrs	r3, r3, #4
 80006c0:	f003 0201 	and.w	r2, r3, #1
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	693a      	ldr	r2, [r7, #16]
 80006cc:	4313      	orrs	r3, r2
 80006ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	f003 0303 	and.w	r3, r3, #3
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d118      	bne.n	8000714 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80006e8:	2201      	movs	r2, #1
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	fa02 f303 	lsl.w	r3, r2, r3
 80006f0:	43db      	mvns	r3, r3
 80006f2:	693a      	ldr	r2, [r7, #16]
 80006f4:	4013      	ands	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	08db      	lsrs	r3, r3, #3
 80006fe:	f003 0201 	and.w	r2, r3, #1
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	693a      	ldr	r2, [r7, #16]
 800070a:	4313      	orrs	r3, r2
 800070c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	693a      	ldr	r2, [r7, #16]
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	f003 0303 	and.w	r3, r3, #3
 800071c:	2b03      	cmp	r3, #3
 800071e:	d017      	beq.n	8000750 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	2203      	movs	r2, #3
 800072c:	fa02 f303 	lsl.w	r3, r2, r3
 8000730:	43db      	mvns	r3, r3
 8000732:	693a      	ldr	r2, [r7, #16]
 8000734:	4013      	ands	r3, r2
 8000736:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	689a      	ldr	r2, [r3, #8]
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	fa02 f303 	lsl.w	r3, r2, r3
 8000744:	693a      	ldr	r2, [r7, #16]
 8000746:	4313      	orrs	r3, r2
 8000748:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	693a      	ldr	r2, [r7, #16]
 800074e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	f003 0303 	and.w	r3, r3, #3
 8000758:	2b02      	cmp	r3, #2
 800075a:	d123      	bne.n	80007a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	08da      	lsrs	r2, r3, #3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3208      	adds	r2, #8
 8000764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000768:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	f003 0307 	and.w	r3, r3, #7
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	220f      	movs	r2, #15
 8000774:	fa02 f303 	lsl.w	r3, r2, r3
 8000778:	43db      	mvns	r3, r3
 800077a:	693a      	ldr	r2, [r7, #16]
 800077c:	4013      	ands	r3, r2
 800077e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	691a      	ldr	r2, [r3, #16]
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	f003 0307 	and.w	r3, r3, #7
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	fa02 f303 	lsl.w	r3, r2, r3
 8000790:	693a      	ldr	r2, [r7, #16]
 8000792:	4313      	orrs	r3, r2
 8000794:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	08da      	lsrs	r2, r3, #3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	3208      	adds	r2, #8
 800079e:	6939      	ldr	r1, [r7, #16]
 80007a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	2203      	movs	r2, #3
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	43db      	mvns	r3, r3
 80007b6:	693a      	ldr	r2, [r7, #16]
 80007b8:	4013      	ands	r3, r2
 80007ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	f003 0203 	and.w	r2, r3, #3
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	fa02 f303 	lsl.w	r3, r2, r3
 80007cc:	693a      	ldr	r2, [r7, #16]
 80007ce:	4313      	orrs	r3, r2
 80007d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	693a      	ldr	r2, [r7, #16]
 80007d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	f000 80ac 	beq.w	800093e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	4b5f      	ldr	r3, [pc, #380]	@ (8000964 <HAL_GPIO_Init+0x330>)
 80007e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ea:	4a5e      	ldr	r2, [pc, #376]	@ (8000964 <HAL_GPIO_Init+0x330>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80007f2:	4b5c      	ldr	r3, [pc, #368]	@ (8000964 <HAL_GPIO_Init+0x330>)
 80007f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80007fe:	4a5a      	ldr	r2, [pc, #360]	@ (8000968 <HAL_GPIO_Init+0x334>)
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	089b      	lsrs	r3, r3, #2
 8000804:	3302      	adds	r3, #2
 8000806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800080a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	f003 0303 	and.w	r3, r3, #3
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	220f      	movs	r2, #15
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	43db      	mvns	r3, r3
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	4013      	ands	r3, r2
 8000820:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000828:	d025      	beq.n	8000876 <HAL_GPIO_Init+0x242>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a4f      	ldr	r2, [pc, #316]	@ (800096c <HAL_GPIO_Init+0x338>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d01f      	beq.n	8000872 <HAL_GPIO_Init+0x23e>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a4e      	ldr	r2, [pc, #312]	@ (8000970 <HAL_GPIO_Init+0x33c>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d019      	beq.n	800086e <HAL_GPIO_Init+0x23a>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a4d      	ldr	r2, [pc, #308]	@ (8000974 <HAL_GPIO_Init+0x340>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d013      	beq.n	800086a <HAL_GPIO_Init+0x236>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a4c      	ldr	r2, [pc, #304]	@ (8000978 <HAL_GPIO_Init+0x344>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d00d      	beq.n	8000866 <HAL_GPIO_Init+0x232>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a4b      	ldr	r2, [pc, #300]	@ (800097c <HAL_GPIO_Init+0x348>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d007      	beq.n	8000862 <HAL_GPIO_Init+0x22e>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a4a      	ldr	r2, [pc, #296]	@ (8000980 <HAL_GPIO_Init+0x34c>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d101      	bne.n	800085e <HAL_GPIO_Init+0x22a>
 800085a:	2306      	movs	r3, #6
 800085c:	e00c      	b.n	8000878 <HAL_GPIO_Init+0x244>
 800085e:	2307      	movs	r3, #7
 8000860:	e00a      	b.n	8000878 <HAL_GPIO_Init+0x244>
 8000862:	2305      	movs	r3, #5
 8000864:	e008      	b.n	8000878 <HAL_GPIO_Init+0x244>
 8000866:	2304      	movs	r3, #4
 8000868:	e006      	b.n	8000878 <HAL_GPIO_Init+0x244>
 800086a:	2303      	movs	r3, #3
 800086c:	e004      	b.n	8000878 <HAL_GPIO_Init+0x244>
 800086e:	2302      	movs	r3, #2
 8000870:	e002      	b.n	8000878 <HAL_GPIO_Init+0x244>
 8000872:	2301      	movs	r3, #1
 8000874:	e000      	b.n	8000878 <HAL_GPIO_Init+0x244>
 8000876:	2300      	movs	r3, #0
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	f002 0203 	and.w	r2, r2, #3
 800087e:	0092      	lsls	r2, r2, #2
 8000880:	4093      	lsls	r3, r2
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	4313      	orrs	r3, r2
 8000886:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000888:	4937      	ldr	r1, [pc, #220]	@ (8000968 <HAL_GPIO_Init+0x334>)
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	089b      	lsrs	r3, r3, #2
 800088e:	3302      	adds	r3, #2
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000896:	4b3b      	ldr	r3, [pc, #236]	@ (8000984 <HAL_GPIO_Init+0x350>)
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	43db      	mvns	r3, r3
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	4013      	ands	r3, r2
 80008a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d003      	beq.n	80008ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80008ba:	4a32      	ldr	r2, [pc, #200]	@ (8000984 <HAL_GPIO_Init+0x350>)
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80008c0:	4b30      	ldr	r3, [pc, #192]	@ (8000984 <HAL_GPIO_Init+0x350>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	43db      	mvns	r3, r3
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	4013      	ands	r3, r2
 80008ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d003      	beq.n	80008e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80008e4:	4a27      	ldr	r2, [pc, #156]	@ (8000984 <HAL_GPIO_Init+0x350>)
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80008ea:	4b26      	ldr	r3, [pc, #152]	@ (8000984 <HAL_GPIO_Init+0x350>)
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	43db      	mvns	r3, r3
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	4013      	ands	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000902:	2b00      	cmp	r3, #0
 8000904:	d003      	beq.n	800090e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	4313      	orrs	r3, r2
 800090c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800090e:	4a1d      	ldr	r2, [pc, #116]	@ (8000984 <HAL_GPIO_Init+0x350>)
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000914:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <HAL_GPIO_Init+0x350>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	43db      	mvns	r3, r3
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	4013      	ands	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800092c:	2b00      	cmp	r3, #0
 800092e:	d003      	beq.n	8000938 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	4313      	orrs	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000938:	4a12      	ldr	r2, [pc, #72]	@ (8000984 <HAL_GPIO_Init+0x350>)
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	3301      	adds	r3, #1
 8000942:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	fa22 f303 	lsr.w	r3, r2, r3
 800094e:	2b00      	cmp	r3, #0
 8000950:	f47f ae78 	bne.w	8000644 <HAL_GPIO_Init+0x10>
  }
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	371c      	adds	r7, #28
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000
 8000968:	40010000 	.word	0x40010000
 800096c:	48000400 	.word	0x48000400
 8000970:	48000800 	.word	0x48000800
 8000974:	48000c00 	.word	0x48000c00
 8000978:	48001000 	.word	0x48001000
 800097c:	48001400 	.word	0x48001400
 8000980:	48001800 	.word	0x48001800
 8000984:	40010400 	.word	0x40010400

08000988 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d101      	bne.n	800099a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e08d      	b.n	8000ab6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d106      	bne.n	80009b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f000 f885 	bl	8000abe <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2224      	movs	r2, #36	@ 0x24
 80009b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f022 0201 	bic.w	r2, r2, #1
 80009ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	685a      	ldr	r2, [r3, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80009d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	689a      	ldr	r2, [r3, #8]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80009e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d107      	bne.n	8000a02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	689a      	ldr	r2, [r3, #8]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	e006      	b.n	8000a10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	689a      	ldr	r2, [r3, #8]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000a0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d108      	bne.n	8000a2a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	685a      	ldr	r2, [r3, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	e007      	b.n	8000a3a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	685a      	ldr	r2, [r3, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000a38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	6812      	ldr	r2, [r2, #0]
 8000a44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	68da      	ldr	r2, [r3, #12]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000a5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	691a      	ldr	r2, [r3, #16]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	430a      	orrs	r2, r1
 8000a76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	69d9      	ldr	r1, [r3, #28]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6a1a      	ldr	r2, [r3, #32]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	430a      	orrs	r2, r1
 8000a86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f042 0201 	orr.w	r2, r2, #1
 8000a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af02      	add	r7, sp, #8
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	607a      	str	r2, [r7, #4]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	817b      	strh	r3, [r7, #10]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b20      	cmp	r3, #32
 8000af2:	f040 80fd 	bne.w	8000cf0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d101      	bne.n	8000b04 <HAL_I2C_Master_Transmit+0x30>
 8000b00:	2302      	movs	r3, #2
 8000b02:	e0f6      	b.n	8000cf2 <HAL_I2C_Master_Transmit+0x21e>
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2201      	movs	r2, #1
 8000b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000b0c:	f7ff fbce 	bl	80002ac <HAL_GetTick>
 8000b10:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	2319      	movs	r3, #25
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f000 f914 	bl	8000d4c <I2C_WaitOnFlagUntilTimeout>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e0e1      	b.n	8000cf2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	2221      	movs	r2, #33	@ 0x21
 8000b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2210      	movs	r2, #16
 8000b3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	2200      	movs	r2, #0
 8000b42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	893a      	ldrh	r2, [r7, #8]
 8000b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2200      	movs	r2, #0
 8000b54:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	2bff      	cmp	r3, #255	@ 0xff
 8000b5e:	d906      	bls.n	8000b6e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	22ff      	movs	r2, #255	@ 0xff
 8000b64:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8000b66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	e007      	b.n	8000b7e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8000b78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b7c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d024      	beq.n	8000bd0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b8a:	781a      	ldrb	r2, [r3, #0]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	8979      	ldrh	r1, [r7, #10]
 8000bc2:	4b4e      	ldr	r3, [pc, #312]	@ (8000cfc <HAL_I2C_Master_Transmit+0x228>)
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f000 fa79 	bl	80010c0 <I2C_TransferConfig>
 8000bce:	e066      	b.n	8000c9e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	8979      	ldrh	r1, [r7, #10]
 8000bd8:	4b48      	ldr	r3, [pc, #288]	@ (8000cfc <HAL_I2C_Master_Transmit+0x228>)
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	f000 fa6e 	bl	80010c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000be4:	e05b      	b.n	8000c9e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	6a39      	ldr	r1, [r7, #32]
 8000bea:	68f8      	ldr	r0, [r7, #12]
 8000bec:	f000 f8fd 	bl	8000dea <I2C_WaitOnTXISFlagUntilTimeout>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e07b      	b.n	8000cf2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfe:	781a      	ldrb	r2, [r3, #0]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c0a:	1c5a      	adds	r2, r3, #1
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	3b01      	subs	r3, #1
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000c22:	3b01      	subs	r3, #1
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d034      	beq.n	8000c9e <HAL_I2C_Master_Transmit+0x1ca>
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d130      	bne.n	8000c9e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	6a3b      	ldr	r3, [r7, #32]
 8000c42:	2200      	movs	r2, #0
 8000c44:	2180      	movs	r1, #128	@ 0x80
 8000c46:	68f8      	ldr	r0, [r7, #12]
 8000c48:	f000 f880 	bl	8000d4c <I2C_WaitOnFlagUntilTimeout>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e04d      	b.n	8000cf2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	2bff      	cmp	r3, #255	@ 0xff
 8000c5e:	d90e      	bls.n	8000c7e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	22ff      	movs	r2, #255	@ 0xff
 8000c64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	8979      	ldrh	r1, [r7, #10]
 8000c6e:	2300      	movs	r3, #0
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c76:	68f8      	ldr	r0, [r7, #12]
 8000c78:	f000 fa22 	bl	80010c0 <I2C_TransferConfig>
 8000c7c:	e00f      	b.n	8000c9e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	8979      	ldrh	r1, [r7, #10]
 8000c90:	2300      	movs	r3, #0
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f000 fa11 	bl	80010c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d19e      	bne.n	8000be6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	6a39      	ldr	r1, [r7, #32]
 8000cac:	68f8      	ldr	r0, [r7, #12]
 8000cae:	f000 f8e3 	bl	8000e78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e01a      	b.n	8000cf2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2220      	movs	r2, #32
 8000cc2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	6859      	ldr	r1, [r3, #4]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <HAL_I2C_Master_Transmit+0x22c>)
 8000cd0:	400b      	ands	r3, r1
 8000cd2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2220      	movs	r2, #32
 8000cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	e000      	b.n	8000cf2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8000cf0:	2302      	movs	r3, #2
  }
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	80002000 	.word	0x80002000
 8000d00:	fe00e800 	.word	0xfe00e800

08000d04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d103      	bne.n	8000d22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d007      	beq.n	8000d40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	699a      	ldr	r2, [r3, #24]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f042 0201 	orr.w	r2, r2, #1
 8000d3e:	619a      	str	r2, [r3, #24]
  }
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000d5c:	e031      	b.n	8000dc2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d64:	d02d      	beq.n	8000dc2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d66:	f7ff faa1 	bl	80002ac <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	683a      	ldr	r2, [r7, #0]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d302      	bcc.n	8000d7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d122      	bne.n	8000dc2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	699a      	ldr	r2, [r3, #24]
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	4013      	ands	r3, r2
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	bf0c      	ite	eq
 8000d8c:	2301      	moveq	r3, #1
 8000d8e:	2300      	movne	r3, #0
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	461a      	mov	r2, r3
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d113      	bne.n	8000dc2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9e:	f043 0220 	orr.w	r2, r3, #32
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	2220      	movs	r2, #32
 8000daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2200      	movs	r2, #0
 8000dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00f      	b.n	8000de2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	699a      	ldr	r2, [r3, #24]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	68ba      	ldr	r2, [r7, #8]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	bf0c      	ite	eq
 8000dd2:	2301      	moveq	r3, #1
 8000dd4:	2300      	movne	r3, #0
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	461a      	mov	r2, r3
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d0be      	beq.n	8000d5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b084      	sub	sp, #16
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000df6:	e033      	b.n	8000e60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	68f8      	ldr	r0, [r7, #12]
 8000dfe:	f000 f87f 	bl	8000f00 <I2C_IsErrorOccurred>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e031      	b.n	8000e70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e12:	d025      	beq.n	8000e60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e14:	f7ff fa4a 	bl	80002ac <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d302      	bcc.n	8000e2a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d11a      	bne.n	8000e60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d013      	beq.n	8000e60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3c:	f043 0220 	orr.w	r2, r3, #32
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2220      	movs	r2, #32
 8000e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e007      	b.n	8000e70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d1c4      	bne.n	8000df8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000e84:	e02f      	b.n	8000ee6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	f000 f838 	bl	8000f00 <I2C_IsErrorOccurred>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e02d      	b.n	8000ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e9a:	f7ff fa07 	bl	80002ac <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	68ba      	ldr	r2, [r7, #8]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d302      	bcc.n	8000eb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d11a      	bne.n	8000ee6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	f003 0320 	and.w	r3, r3, #32
 8000eba:	2b20      	cmp	r3, #32
 8000ebc:	d013      	beq.n	8000ee6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	f043 0220 	orr.w	r2, r3, #32
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2220      	movs	r2, #32
 8000ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e007      	b.n	8000ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0320 	and.w	r3, r3, #32
 8000ef0:	2b20      	cmp	r3, #32
 8000ef2:	d1c8      	bne.n	8000e86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	@ 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	f003 0310 	and.w	r3, r3, #16
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d068      	beq.n	8000ffe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2210      	movs	r2, #16
 8000f32:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8000f34:	e049      	b.n	8000fca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3c:	d045      	beq.n	8000fca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000f3e:	f7ff f9b5 	bl	80002ac <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d302      	bcc.n	8000f54 <I2C_IsErrorOccurred+0x54>
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d13a      	bne.n	8000fca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000f66:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000f76:	d121      	bne.n	8000fbc <I2C_IsErrorOccurred+0xbc>
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000f7e:	d01d      	beq.n	8000fbc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8000f80:	7cfb      	ldrb	r3, [r7, #19]
 8000f82:	2b20      	cmp	r3, #32
 8000f84:	d01a      	beq.n	8000fbc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000f94:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8000f96:	f7ff f989 	bl	80002ac <HAL_GetTick>
 8000f9a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000f9c:	e00e      	b.n	8000fbc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8000f9e:	f7ff f985 	bl	80002ac <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b19      	cmp	r3, #25
 8000faa:	d907      	bls.n	8000fbc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	f043 0320 	orr.w	r3, r3, #32
 8000fb2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8000fba:	e006      	b.n	8000fca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	f003 0320 	and.w	r3, r3, #32
 8000fc6:	2b20      	cmp	r3, #32
 8000fc8:	d1e9      	bne.n	8000f9e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0320 	and.w	r3, r3, #32
 8000fd4:	2b20      	cmp	r3, #32
 8000fd6:	d003      	beq.n	8000fe0 <I2C_IsErrorOccurred+0xe0>
 8000fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0aa      	beq.n	8000f36 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8000fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d103      	bne.n	8000ff0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2220      	movs	r2, #32
 8000fee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8000ff0:	6a3b      	ldr	r3, [r7, #32]
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00b      	beq.n	8001028 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001010:	6a3b      	ldr	r3, [r7, #32]
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001020:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00b      	beq.n	800104a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001032:	6a3b      	ldr	r3, [r7, #32]
 8001034:	f043 0308 	orr.w	r3, r3, #8
 8001038:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001042:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00b      	beq.n	800106c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001054:	6a3b      	ldr	r3, [r7, #32]
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001064:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800106c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001070:	2b00      	cmp	r3, #0
 8001072:	d01c      	beq.n	80010ae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001074:	68f8      	ldr	r0, [r7, #12]
 8001076:	f7ff fe45 	bl	8000d04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6859      	ldr	r1, [r3, #4]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b0d      	ldr	r3, [pc, #52]	@ (80010bc <I2C_IsErrorOccurred+0x1bc>)
 8001086:	400b      	ands	r3, r1
 8001088:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800108e:	6a3b      	ldr	r3, [r7, #32]
 8001090:	431a      	orrs	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2220      	movs	r2, #32
 800109a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80010ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3728      	adds	r7, #40	@ 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	fe00e800 	.word	0xfe00e800

080010c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b087      	sub	sp, #28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	460b      	mov	r3, r1
 80010cc:	817b      	strh	r3, [r7, #10]
 80010ce:	4613      	mov	r3, r2
 80010d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80010d2:	897b      	ldrh	r3, [r7, #10]
 80010d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80010d8:	7a7b      	ldrb	r3, [r7, #9]
 80010da:	041b      	lsls	r3, r3, #16
 80010dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80010e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80010e6:	6a3b      	ldr	r3, [r7, #32]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80010ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	6a3b      	ldr	r3, [r7, #32]
 80010f8:	0d5b      	lsrs	r3, r3, #21
 80010fa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80010fe:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <I2C_TransferConfig+0x60>)
 8001100:	430b      	orrs	r3, r1
 8001102:	43db      	mvns	r3, r3
 8001104:	ea02 0103 	and.w	r1, r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	430a      	orrs	r2, r1
 8001110:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001112:	bf00      	nop
 8001114:	371c      	adds	r7, #28
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	03ff63ff 	.word	0x03ff63ff

08001124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d020      	beq.n	8001188 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d01b      	beq.n	8001188 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f06f 0202 	mvn.w	r2, #2
 8001158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f8ee 	bl	8001350 <HAL_TIM_IC_CaptureCallback>
 8001174:	e005      	b.n	8001182 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f8e0 	bl	800133c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 f8f1 	bl	8001364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	2b00      	cmp	r3, #0
 8001190:	d020      	beq.n	80011d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	2b00      	cmp	r3, #0
 800119a:	d01b      	beq.n	80011d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f06f 0204 	mvn.w	r2, #4
 80011a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2202      	movs	r2, #2
 80011aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f8c8 	bl	8001350 <HAL_TIM_IC_CaptureCallback>
 80011c0:	e005      	b.n	80011ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f8ba 	bl	800133c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 f8cb 	bl	8001364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d020      	beq.n	8001220 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d01b      	beq.n	8001220 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f06f 0208 	mvn.w	r2, #8
 80011f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2204      	movs	r2, #4
 80011f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 f8a2 	bl	8001350 <HAL_TIM_IC_CaptureCallback>
 800120c:	e005      	b.n	800121a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f894 	bl	800133c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f8a5 	bl	8001364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	2b00      	cmp	r3, #0
 8001228:	d020      	beq.n	800126c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f003 0310 	and.w	r3, r3, #16
 8001230:	2b00      	cmp	r3, #0
 8001232:	d01b      	beq.n	800126c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f06f 0210 	mvn.w	r2, #16
 800123c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2208      	movs	r2, #8
 8001242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 f87c 	bl	8001350 <HAL_TIM_IC_CaptureCallback>
 8001258:	e005      	b.n	8001266 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 f86e 	bl	800133c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 f87f 	bl	8001364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00c      	beq.n	8001290 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b00      	cmp	r3, #0
 800127e:	d007      	beq.n	8001290 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f06f 0201 	mvn.w	r2, #1
 8001288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 f84c 	bl	8001328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00c      	beq.n	80012b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d007      	beq.n	80012b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80012ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 f876 	bl	80013a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00c      	beq.n	80012d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d007      	beq.n	80012d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80012d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 f86e 	bl	80013b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00c      	beq.n	80012fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d007      	beq.n	80012fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80012f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f83e 	bl	8001378 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f003 0320 	and.w	r3, r3, #32
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00c      	beq.n	8001320 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f003 0320 	and.w	r3, r3, #32
 800130c:	2b00      	cmp	r3, #0
 800130e:	d007      	beq.n	8001320 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f06f 0220 	mvn.w	r2, #32
 8001318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f836 	bl	800138c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <DMA1_CH1_IRQHandler>:




void DMA1_CH1_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc);
 80013cc:	4802      	ldr	r0, [pc, #8]	@ (80013d8 <DMA1_CH1_IRQHandler+0x10>)
 80013ce:	f7ff f882 	bl	80004d6 <HAL_DMA_IRQHandler>
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000038 	.word	0x20000038

080013dc <i2c_master_init>:
I2C_HandleTypeDef hi2c1;

uint8_t tx_buffer[10] = {0,1,2,3,4,5,6,7,8,9};

// --- I2C Master Init ---
void i2c_master_init(void) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	4b26      	ldr	r3, [pc, #152]	@ (800147c <i2c_master_init+0xa0>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e6:	4a25      	ldr	r2, [pc, #148]	@ (800147c <i2c_master_init+0xa0>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ee:	4b23      	ldr	r3, [pc, #140]	@ (800147c <i2c_master_init+0xa0>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013fa:	4b20      	ldr	r3, [pc, #128]	@ (800147c <i2c_master_init+0xa0>)
 80013fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fe:	4a1f      	ldr	r2, [pc, #124]	@ (800147c <i2c_master_init+0xa0>)
 8001400:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001404:	6593      	str	r3, [r2, #88]	@ 0x58
 8001406:	4b1d      	ldr	r3, [pc, #116]	@ (800147c <i2c_master_init+0xa0>)
 8001408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;  // PB6=SCL, PB7=SDA
 8001422:	23c0      	movs	r3, #192	@ 0xc0
 8001424:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001426:	2312      	movs	r3, #18
 8001428:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800142a:	2301      	movs	r3, #1
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001432:	2304      	movs	r3, #4
 8001434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	4619      	mov	r1, r3
 800143c:	4810      	ldr	r0, [pc, #64]	@ (8001480 <i2c_master_init+0xa4>)
 800143e:	f7ff f8f9 	bl	8000634 <HAL_GPIO_Init>

    hi2c1.Instance = I2C1;
 8001442:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <i2c_master_init+0xa8>)
 8001444:	4a10      	ldr	r2, [pc, #64]	@ (8001488 <i2c_master_init+0xac>)
 8001446:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x00B1112E;   // ~100kHz (standard mode)
 8001448:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <i2c_master_init+0xa8>)
 800144a:	4a10      	ldr	r2, [pc, #64]	@ (800148c <i2c_master_init+0xb0>)
 800144c:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 800144e:	4b0d      	ldr	r3, [pc, #52]	@ (8001484 <i2c_master_init+0xa8>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001454:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <i2c_master_init+0xa8>)
 8001456:	2201      	movs	r2, #1
 8001458:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800145a:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <i2c_master_init+0xa8>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001460:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <i2c_master_init+0xa8>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001466:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <i2c_master_init+0xa8>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
    HAL_I2C_Init(&hi2c1);
 800146c:	4805      	ldr	r0, [pc, #20]	@ (8001484 <i2c_master_init+0xa8>)
 800146e:	f7ff fa8b 	bl	8000988 <HAL_I2C_Init>
}
 8001472:	bf00      	nop
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000
 8001480:	48000400 	.word	0x48000400
 8001484:	20000080 	.word	0x20000080
 8001488:	40005400 	.word	0x40005400
 800148c:	00b1112e 	.word	0x00b1112e

08001490 <main>:

int main(void) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af02      	add	r7, sp, #8
    HAL_Init();
 8001496:	f7fe fe99 	bl	80001cc <HAL_Init>
    i2c_master_init();
 800149a:	f7ff ff9f 	bl	80013dc <i2c_master_init>

    while(1) {
        // Send tx_buffer to ESP32 slave (0x55)
        HAL_I2C_Master_Transmit(&hi2c1, (0x55 << 1), tx_buffer, sizeof(tx_buffer), HAL_MAX_DELAY);
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	230a      	movs	r3, #10
 80014a6:	4a05      	ldr	r2, [pc, #20]	@ (80014bc <main+0x2c>)
 80014a8:	21aa      	movs	r1, #170	@ 0xaa
 80014aa:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <main+0x30>)
 80014ac:	f7ff fb12 	bl	8000ad4 <HAL_I2C_Master_Transmit>

        // Small delay so ESP32 has time to process
        HAL_Delay(1000);
 80014b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014b4:	f7fe ff06 	bl	80002c4 <HAL_Delay>
        HAL_I2C_Master_Transmit(&hi2c1, (0x55 << 1), tx_buffer, sizeof(tx_buffer), HAL_MAX_DELAY);
 80014b8:	bf00      	nop
 80014ba:	e7f0      	b.n	800149e <main+0xe>
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000080 	.word	0x20000080

080014c4 <SysTick_Handler>:
    }
}

void SysTick_Handler(void) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80014c8:	f7fe fedc 	bl	8000284 <HAL_IncTick>
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <TIM3_IRQHandler>:
	HAL_NVIC_SetPriority(TIMx_IRQn,0, 0);
	HAL_NVIC_EnableIRQ(TIMx_IRQn);
	HAL_TIM_Base_Start_IT(&TimHandle);
}

void TIMx_IRQHandler(void){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&TimHandle);
 80014d4:	4802      	ldr	r0, [pc, #8]	@ (80014e0 <TIM3_IRQHandler+0x10>)
 80014d6:	f7ff fe25 	bl	8001124 <HAL_TIM_IRQHandler>
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200000d4 	.word	0x200000d4

080014e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014e4:	480d      	ldr	r0, [pc, #52]	@ (800151c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014ec:	480c      	ldr	r0, [pc, #48]	@ (8001520 <LoopForever+0x6>)
  ldr r1, =_edata
 80014ee:	490d      	ldr	r1, [pc, #52]	@ (8001524 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001528 <LoopForever+0xe>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f4:	e002      	b.n	80014fc <LoopCopyDataInit>

080014f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fa:	3304      	adds	r3, #4

080014fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001500:	d3f9      	bcc.n	80014f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001502:	4a0a      	ldr	r2, [pc, #40]	@ (800152c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001504:	4c0a      	ldr	r4, [pc, #40]	@ (8001530 <LoopForever+0x16>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001508:	e001      	b.n	800150e <LoopFillZerobss>

0800150a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800150c:	3204      	adds	r2, #4

0800150e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001510:	d3fb      	bcc.n	800150a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001512:	f000 f811 	bl	8001538 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8001516:	f7ff ffbb 	bl	8001490 <main>

0800151a <LoopForever>:

LoopForever:
  b LoopForever
 800151a:	e7fe      	b.n	800151a <LoopForever>
  ldr   r0, =_estack
 800151c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001524:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001528:	080015a0 	.word	0x080015a0
  ldr r2, =_sbss
 800152c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001530:	20000120 	.word	0x20000120

08001534 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC1_2_IRQHandler>
	...

08001538 <__libc_init_array>:
 8001538:	b570      	push	{r4, r5, r6, lr}
 800153a:	4d0d      	ldr	r5, [pc, #52]	@ (8001570 <__libc_init_array+0x38>)
 800153c:	4c0d      	ldr	r4, [pc, #52]	@ (8001574 <__libc_init_array+0x3c>)
 800153e:	1b64      	subs	r4, r4, r5
 8001540:	10a4      	asrs	r4, r4, #2
 8001542:	2600      	movs	r6, #0
 8001544:	42a6      	cmp	r6, r4
 8001546:	d109      	bne.n	800155c <__libc_init_array+0x24>
 8001548:	4d0b      	ldr	r5, [pc, #44]	@ (8001578 <__libc_init_array+0x40>)
 800154a:	4c0c      	ldr	r4, [pc, #48]	@ (800157c <__libc_init_array+0x44>)
 800154c:	f000 f818 	bl	8001580 <_init>
 8001550:	1b64      	subs	r4, r4, r5
 8001552:	10a4      	asrs	r4, r4, #2
 8001554:	2600      	movs	r6, #0
 8001556:	42a6      	cmp	r6, r4
 8001558:	d105      	bne.n	8001566 <__libc_init_array+0x2e>
 800155a:	bd70      	pop	{r4, r5, r6, pc}
 800155c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001560:	4798      	blx	r3
 8001562:	3601      	adds	r6, #1
 8001564:	e7ee      	b.n	8001544 <__libc_init_array+0xc>
 8001566:	f855 3b04 	ldr.w	r3, [r5], #4
 800156a:	4798      	blx	r3
 800156c:	3601      	adds	r6, #1
 800156e:	e7f2      	b.n	8001556 <__libc_init_array+0x1e>
 8001570:	08001598 	.word	0x08001598
 8001574:	08001598 	.word	0x08001598
 8001578:	08001598 	.word	0x08001598
 800157c:	0800159c 	.word	0x0800159c

08001580 <_init>:
 8001580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001582:	bf00      	nop
 8001584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001586:	bc08      	pop	{r3}
 8001588:	469e      	mov	lr, r3
 800158a:	4770      	bx	lr

0800158c <_fini>:
 800158c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800158e:	bf00      	nop
 8001590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001592:	bc08      	pop	{r3}
 8001594:	469e      	mov	lr, r3
 8001596:	4770      	bx	lr
