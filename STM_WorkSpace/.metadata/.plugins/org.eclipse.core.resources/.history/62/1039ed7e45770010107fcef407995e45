#include"STM32L4xx_hal.h"


UART_HandleTypeDef huart2 ;

void usart_init(void);

char msg = 'a';
char buffer;

int main(void)
{
	HAL_Init();
	usart_init();

	while(1){
		HAL_UART_Transmit(&huart2,(uint8_t *) &msg , 1 , 100);
		HAL_UART_Receive(&huart2,(uint8_t *) &buffer , sizeof(buffer), 100);
		HAL_Delay(10);
	}
}



void usart_init(void){

	UART_HandleTypeDef huart2 ;

	GPIO_InitTypeDef GPIO_InitStruct ={0};

	//Enable UART pin clock access
	__HAL_RCC_GPIOA_CLK_ENABLE();

	//Enable UART module clock access
	__HAL_RCC_USART1_CLK_ENABLE();

	//Configure pins to act as alternate function pins(UART)

	GPIO_InitStruct.Pin  = GPIO_PIN_9|GPIO_PIN_10 ;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
	GPIO_InitStruct.Pull = GPIO_NOPULL ;
	GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_HIGH;

	HAL_GPIO_Init(GPIOA , &GPIO_InitStruct);

	//Configure UART module

	huart2.Instance = USART1 ;
	huart2.Init.BaudRate = 115200 ;
	huart2.Init.WordLength = UART_WORDLENGTH_8B ;
	huart2.Init.Parity = UART_PARITY_NONE ;
	huart2.Init.Mode = UART_MODE_TX ;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE ;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16 ;

	HAL_UART_Init(&huart2);


}

void SysTick_Handler(void)
{
	HAL_IncTick();
}

