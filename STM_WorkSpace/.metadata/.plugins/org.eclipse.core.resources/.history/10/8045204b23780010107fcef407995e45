#include "stm32l4xx_hal.h"

ADC_HandleTypeDef hadc1 ;

static void adc_continous_conv_init(void) ;

uint32_t pc0_adc_read(void)
{
	return HAL_ADC_GetValue(&hadc1);
}

void adc_init_start(void){
	adc_continous_conv_init();
	HAL_ADC_Start(&hadc1);
}

void adc_continous_conv_init(void){

	//Configure pc0 as analog pin



	GPIO_InitTypeDef GPIO_InitStruct ={0};
	ADC_ChannelConfTypeDef  sConfig ={0};

	__HAL_RCC_GPIOC_CLK_ENABLE();

	GPIO_InitStruct.Pin = GPIO_PIN_0;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG ;
	GPIO_InitStruct.Pull = GPIO_NOPULL ;

	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	//Configure ADC module for continuous conversion

	hadc1.Instance = ADC1;
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
	hadc1.Init.ContinuousConvMode = ENABLE;   // Keep this enabled
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc1.Init.NbrOfConversion = 1;
	hadc1.Init.DMAContinuousRequests = DISABLE;
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;

	HAL_ADC_Init(&hadc1);

	// Calibration before starting
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);

	sConfig.Channel = ADC_CHANNEL_1;   // PC0 = ADC1_IN1
	sConfig.Rank = ADC_REGULAR_RANK_1;
	sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;

	HAL_ADC_ConfigChannel(&hadc1, &sConfig);

	// Start continuous conversions
	HAL_ADC_Start(&hadc1);


}

void adc_single_conv_init(void){

	//Configure pc0 as analog pin



	GPIO_InitTypeDef GPIO_InitStruct ={0};
	ADC_ChannelConfTypeDef  sConfig ={0};

	__HAL_RCC_GPIOC_CLK_ENABLE();

	GPIO_InitStruct.Pin = GPIO_PIN_0;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG ;
	GPIO_InitStruct.Pull = GPIO_NOPULL ;

	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	//Configure ADC module for continuous conversion

	hadc1.Instance = ADC1;
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
	hadc1.Init.ContinuousConvMode = ENABLE;   // Keep this enabled
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc1.Init.NbrOfConversion = 1;
	hadc1.Init.DMAContinuousRequests = DISABLE;
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;

	HAL_ADC_Init(&hadc1);

	// Calibration before starting
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);

	sConfig.Channel = ADC_CHANNEL_1;   // PC0 = ADC1_IN1
	sConfig.Rank = ADC_REGULAR_RANK_1;
	sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;

	HAL_ADC_ConfigChannel(&hadc1, &sConfig);

	// Start continuous conversions
	HAL_ADC_Start(&hadc1);


}

