
04_UART_Loopback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002458  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080025e4  080025e4  000035e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002630  08002630  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002630  08002630  00003630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002638  08002638  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002638  08002638  00003638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800263c  0800263c  0000363c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002640  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00004068  2**0
                  CONTENTS
 10 .bss          000001fc  20000068  20000068  00004068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000264  20000264  00004068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007bbb  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011cc  00000000  00000000  0000bc53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000690  00000000  00000000  0000ce20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004f9  00000000  00000000  0000d4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000026ad  00000000  00000000  0000d9a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008493  00000000  00000000  00010056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea844  00000000  00000000  000184e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00102d2d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000020d4  00000000  00000000  00102d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00104e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000068 	.word	0x20000068
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080025cc 	.word	0x080025cc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000006c 	.word	0x2000006c
 80001c8:	080025cc 	.word	0x080025cc

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004fe:	2300      	movs	r3, #0
 8000500:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000502:	2003      	movs	r0, #3
 8000504:	f000 f94a 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000508:	200f      	movs	r0, #15
 800050a:	f000 f815 	bl	8000538 <HAL_InitTick>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d002      	beq.n	800051a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000514:	2301      	movs	r3, #1
 8000516:	71fb      	strb	r3, [r7, #7]
 8000518:	e001      	b.n	800051e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800051a:	f000 f805 	bl	8000528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800051e:	79fb      	ldrb	r3, [r7, #7]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
	...

08000538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000540:	2300      	movs	r3, #0
 8000542:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000544:	4b17      	ldr	r3, [pc, #92]	@ (80005a4 <HAL_InitTick+0x6c>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d023      	beq.n	8000594 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800054c:	4b16      	ldr	r3, [pc, #88]	@ (80005a8 <HAL_InitTick+0x70>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	4b14      	ldr	r3, [pc, #80]	@ (80005a4 <HAL_InitTick+0x6c>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	4619      	mov	r1, r3
 8000556:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800055a:	fbb3 f3f1 	udiv	r3, r3, r1
 800055e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f941 	bl	80007ea <HAL_SYSTICK_Config>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d10f      	bne.n	800058e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d809      	bhi.n	8000588 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295
 800057c:	f000 f919 	bl	80007b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000580:	4a0a      	ldr	r2, [pc, #40]	@ (80005ac <HAL_InitTick+0x74>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
 8000586:	e007      	b.n	8000598 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000588:	2301      	movs	r3, #1
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e004      	b.n	8000598 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800058e:	2301      	movs	r3, #1
 8000590:	73fb      	strb	r3, [r7, #15]
 8000592:	e001      	b.n	8000598 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000594:	2301      	movs	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000598:	7bfb      	ldrb	r3, [r7, #15]
}
 800059a:	4618      	mov	r0, r3
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000004 	.word	0x20000004
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000000 	.word	0x20000000

080005b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <HAL_IncTick+0x20>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <HAL_IncTick+0x24>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	4a04      	ldr	r2, [pc, #16]	@ (80005d4 <HAL_IncTick+0x24>)
 80005c2:	6013      	str	r3, [r2, #0]
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000004 	.word	0x20000004
 80005d4:	20000084 	.word	0x20000084

080005d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  return uwTick;
 80005dc:	4b03      	ldr	r3, [pc, #12]	@ (80005ec <HAL_GetTick+0x14>)
 80005de:	681b      	ldr	r3, [r3, #0]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000084 	.word	0x20000084

080005f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f8:	f7ff ffee 	bl	80005d8 <HAL_GetTick>
 80005fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000608:	d005      	beq.n	8000616 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800060a:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <HAL_Delay+0x44>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	4413      	add	r3, r2
 8000614:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000616:	bf00      	nop
 8000618:	f7ff ffde 	bl	80005d8 <HAL_GetTick>
 800061c:	4602      	mov	r2, r0
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	68fa      	ldr	r2, [r7, #12]
 8000624:	429a      	cmp	r2, r3
 8000626:	d8f7      	bhi.n	8000618 <HAL_Delay+0x28>
  {
  }
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000004 	.word	0x20000004

08000638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000654:	4013      	ands	r3, r2
 8000656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000660:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066a:	4a04      	ldr	r2, [pc, #16]	@ (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	60d3      	str	r3, [r2, #12]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000684:	4b04      	ldr	r3, [pc, #16]	@ (8000698 <__NVIC_GetPriorityGrouping+0x18>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	f003 0307 	and.w	r3, r3, #7
}
 800068e:	4618      	mov	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	db0a      	blt.n	80006c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	490c      	ldr	r1, [pc, #48]	@ (80006e8 <__NVIC_SetPriority+0x4c>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	0112      	lsls	r2, r2, #4
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	440b      	add	r3, r1
 80006c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c4:	e00a      	b.n	80006dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4908      	ldr	r1, [pc, #32]	@ (80006ec <__NVIC_SetPriority+0x50>)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	f003 030f 	and.w	r3, r3, #15
 80006d2:	3b04      	subs	r3, #4
 80006d4:	0112      	lsls	r2, r2, #4
 80006d6:	b2d2      	uxtb	r2, r2
 80006d8:	440b      	add	r3, r1
 80006da:	761a      	strb	r2, [r3, #24]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000e100 	.word	0xe000e100
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b089      	sub	sp, #36	@ 0x24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	f1c3 0307 	rsb	r3, r3, #7
 800070a:	2b04      	cmp	r3, #4
 800070c:	bf28      	it	cs
 800070e:	2304      	movcs	r3, #4
 8000710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3304      	adds	r3, #4
 8000716:	2b06      	cmp	r3, #6
 8000718:	d902      	bls.n	8000720 <NVIC_EncodePriority+0x30>
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3b03      	subs	r3, #3
 800071e:	e000      	b.n	8000722 <NVIC_EncodePriority+0x32>
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	f04f 32ff 	mov.w	r2, #4294967295
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	43da      	mvns	r2, r3
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	401a      	ands	r2, r3
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000738:	f04f 31ff 	mov.w	r1, #4294967295
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	43d9      	mvns	r1, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	4313      	orrs	r3, r2
         );
}
 800074a:	4618      	mov	r0, r3
 800074c:	3724      	adds	r7, #36	@ 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000768:	d301      	bcc.n	800076e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076a:	2301      	movs	r3, #1
 800076c:	e00f      	b.n	800078e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076e:	4a0a      	ldr	r2, [pc, #40]	@ (8000798 <SysTick_Config+0x40>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000776:	210f      	movs	r1, #15
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f7ff ff8e 	bl	800069c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <SysTick_Config+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	4b04      	ldr	r3, [pc, #16]	@ (8000798 <SysTick_Config+0x40>)
 8000788:	2207      	movs	r2, #7
 800078a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	e000e010 	.word	0xe000e010

0800079c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff47 	bl	8000638 <__NVIC_SetPriorityGrouping>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007c4:	f7ff ff5c 	bl	8000680 <__NVIC_GetPriorityGrouping>
 80007c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f7ff ff8e 	bl	80006f0 <NVIC_EncodePriority>
 80007d4:	4602      	mov	r2, r0
 80007d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff5d 	bl	800069c <__NVIC_SetPriority>
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ffb0 	bl	8000758 <SysTick_Config>
 80007f8:	4603      	mov	r3, r0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000804:	b480      	push	{r7}
 8000806:	b087      	sub	sp, #28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000812:	e17f      	b.n	8000b14 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	2101      	movs	r1, #1
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	fa01 f303 	lsl.w	r3, r1, r3
 8000820:	4013      	ands	r3, r2
 8000822:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b00      	cmp	r3, #0
 8000828:	f000 8171 	beq.w	8000b0e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	f003 0303 	and.w	r3, r3, #3
 8000834:	2b01      	cmp	r3, #1
 8000836:	d005      	beq.n	8000844 <HAL_GPIO_Init+0x40>
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	f003 0303 	and.w	r3, r3, #3
 8000840:	2b02      	cmp	r3, #2
 8000842:	d130      	bne.n	80008a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	2203      	movs	r2, #3
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	43db      	mvns	r3, r3
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	4013      	ands	r3, r2
 800085a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	68da      	ldr	r2, [r3, #12]
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	4313      	orrs	r3, r2
 800086c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	693a      	ldr	r2, [r7, #16]
 8000872:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800087a:	2201      	movs	r2, #1
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43db      	mvns	r3, r3
 8000884:	693a      	ldr	r2, [r7, #16]
 8000886:	4013      	ands	r3, r2
 8000888:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	091b      	lsrs	r3, r3, #4
 8000890:	f003 0201 	and.w	r2, r3, #1
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	4313      	orrs	r3, r2
 800089e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	f003 0303 	and.w	r3, r3, #3
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d118      	bne.n	80008e4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008b8:	2201      	movs	r2, #1
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	43db      	mvns	r3, r3
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	4013      	ands	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	08db      	lsrs	r3, r3, #3
 80008ce:	f003 0201 	and.w	r2, r3, #1
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	693a      	ldr	r2, [r7, #16]
 80008da:	4313      	orrs	r3, r2
 80008dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	693a      	ldr	r2, [r7, #16]
 80008e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f003 0303 	and.w	r3, r3, #3
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d017      	beq.n	8000920 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	2203      	movs	r2, #3
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	4013      	ands	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	689a      	ldr	r2, [r3, #8]
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	4313      	orrs	r3, r2
 8000918:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f003 0303 	and.w	r3, r3, #3
 8000928:	2b02      	cmp	r3, #2
 800092a:	d123      	bne.n	8000974 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	08da      	lsrs	r2, r3, #3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3208      	adds	r2, #8
 8000934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000938:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	f003 0307 	and.w	r3, r3, #7
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	220f      	movs	r2, #15
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	4013      	ands	r3, r2
 800094e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	691a      	ldr	r2, [r3, #16]
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	4313      	orrs	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	08da      	lsrs	r2, r3, #3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3208      	adds	r2, #8
 800096e:	6939      	ldr	r1, [r7, #16]
 8000970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	2203      	movs	r2, #3
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4013      	ands	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 0203 	and.w	r2, r3, #3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4313      	orrs	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f000 80ac 	beq.w	8000b0e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	4b5f      	ldr	r3, [pc, #380]	@ (8000b34 <HAL_GPIO_Init+0x330>)
 80009b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ba:	4a5e      	ldr	r2, [pc, #376]	@ (8000b34 <HAL_GPIO_Init+0x330>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80009c2:	4b5c      	ldr	r3, [pc, #368]	@ (8000b34 <HAL_GPIO_Init+0x330>)
 80009c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009ce:	4a5a      	ldr	r2, [pc, #360]	@ (8000b38 <HAL_GPIO_Init+0x334>)
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	089b      	lsrs	r3, r3, #2
 80009d4:	3302      	adds	r3, #2
 80009d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	f003 0303 	and.w	r3, r3, #3
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	220f      	movs	r2, #15
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4013      	ands	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80009f8:	d025      	beq.n	8000a46 <HAL_GPIO_Init+0x242>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4f      	ldr	r2, [pc, #316]	@ (8000b3c <HAL_GPIO_Init+0x338>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d01f      	beq.n	8000a42 <HAL_GPIO_Init+0x23e>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4e      	ldr	r2, [pc, #312]	@ (8000b40 <HAL_GPIO_Init+0x33c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d019      	beq.n	8000a3e <HAL_GPIO_Init+0x23a>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4d      	ldr	r2, [pc, #308]	@ (8000b44 <HAL_GPIO_Init+0x340>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d013      	beq.n	8000a3a <HAL_GPIO_Init+0x236>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4c      	ldr	r2, [pc, #304]	@ (8000b48 <HAL_GPIO_Init+0x344>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d00d      	beq.n	8000a36 <HAL_GPIO_Init+0x232>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a4b      	ldr	r2, [pc, #300]	@ (8000b4c <HAL_GPIO_Init+0x348>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d007      	beq.n	8000a32 <HAL_GPIO_Init+0x22e>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a4a      	ldr	r2, [pc, #296]	@ (8000b50 <HAL_GPIO_Init+0x34c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d101      	bne.n	8000a2e <HAL_GPIO_Init+0x22a>
 8000a2a:	2306      	movs	r3, #6
 8000a2c:	e00c      	b.n	8000a48 <HAL_GPIO_Init+0x244>
 8000a2e:	2307      	movs	r3, #7
 8000a30:	e00a      	b.n	8000a48 <HAL_GPIO_Init+0x244>
 8000a32:	2305      	movs	r3, #5
 8000a34:	e008      	b.n	8000a48 <HAL_GPIO_Init+0x244>
 8000a36:	2304      	movs	r3, #4
 8000a38:	e006      	b.n	8000a48 <HAL_GPIO_Init+0x244>
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	e004      	b.n	8000a48 <HAL_GPIO_Init+0x244>
 8000a3e:	2302      	movs	r3, #2
 8000a40:	e002      	b.n	8000a48 <HAL_GPIO_Init+0x244>
 8000a42:	2301      	movs	r3, #1
 8000a44:	e000      	b.n	8000a48 <HAL_GPIO_Init+0x244>
 8000a46:	2300      	movs	r3, #0
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	f002 0203 	and.w	r2, r2, #3
 8000a4e:	0092      	lsls	r2, r2, #2
 8000a50:	4093      	lsls	r3, r2
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a58:	4937      	ldr	r1, [pc, #220]	@ (8000b38 <HAL_GPIO_Init+0x334>)
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	089b      	lsrs	r3, r3, #2
 8000a5e:	3302      	adds	r3, #2
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a66:	4b3b      	ldr	r3, [pc, #236]	@ (8000b54 <HAL_GPIO_Init+0x350>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d003      	beq.n	8000a8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a8a:	4a32      	ldr	r2, [pc, #200]	@ (8000b54 <HAL_GPIO_Init+0x350>)
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a90:	4b30      	ldr	r3, [pc, #192]	@ (8000b54 <HAL_GPIO_Init+0x350>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d003      	beq.n	8000ab4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ab4:	4a27      	ldr	r2, [pc, #156]	@ (8000b54 <HAL_GPIO_Init+0x350>)
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000aba:	4b26      	ldr	r3, [pc, #152]	@ (8000b54 <HAL_GPIO_Init+0x350>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ade:	4a1d      	ldr	r2, [pc, #116]	@ (8000b54 <HAL_GPIO_Init+0x350>)
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b54 <HAL_GPIO_Init+0x350>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	43db      	mvns	r3, r3
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d003      	beq.n	8000b08 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b08:	4a12      	ldr	r2, [pc, #72]	@ (8000b54 <HAL_GPIO_Init+0x350>)
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f47f ae78 	bne.w	8000814 <HAL_GPIO_Init+0x10>
  }
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	371c      	adds	r7, #28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010000 	.word	0x40010000
 8000b3c:	48000400 	.word	0x48000400
 8000b40:	48000800 	.word	0x48000800
 8000b44:	48000c00 	.word	0x48000c00
 8000b48:	48001000 	.word	0x48001000
 8000b4c:	48001400 	.word	0x48001400
 8000b50:	48001800 	.word	0x48001800
 8000b54:	40010400 	.word	0x40010400

08000b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	@ 0x24
 8000b5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b66:	4b3e      	ldr	r3, [pc, #248]	@ (8000c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	f003 030c 	and.w	r3, r3, #12
 8000b6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b70:	4b3b      	ldr	r3, [pc, #236]	@ (8000c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d005      	beq.n	8000b8c <HAL_RCC_GetSysClockFreq+0x34>
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	2b0c      	cmp	r3, #12
 8000b84:	d121      	bne.n	8000bca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d11e      	bne.n	8000bca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000b8c:	4b34      	ldr	r3, [pc, #208]	@ (8000c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d107      	bne.n	8000ba8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000b98:	4b31      	ldr	r3, [pc, #196]	@ (8000c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8000b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b9e:	0a1b      	lsrs	r3, r3, #8
 8000ba0:	f003 030f 	and.w	r3, r3, #15
 8000ba4:	61fb      	str	r3, [r7, #28]
 8000ba6:	e005      	b.n	8000bb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	091b      	lsrs	r3, r3, #4
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8000bb4:	4a2b      	ldr	r2, [pc, #172]	@ (8000c64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d10d      	bne.n	8000be0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000bc8:	e00a      	b.n	8000be0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	2b04      	cmp	r3, #4
 8000bce:	d102      	bne.n	8000bd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8000bd0:	4b25      	ldr	r3, [pc, #148]	@ (8000c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8000bd2:	61bb      	str	r3, [r7, #24]
 8000bd4:	e004      	b.n	8000be0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	2b08      	cmp	r3, #8
 8000bda:	d101      	bne.n	8000be0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000bdc:	4b23      	ldr	r3, [pc, #140]	@ (8000c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8000bde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	2b0c      	cmp	r3, #12
 8000be4:	d134      	bne.n	8000c50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000be6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	f003 0303 	and.w	r3, r3, #3
 8000bee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d003      	beq.n	8000bfe <HAL_RCC_GetSysClockFreq+0xa6>
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	2b03      	cmp	r3, #3
 8000bfa:	d003      	beq.n	8000c04 <HAL_RCC_GetSysClockFreq+0xac>
 8000bfc:	e005      	b.n	8000c0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8000c00:	617b      	str	r3, [r7, #20]
      break;
 8000c02:	e005      	b.n	8000c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8000c04:	4b19      	ldr	r3, [pc, #100]	@ (8000c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8000c06:	617b      	str	r3, [r7, #20]
      break;
 8000c08:	e002      	b.n	8000c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	617b      	str	r3, [r7, #20]
      break;
 8000c0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000c10:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	091b      	lsrs	r3, r3, #4
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	0a1b      	lsrs	r3, r3, #8
 8000c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	fb03 f202 	mul.w	r2, r3, r2
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000c36:	4b0a      	ldr	r3, [pc, #40]	@ (8000c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	0e5b      	lsrs	r3, r3, #25
 8000c3c:	f003 0303 	and.w	r3, r3, #3
 8000c40:	3301      	adds	r3, #1
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8000c50:	69bb      	ldr	r3, [r7, #24]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	@ 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40021000 	.word	0x40021000
 8000c64:	08002600 	.word	0x08002600
 8000c68:	00f42400 	.word	0x00f42400
 8000c6c:	007a1200 	.word	0x007a1200

08000c70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000c74:	4b03      	ldr	r3, [pc, #12]	@ (8000c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008

08000c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8000c8c:	f7ff fff0 	bl	8000c70 <HAL_RCC_GetHCLKFreq>
 8000c90:	4602      	mov	r2, r0
 8000c92:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	0a1b      	lsrs	r3, r3, #8
 8000c98:	f003 0307 	and.w	r3, r3, #7
 8000c9c:	4904      	ldr	r1, [pc, #16]	@ (8000cb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000c9e:	5ccb      	ldrb	r3, [r1, r3]
 8000ca0:	f003 031f 	and.w	r3, r3, #31
 8000ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	080025f8 	.word	0x080025f8

08000cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8000cb8:	f7ff ffda 	bl	8000c70 <HAL_RCC_GetHCLKFreq>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	0adb      	lsrs	r3, r3, #11
 8000cc4:	f003 0307 	and.w	r3, r3, #7
 8000cc8:	4904      	ldr	r1, [pc, #16]	@ (8000cdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8000cca:	5ccb      	ldrb	r3, [r1, r3]
 8000ccc:	f003 031f 	and.w	r3, r3, #31
 8000cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	080025f8 	.word	0x080025f8

08000ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d101      	bne.n	8000cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e040      	b.n	8000d74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d106      	bne.n	8000d08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f000 f83a 	bl	8000d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2224      	movs	r2, #36	@ 0x24
 8000d0c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f022 0201 	bic.w	r2, r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d002      	beq.n	8000d2c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f000 fc3c 	bl	80015a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f000 f981 	bl	8001034 <UART_SetConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d101      	bne.n	8000d3c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e01b      	b.n	8000d74 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8000d4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8000d5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f042 0201 	orr.w	r2, r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f000 fcbb 	bl	80016e8 <UART_CheckIdleState>
 8000d72:	4603      	mov	r3, r0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	@ 0x28
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000da4:	2b20      	cmp	r3, #32
 8000da6:	d177      	bne.n	8000e98 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d002      	beq.n	8000db4 <HAL_UART_Transmit+0x24>
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d101      	bne.n	8000db8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e070      	b.n	8000e9a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2221      	movs	r2, #33	@ 0x21
 8000dc4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000dc6:	f7ff fc07 	bl	80005d8 <HAL_GetTick>
 8000dca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	88fa      	ldrh	r2, [r7, #6]
 8000dd0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	88fa      	ldrh	r2, [r7, #6]
 8000dd8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000de4:	d108      	bne.n	8000df8 <HAL_UART_Transmit+0x68>
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d104      	bne.n	8000df8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	61bb      	str	r3, [r7, #24]
 8000df6:	e003      	b.n	8000e00 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8000e00:	e02f      	b.n	8000e62 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2180      	movs	r1, #128	@ 0x80
 8000e0c:	68f8      	ldr	r0, [r7, #12]
 8000e0e:	f000 fd13 	bl	8001838 <UART_WaitOnFlagUntilTimeout>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d004      	beq.n	8000e22 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2220      	movs	r2, #32
 8000e1c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e03b      	b.n	8000e9a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d10b      	bne.n	8000e40 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	881a      	ldrh	r2, [r3, #0]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e34:	b292      	uxth	r2, r2
 8000e36:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	3302      	adds	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	e007      	b.n	8000e50 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	781a      	ldrb	r2, [r3, #0]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1c9      	bne.n	8000e02 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	2200      	movs	r2, #0
 8000e76:	2140      	movs	r1, #64	@ 0x40
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f000 fcdd 	bl	8001838 <UART_WaitOnFlagUntilTimeout>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d004      	beq.n	8000e8e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2220      	movs	r2, #32
 8000e88:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e005      	b.n	8000e9a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	2220      	movs	r2, #32
 8000e92:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	e000      	b.n	8000e9a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8000e98:	2302      	movs	r3, #2
  }
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3720      	adds	r7, #32
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b08a      	sub	sp, #40	@ 0x28
 8000ea6:	af02      	add	r7, sp, #8
 8000ea8:	60f8      	str	r0, [r7, #12]
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eb8:	2b20      	cmp	r3, #32
 8000eba:	f040 80b6 	bne.w	800102a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <HAL_UART_Receive+0x28>
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e0ae      	b.n	800102c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2222      	movs	r2, #34	@ 0x22
 8000eda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000ee4:	f7ff fb78 	bl	80005d8 <HAL_GetTick>
 8000ee8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	88fa      	ldrh	r2, [r7, #6]
 8000eee:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	88fa      	ldrh	r2, [r7, #6]
 8000ef6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f02:	d10e      	bne.n	8000f22 <HAL_UART_Receive+0x80>
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	691b      	ldr	r3, [r3, #16]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d105      	bne.n	8000f18 <HAL_UART_Receive+0x76>
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000f12:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8000f16:	e02d      	b.n	8000f74 <HAL_UART_Receive+0xd2>
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	22ff      	movs	r2, #255	@ 0xff
 8000f1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8000f20:	e028      	b.n	8000f74 <HAL_UART_Receive+0xd2>
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10d      	bne.n	8000f46 <HAL_UART_Receive+0xa4>
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d104      	bne.n	8000f3c <HAL_UART_Receive+0x9a>
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	22ff      	movs	r2, #255	@ 0xff
 8000f36:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8000f3a:	e01b      	b.n	8000f74 <HAL_UART_Receive+0xd2>
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	227f      	movs	r2, #127	@ 0x7f
 8000f40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8000f44:	e016      	b.n	8000f74 <HAL_UART_Receive+0xd2>
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f4e:	d10d      	bne.n	8000f6c <HAL_UART_Receive+0xca>
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d104      	bne.n	8000f62 <HAL_UART_Receive+0xc0>
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	227f      	movs	r2, #127	@ 0x7f
 8000f5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8000f60:	e008      	b.n	8000f74 <HAL_UART_Receive+0xd2>
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	223f      	movs	r2, #63	@ 0x3f
 8000f66:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8000f6a:	e003      	b.n	8000f74 <HAL_UART_Receive+0xd2>
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8000f7a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f84:	d108      	bne.n	8000f98 <HAL_UART_Receive+0xf6>
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d104      	bne.n	8000f98 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	e003      	b.n	8000fa0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8000fa0:	e037      	b.n	8001012 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2120      	movs	r1, #32
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f000 fc43 	bl	8001838 <UART_WaitOnFlagUntilTimeout>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d005      	beq.n	8000fc4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2220      	movs	r2, #32
 8000fbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e033      	b.n	800102c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10c      	bne.n	8000fe4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	8a7b      	ldrh	r3, [r7, #18]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	3302      	adds	r3, #2
 8000fe0:	61bb      	str	r3, [r7, #24]
 8000fe2:	e00d      	b.n	8001000 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	8a7b      	ldrh	r3, [r7, #18]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001006:	b29b      	uxth	r3, r3
 8001008:	3b01      	subs	r3, #1
 800100a:	b29a      	uxth	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001018:	b29b      	uxth	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1c1      	bne.n	8000fa2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2220      	movs	r2, #32
 8001022:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800102a:	2302      	movs	r3, #2
  }
}
 800102c:	4618      	mov	r0, r3
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001038:	b08a      	sub	sp, #40	@ 0x28
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	431a      	orrs	r2, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	431a      	orrs	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	4313      	orrs	r3, r2
 800105a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4ba4      	ldr	r3, [pc, #656]	@ (80012f4 <UART_SetConfig+0x2c0>)
 8001064:	4013      	ands	r3, r2
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	6812      	ldr	r2, [r2, #0]
 800106a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800106c:	430b      	orrs	r3, r1
 800106e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	68da      	ldr	r2, [r3, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	430a      	orrs	r2, r1
 8001084:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a99      	ldr	r2, [pc, #612]	@ (80012f8 <UART_SetConfig+0x2c4>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d004      	beq.n	80010a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800109c:	4313      	orrs	r3, r2
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010b0:	430a      	orrs	r2, r1
 80010b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a90      	ldr	r2, [pc, #576]	@ (80012fc <UART_SetConfig+0x2c8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d126      	bne.n	800110c <UART_SetConfig+0xd8>
 80010be:	4b90      	ldr	r3, [pc, #576]	@ (8001300 <UART_SetConfig+0x2cc>)
 80010c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	d81b      	bhi.n	8001104 <UART_SetConfig+0xd0>
 80010cc:	a201      	add	r2, pc, #4	@ (adr r2, 80010d4 <UART_SetConfig+0xa0>)
 80010ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d2:	bf00      	nop
 80010d4:	080010e5 	.word	0x080010e5
 80010d8:	080010f5 	.word	0x080010f5
 80010dc:	080010ed 	.word	0x080010ed
 80010e0:	080010fd 	.word	0x080010fd
 80010e4:	2301      	movs	r3, #1
 80010e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80010ea:	e116      	b.n	800131a <UART_SetConfig+0x2e6>
 80010ec:	2302      	movs	r3, #2
 80010ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80010f2:	e112      	b.n	800131a <UART_SetConfig+0x2e6>
 80010f4:	2304      	movs	r3, #4
 80010f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80010fa:	e10e      	b.n	800131a <UART_SetConfig+0x2e6>
 80010fc:	2308      	movs	r3, #8
 80010fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001102:	e10a      	b.n	800131a <UART_SetConfig+0x2e6>
 8001104:	2310      	movs	r3, #16
 8001106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800110a:	e106      	b.n	800131a <UART_SetConfig+0x2e6>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a7c      	ldr	r2, [pc, #496]	@ (8001304 <UART_SetConfig+0x2d0>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d138      	bne.n	8001188 <UART_SetConfig+0x154>
 8001116:	4b7a      	ldr	r3, [pc, #488]	@ (8001300 <UART_SetConfig+0x2cc>)
 8001118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800111c:	f003 030c 	and.w	r3, r3, #12
 8001120:	2b0c      	cmp	r3, #12
 8001122:	d82d      	bhi.n	8001180 <UART_SetConfig+0x14c>
 8001124:	a201      	add	r2, pc, #4	@ (adr r2, 800112c <UART_SetConfig+0xf8>)
 8001126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112a:	bf00      	nop
 800112c:	08001161 	.word	0x08001161
 8001130:	08001181 	.word	0x08001181
 8001134:	08001181 	.word	0x08001181
 8001138:	08001181 	.word	0x08001181
 800113c:	08001171 	.word	0x08001171
 8001140:	08001181 	.word	0x08001181
 8001144:	08001181 	.word	0x08001181
 8001148:	08001181 	.word	0x08001181
 800114c:	08001169 	.word	0x08001169
 8001150:	08001181 	.word	0x08001181
 8001154:	08001181 	.word	0x08001181
 8001158:	08001181 	.word	0x08001181
 800115c:	08001179 	.word	0x08001179
 8001160:	2300      	movs	r3, #0
 8001162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001166:	e0d8      	b.n	800131a <UART_SetConfig+0x2e6>
 8001168:	2302      	movs	r3, #2
 800116a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800116e:	e0d4      	b.n	800131a <UART_SetConfig+0x2e6>
 8001170:	2304      	movs	r3, #4
 8001172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001176:	e0d0      	b.n	800131a <UART_SetConfig+0x2e6>
 8001178:	2308      	movs	r3, #8
 800117a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800117e:	e0cc      	b.n	800131a <UART_SetConfig+0x2e6>
 8001180:	2310      	movs	r3, #16
 8001182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001186:	e0c8      	b.n	800131a <UART_SetConfig+0x2e6>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a5e      	ldr	r2, [pc, #376]	@ (8001308 <UART_SetConfig+0x2d4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d125      	bne.n	80011de <UART_SetConfig+0x1aa>
 8001192:	4b5b      	ldr	r3, [pc, #364]	@ (8001300 <UART_SetConfig+0x2cc>)
 8001194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001198:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800119c:	2b30      	cmp	r3, #48	@ 0x30
 800119e:	d016      	beq.n	80011ce <UART_SetConfig+0x19a>
 80011a0:	2b30      	cmp	r3, #48	@ 0x30
 80011a2:	d818      	bhi.n	80011d6 <UART_SetConfig+0x1a2>
 80011a4:	2b20      	cmp	r3, #32
 80011a6:	d00a      	beq.n	80011be <UART_SetConfig+0x18a>
 80011a8:	2b20      	cmp	r3, #32
 80011aa:	d814      	bhi.n	80011d6 <UART_SetConfig+0x1a2>
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <UART_SetConfig+0x182>
 80011b0:	2b10      	cmp	r3, #16
 80011b2:	d008      	beq.n	80011c6 <UART_SetConfig+0x192>
 80011b4:	e00f      	b.n	80011d6 <UART_SetConfig+0x1a2>
 80011b6:	2300      	movs	r3, #0
 80011b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80011bc:	e0ad      	b.n	800131a <UART_SetConfig+0x2e6>
 80011be:	2302      	movs	r3, #2
 80011c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80011c4:	e0a9      	b.n	800131a <UART_SetConfig+0x2e6>
 80011c6:	2304      	movs	r3, #4
 80011c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80011cc:	e0a5      	b.n	800131a <UART_SetConfig+0x2e6>
 80011ce:	2308      	movs	r3, #8
 80011d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80011d4:	e0a1      	b.n	800131a <UART_SetConfig+0x2e6>
 80011d6:	2310      	movs	r3, #16
 80011d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80011dc:	e09d      	b.n	800131a <UART_SetConfig+0x2e6>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a4a      	ldr	r2, [pc, #296]	@ (800130c <UART_SetConfig+0x2d8>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d125      	bne.n	8001234 <UART_SetConfig+0x200>
 80011e8:	4b45      	ldr	r3, [pc, #276]	@ (8001300 <UART_SetConfig+0x2cc>)
 80011ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80011f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80011f4:	d016      	beq.n	8001224 <UART_SetConfig+0x1f0>
 80011f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80011f8:	d818      	bhi.n	800122c <UART_SetConfig+0x1f8>
 80011fa:	2b80      	cmp	r3, #128	@ 0x80
 80011fc:	d00a      	beq.n	8001214 <UART_SetConfig+0x1e0>
 80011fe:	2b80      	cmp	r3, #128	@ 0x80
 8001200:	d814      	bhi.n	800122c <UART_SetConfig+0x1f8>
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <UART_SetConfig+0x1d8>
 8001206:	2b40      	cmp	r3, #64	@ 0x40
 8001208:	d008      	beq.n	800121c <UART_SetConfig+0x1e8>
 800120a:	e00f      	b.n	800122c <UART_SetConfig+0x1f8>
 800120c:	2300      	movs	r3, #0
 800120e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001212:	e082      	b.n	800131a <UART_SetConfig+0x2e6>
 8001214:	2302      	movs	r3, #2
 8001216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800121a:	e07e      	b.n	800131a <UART_SetConfig+0x2e6>
 800121c:	2304      	movs	r3, #4
 800121e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001222:	e07a      	b.n	800131a <UART_SetConfig+0x2e6>
 8001224:	2308      	movs	r3, #8
 8001226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800122a:	e076      	b.n	800131a <UART_SetConfig+0x2e6>
 800122c:	2310      	movs	r3, #16
 800122e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001232:	e072      	b.n	800131a <UART_SetConfig+0x2e6>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a35      	ldr	r2, [pc, #212]	@ (8001310 <UART_SetConfig+0x2dc>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d12a      	bne.n	8001294 <UART_SetConfig+0x260>
 800123e:	4b30      	ldr	r3, [pc, #192]	@ (8001300 <UART_SetConfig+0x2cc>)
 8001240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001244:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001248:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800124c:	d01a      	beq.n	8001284 <UART_SetConfig+0x250>
 800124e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001252:	d81b      	bhi.n	800128c <UART_SetConfig+0x258>
 8001254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001258:	d00c      	beq.n	8001274 <UART_SetConfig+0x240>
 800125a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800125e:	d815      	bhi.n	800128c <UART_SetConfig+0x258>
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <UART_SetConfig+0x238>
 8001264:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001268:	d008      	beq.n	800127c <UART_SetConfig+0x248>
 800126a:	e00f      	b.n	800128c <UART_SetConfig+0x258>
 800126c:	2300      	movs	r3, #0
 800126e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001272:	e052      	b.n	800131a <UART_SetConfig+0x2e6>
 8001274:	2302      	movs	r3, #2
 8001276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800127a:	e04e      	b.n	800131a <UART_SetConfig+0x2e6>
 800127c:	2304      	movs	r3, #4
 800127e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001282:	e04a      	b.n	800131a <UART_SetConfig+0x2e6>
 8001284:	2308      	movs	r3, #8
 8001286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800128a:	e046      	b.n	800131a <UART_SetConfig+0x2e6>
 800128c:	2310      	movs	r3, #16
 800128e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001292:	e042      	b.n	800131a <UART_SetConfig+0x2e6>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a17      	ldr	r2, [pc, #92]	@ (80012f8 <UART_SetConfig+0x2c4>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d13a      	bne.n	8001314 <UART_SetConfig+0x2e0>
 800129e:	4b18      	ldr	r3, [pc, #96]	@ (8001300 <UART_SetConfig+0x2cc>)
 80012a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80012a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80012ac:	d01a      	beq.n	80012e4 <UART_SetConfig+0x2b0>
 80012ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80012b2:	d81b      	bhi.n	80012ec <UART_SetConfig+0x2b8>
 80012b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80012b8:	d00c      	beq.n	80012d4 <UART_SetConfig+0x2a0>
 80012ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80012be:	d815      	bhi.n	80012ec <UART_SetConfig+0x2b8>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <UART_SetConfig+0x298>
 80012c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012c8:	d008      	beq.n	80012dc <UART_SetConfig+0x2a8>
 80012ca:	e00f      	b.n	80012ec <UART_SetConfig+0x2b8>
 80012cc:	2300      	movs	r3, #0
 80012ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80012d2:	e022      	b.n	800131a <UART_SetConfig+0x2e6>
 80012d4:	2302      	movs	r3, #2
 80012d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80012da:	e01e      	b.n	800131a <UART_SetConfig+0x2e6>
 80012dc:	2304      	movs	r3, #4
 80012de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80012e2:	e01a      	b.n	800131a <UART_SetConfig+0x2e6>
 80012e4:	2308      	movs	r3, #8
 80012e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80012ea:	e016      	b.n	800131a <UART_SetConfig+0x2e6>
 80012ec:	2310      	movs	r3, #16
 80012ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80012f2:	e012      	b.n	800131a <UART_SetConfig+0x2e6>
 80012f4:	efff69f3 	.word	0xefff69f3
 80012f8:	40008000 	.word	0x40008000
 80012fc:	40013800 	.word	0x40013800
 8001300:	40021000 	.word	0x40021000
 8001304:	40004400 	.word	0x40004400
 8001308:	40004800 	.word	0x40004800
 800130c:	40004c00 	.word	0x40004c00
 8001310:	40005000 	.word	0x40005000
 8001314:	2310      	movs	r3, #16
 8001316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a9f      	ldr	r2, [pc, #636]	@ (800159c <UART_SetConfig+0x568>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d17a      	bne.n	800141a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001324:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001328:	2b08      	cmp	r3, #8
 800132a:	d824      	bhi.n	8001376 <UART_SetConfig+0x342>
 800132c:	a201      	add	r2, pc, #4	@ (adr r2, 8001334 <UART_SetConfig+0x300>)
 800132e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001332:	bf00      	nop
 8001334:	08001359 	.word	0x08001359
 8001338:	08001377 	.word	0x08001377
 800133c:	08001361 	.word	0x08001361
 8001340:	08001377 	.word	0x08001377
 8001344:	08001367 	.word	0x08001367
 8001348:	08001377 	.word	0x08001377
 800134c:	08001377 	.word	0x08001377
 8001350:	08001377 	.word	0x08001377
 8001354:	0800136f 	.word	0x0800136f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001358:	f7ff fc96 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 800135c:	61f8      	str	r0, [r7, #28]
        break;
 800135e:	e010      	b.n	8001382 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001360:	4b8f      	ldr	r3, [pc, #572]	@ (80015a0 <UART_SetConfig+0x56c>)
 8001362:	61fb      	str	r3, [r7, #28]
        break;
 8001364:	e00d      	b.n	8001382 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001366:	f7ff fbf7 	bl	8000b58 <HAL_RCC_GetSysClockFreq>
 800136a:	61f8      	str	r0, [r7, #28]
        break;
 800136c:	e009      	b.n	8001382 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800136e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001372:	61fb      	str	r3, [r7, #28]
        break;
 8001374:	e005      	b.n	8001382 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8001380:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 80fb 	beq.w	8001580 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	69fa      	ldr	r2, [r7, #28]
 8001396:	429a      	cmp	r2, r3
 8001398:	d305      	bcc.n	80013a6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80013a0:	69fa      	ldr	r2, [r7, #28]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d903      	bls.n	80013ae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80013ac:	e0e8      	b.n	8001580 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	2200      	movs	r2, #0
 80013b2:	461c      	mov	r4, r3
 80013b4:	4615      	mov	r5, r2
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	022b      	lsls	r3, r5, #8
 80013c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80013c4:	0222      	lsls	r2, r4, #8
 80013c6:	68f9      	ldr	r1, [r7, #12]
 80013c8:	6849      	ldr	r1, [r1, #4]
 80013ca:	0849      	lsrs	r1, r1, #1
 80013cc:	2000      	movs	r0, #0
 80013ce:	4688      	mov	r8, r1
 80013d0:	4681      	mov	r9, r0
 80013d2:	eb12 0a08 	adds.w	sl, r2, r8
 80013d6:	eb43 0b09 	adc.w	fp, r3, r9
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013e8:	4650      	mov	r0, sl
 80013ea:	4659      	mov	r1, fp
 80013ec:	f7fe feee 	bl	80001cc <__aeabi_uldivmod>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4613      	mov	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80013fe:	d308      	bcc.n	8001412 <UART_SetConfig+0x3de>
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001406:	d204      	bcs.n	8001412 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	e0b6      	b.n	8001580 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001418:	e0b2      	b.n	8001580 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001422:	d15e      	bne.n	80014e2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8001424:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001428:	2b08      	cmp	r3, #8
 800142a:	d828      	bhi.n	800147e <UART_SetConfig+0x44a>
 800142c:	a201      	add	r2, pc, #4	@ (adr r2, 8001434 <UART_SetConfig+0x400>)
 800142e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001432:	bf00      	nop
 8001434:	08001459 	.word	0x08001459
 8001438:	08001461 	.word	0x08001461
 800143c:	08001469 	.word	0x08001469
 8001440:	0800147f 	.word	0x0800147f
 8001444:	0800146f 	.word	0x0800146f
 8001448:	0800147f 	.word	0x0800147f
 800144c:	0800147f 	.word	0x0800147f
 8001450:	0800147f 	.word	0x0800147f
 8001454:	08001477 	.word	0x08001477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001458:	f7ff fc16 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 800145c:	61f8      	str	r0, [r7, #28]
        break;
 800145e:	e014      	b.n	800148a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001460:	f7ff fc28 	bl	8000cb4 <HAL_RCC_GetPCLK2Freq>
 8001464:	61f8      	str	r0, [r7, #28]
        break;
 8001466:	e010      	b.n	800148a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001468:	4b4d      	ldr	r3, [pc, #308]	@ (80015a0 <UART_SetConfig+0x56c>)
 800146a:	61fb      	str	r3, [r7, #28]
        break;
 800146c:	e00d      	b.n	800148a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800146e:	f7ff fb73 	bl	8000b58 <HAL_RCC_GetSysClockFreq>
 8001472:	61f8      	str	r0, [r7, #28]
        break;
 8001474:	e009      	b.n	800148a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001476:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800147a:	61fb      	str	r3, [r7, #28]
        break;
 800147c:	e005      	b.n	800148a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8001488:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d077      	beq.n	8001580 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	005a      	lsls	r2, r3, #1
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	085b      	lsrs	r3, r3, #1
 800149a:	441a      	add	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	2b0f      	cmp	r3, #15
 80014aa:	d916      	bls.n	80014da <UART_SetConfig+0x4a6>
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014b2:	d212      	bcs.n	80014da <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	f023 030f 	bic.w	r3, r3, #15
 80014bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	085b      	lsrs	r3, r3, #1
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	8afb      	ldrh	r3, [r7, #22]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	8afa      	ldrh	r2, [r7, #22]
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	e052      	b.n	8001580 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80014e0:	e04e      	b.n	8001580 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80014e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d827      	bhi.n	800153a <UART_SetConfig+0x506>
 80014ea:	a201      	add	r2, pc, #4	@ (adr r2, 80014f0 <UART_SetConfig+0x4bc>)
 80014ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f0:	08001515 	.word	0x08001515
 80014f4:	0800151d 	.word	0x0800151d
 80014f8:	08001525 	.word	0x08001525
 80014fc:	0800153b 	.word	0x0800153b
 8001500:	0800152b 	.word	0x0800152b
 8001504:	0800153b 	.word	0x0800153b
 8001508:	0800153b 	.word	0x0800153b
 800150c:	0800153b 	.word	0x0800153b
 8001510:	08001533 	.word	0x08001533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001514:	f7ff fbb8 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 8001518:	61f8      	str	r0, [r7, #28]
        break;
 800151a:	e014      	b.n	8001546 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800151c:	f7ff fbca 	bl	8000cb4 <HAL_RCC_GetPCLK2Freq>
 8001520:	61f8      	str	r0, [r7, #28]
        break;
 8001522:	e010      	b.n	8001546 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001524:	4b1e      	ldr	r3, [pc, #120]	@ (80015a0 <UART_SetConfig+0x56c>)
 8001526:	61fb      	str	r3, [r7, #28]
        break;
 8001528:	e00d      	b.n	8001546 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800152a:	f7ff fb15 	bl	8000b58 <HAL_RCC_GetSysClockFreq>
 800152e:	61f8      	str	r0, [r7, #28]
        break;
 8001530:	e009      	b.n	8001546 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001536:	61fb      	str	r3, [r7, #28]
        break;
 8001538:	e005      	b.n	8001546 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8001544:	bf00      	nop
    }

    if (pclk != 0U)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d019      	beq.n	8001580 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	085a      	lsrs	r2, r3, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	441a      	add	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	fbb2 f3f3 	udiv	r3, r2, r3
 800155e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	2b0f      	cmp	r3, #15
 8001564:	d909      	bls.n	800157a <UART_SetConfig+0x546>
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800156c:	d205      	bcs.n	800157a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	b29a      	uxth	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	e002      	b.n	8001580 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2200      	movs	r2, #0
 8001584:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2200      	movs	r2, #0
 800158a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800158c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8001590:	4618      	mov	r0, r3
 8001592:	3728      	adds	r7, #40	@ 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800159a:	bf00      	nop
 800159c:	40008000 	.word	0x40008000
 80015a0:	00f42400 	.word	0x00f42400

080015a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00a      	beq.n	80015ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00a      	beq.n	80015f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00a      	beq.n	8001612 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00a      	beq.n	8001634 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00a      	beq.n	8001656 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165a:	f003 0320 	and.w	r3, r3, #32
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00a      	beq.n	8001678 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001680:	2b00      	cmp	r3, #0
 8001682:	d01a      	beq.n	80016ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80016a2:	d10a      	bne.n	80016ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00a      	beq.n	80016dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	605a      	str	r2, [r3, #4]
  }
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b098      	sub	sp, #96	@ 0x60
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80016f8:	f7fe ff6e 	bl	80005d8 <HAL_GetTick>
 80016fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	2b08      	cmp	r3, #8
 800170a:	d12e      	bne.n	800176a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800170c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f88c 	bl	8001838 <UART_WaitOnFlagUntilTimeout>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d021      	beq.n	800176a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800172c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800172e:	e853 3f00 	ldrex	r3, [r3]
 8001732:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800173a:	653b      	str	r3, [r7, #80]	@ 0x50
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001744:	647b      	str	r3, [r7, #68]	@ 0x44
 8001746:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001748:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800174a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800174c:	e841 2300 	strex	r3, r2, [r1]
 8001750:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1e6      	bne.n	8001726 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2220      	movs	r2, #32
 800175c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e062      	b.n	8001830 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b04      	cmp	r3, #4
 8001776:	d149      	bne.n	800180c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001778:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f856 	bl	8001838 <UART_WaitOnFlagUntilTimeout>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d03c      	beq.n	800180c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179a:	e853 3f00 	ldrex	r3, [r3]
 800179e:	623b      	str	r3, [r7, #32]
   return(result);
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80017a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80017b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80017b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017b8:	e841 2300 	strex	r3, r2, [r1]
 80017bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80017be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1e6      	bne.n	8001792 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	3308      	adds	r3, #8
 80017ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	e853 3f00 	ldrex	r3, [r3]
 80017d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f023 0301 	bic.w	r3, r3, #1
 80017da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3308      	adds	r3, #8
 80017e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80017e4:	61fa      	str	r2, [r7, #28]
 80017e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017e8:	69b9      	ldr	r1, [r7, #24]
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	e841 2300 	strex	r3, r2, [r1]
 80017f0:	617b      	str	r3, [r7, #20]
   return(result);
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1e5      	bne.n	80017c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2220      	movs	r2, #32
 80017fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e011      	b.n	8001830 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2220      	movs	r2, #32
 8001810:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2220      	movs	r2, #32
 8001816:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3758      	adds	r7, #88	@ 0x58
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	4613      	mov	r3, r2
 8001846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001848:	e049      	b.n	80018de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001850:	d045      	beq.n	80018de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001852:	f7fe fec1 	bl	80005d8 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	429a      	cmp	r2, r3
 8001860:	d302      	bcc.n	8001868 <UART_WaitOnFlagUntilTimeout+0x30>
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e048      	b.n	80018fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b00      	cmp	r3, #0
 8001878:	d031      	beq.n	80018de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b08      	cmp	r3, #8
 8001886:	d110      	bne.n	80018aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2208      	movs	r2, #8
 800188e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f000 f838 	bl	8001906 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2208      	movs	r2, #8
 800189a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e029      	b.n	80018fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018b8:	d111      	bne.n	80018de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 f81e 	bl	8001906 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2220      	movs	r2, #32
 80018ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e00f      	b.n	80018fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	69da      	ldr	r2, [r3, #28]
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4013      	ands	r3, r2
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	bf0c      	ite	eq
 80018ee:	2301      	moveq	r3, #1
 80018f0:	2300      	movne	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d0a6      	beq.n	800184a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001906:	b480      	push	{r7}
 8001908:	b095      	sub	sp, #84	@ 0x54
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001916:	e853 3f00 	ldrex	r3, [r3]
 800191a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800191c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800191e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001922:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800192c:	643b      	str	r3, [r7, #64]	@ 0x40
 800192e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001930:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001932:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001934:	e841 2300 	strex	r3, r2, [r1]
 8001938:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800193a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1e6      	bne.n	800190e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	3308      	adds	r3, #8
 8001946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	e853 3f00 	ldrex	r3, [r3]
 800194e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f023 0301 	bic.w	r3, r3, #1
 8001956:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3308      	adds	r3, #8
 800195e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001960:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001962:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001964:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001968:	e841 2300 	strex	r3, r2, [r1]
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1e5      	bne.n	8001940 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001978:	2b01      	cmp	r3, #1
 800197a:	d118      	bne.n	80019ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	e853 3f00 	ldrex	r3, [r3]
 8001988:	60bb      	str	r3, [r7, #8]
   return(result);
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	f023 0310 	bic.w	r3, r3, #16
 8001990:	647b      	str	r3, [r7, #68]	@ 0x44
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800199a:	61bb      	str	r3, [r7, #24]
 800199c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800199e:	6979      	ldr	r1, [r7, #20]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	e841 2300 	strex	r3, r2, [r1]
 80019a6:	613b      	str	r3, [r7, #16]
   return(result);
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1e6      	bne.n	800197c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2220      	movs	r2, #32
 80019b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80019c2:	bf00      	nop
 80019c4:	3754      	adds	r7, #84	@ 0x54
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <main>:

char message[20] = "HELLO FROM STM32\r\n";
uint8_t buffer,txdata='a';

int main(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
    HAL_Init();
 80019d4:	f7fe fd90 	bl	80004f8 <HAL_Init>
    uart_init();
 80019d8:	f000 f822 	bl	8001a20 <uart_init>

    while (1)
    {
    	printf("HELLO FROM STM32\r\n");
 80019dc:	4809      	ldr	r0, [pc, #36]	@ (8001a04 <main+0x34>)
 80019de:	f000 fa61 	bl	8001ea4 <puts>
        //HAL_USART_TransmitReceive(&huart2, (uint8_t *)message, (uint8_t *)buffer, strlen(message), 200);
    	HAL_UART_Transmit(&huart2, &txdata,1, 100);
 80019e2:	2364      	movs	r3, #100	@ 0x64
 80019e4:	2201      	movs	r2, #1
 80019e6:	4908      	ldr	r1, [pc, #32]	@ (8001a08 <main+0x38>)
 80019e8:	4808      	ldr	r0, [pc, #32]	@ (8001a0c <main+0x3c>)
 80019ea:	f7ff f9d1 	bl	8000d90 <HAL_UART_Transmit>
    	HAL_UART_Receive(&huart2,&buffer, 1, 100);
 80019ee:	2364      	movs	r3, #100	@ 0x64
 80019f0:	2201      	movs	r2, #1
 80019f2:	4907      	ldr	r1, [pc, #28]	@ (8001a10 <main+0x40>)
 80019f4:	4805      	ldr	r0, [pc, #20]	@ (8001a0c <main+0x3c>)
 80019f6:	f7ff fa54 	bl	8000ea2 <HAL_UART_Receive>
        HAL_Delay(200);
 80019fa:	20c8      	movs	r0, #200	@ 0xc8
 80019fc:	f7fe fdf8 	bl	80005f0 <HAL_Delay>
    	printf("HELLO FROM STM32\r\n");
 8001a00:	bf00      	nop
 8001a02:	e7eb      	b.n	80019dc <main+0xc>
 8001a04:	080025e4 	.word	0x080025e4
 8001a08:	20000005 	.word	0x20000005
 8001a0c:	20000088 	.word	0x20000088
 8001a10:	20000110 	.word	0x20000110

08001a14 <SysTick_Handler>:
    }
}

void SysTick_Handler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001a18:	f7fe fdca 	bl	80005b0 <HAL_IncTick>
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <uart_init>:

void uart_init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	611a      	str	r2, [r3, #16]

    // Enable GPIOA clock (for PA2, PA3)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	4b25      	ldr	r3, [pc, #148]	@ (8001acc <uart_init+0xac>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3a:	4a24      	ldr	r2, [pc, #144]	@ (8001acc <uart_init+0xac>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a42:	4b22      	ldr	r3, [pc, #136]	@ (8001acc <uart_init+0xac>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]

    // Enable USART2 clock
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001acc <uart_init+0xac>)
 8001a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a52:	4a1e      	ldr	r2, [pc, #120]	@ (8001acc <uart_init+0xac>)
 8001a54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a58:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001acc <uart_init+0xac>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]

    // Configure PA2 (TX) and PA3 (RX) for USART2
    GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8001a66:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a74:	2303      	movs	r3, #3
 8001a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a78:	2307      	movs	r3, #7
 8001a7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	4619      	mov	r1, r3
 8001a82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a86:	f7fe febd 	bl	8000804 <HAL_GPIO_Init>

    // Configure UART module
    huart2.Instance = USART1;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <uart_init+0xb0>)
 8001a8c:	4a11      	ldr	r2, [pc, #68]	@ (8001ad4 <uart_init+0xb4>)
 8001a8e:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <uart_init+0xb0>)
 8001a92:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a96:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a98:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad0 <uart_init+0xb0>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <uart_init+0xb0>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <uart_init+0xb0>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX; // TX only
 8001aaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <uart_init+0xb0>)
 8001aac:	220c      	movs	r2, #12
 8001aae:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab0:	4b07      	ldr	r3, [pc, #28]	@ (8001ad0 <uart_init+0xb0>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab6:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <uart_init+0xb0>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	61da      	str	r2, [r3, #28]

    HAL_UART_Init(&huart2);
 8001abc:	4804      	ldr	r0, [pc, #16]	@ (8001ad0 <uart_init+0xb0>)
 8001abe:	f7ff f90f 	bl	8000ce0 <HAL_UART_Init>
}
 8001ac2:	bf00      	nop
 8001ac4:	3720      	adds	r7, #32
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	20000088 	.word	0x20000088
 8001ad4:	40013800 	.word	0x40013800

08001ad8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	e00a      	b.n	8001b00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aea:	f3af 8000 	nop.w
 8001aee:	4601      	mov	r1, r0
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	60ba      	str	r2, [r7, #8]
 8001af6:	b2ca      	uxtb	r2, r1
 8001af8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	3301      	adds	r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dbf0      	blt.n	8001aea <_read+0x12>
  }

  return len;
 8001b08:	687b      	ldr	r3, [r7, #4]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	e009      	b.n	8001b38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	60ba      	str	r2, [r7, #8]
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dbf1      	blt.n	8001b24 <_write+0x12>
  }
  return len;
 8001b40:	687b      	ldr	r3, [r7, #4]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_close>:

int _close(int file)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b72:	605a      	str	r2, [r3, #4]
  return 0;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <_isatty>:

int _isatty(int file)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b8a:	2301      	movs	r3, #1
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bbc:	4a14      	ldr	r2, [pc, #80]	@ (8001c10 <_sbrk+0x5c>)
 8001bbe:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <_sbrk+0x60>)
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <_sbrk+0x64>)
 8001bd2:	4a12      	ldr	r2, [pc, #72]	@ (8001c1c <_sbrk+0x68>)
 8001bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd6:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d207      	bcs.n	8001bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be4:	f000 fa8c 	bl	8002100 <__errno>
 8001be8:	4603      	mov	r3, r0
 8001bea:	220c      	movs	r2, #12
 8001bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	e009      	b.n	8001c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf4:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	4a05      	ldr	r2, [pc, #20]	@ (8001c18 <_sbrk+0x64>)
 8001c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20018000 	.word	0x20018000
 8001c14:	00000400 	.word	0x00000400
 8001c18:	20000114 	.word	0x20000114
 8001c1c:	20000268 	.word	0x20000268

08001c20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c20:	480d      	ldr	r0, [pc, #52]	@ (8001c58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c22:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c24:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c28:	480c      	ldr	r0, [pc, #48]	@ (8001c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c2a:	490d      	ldr	r1, [pc, #52]	@ (8001c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c64 <LoopForever+0xe>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c30:	e002      	b.n	8001c38 <LoopCopyDataInit>

08001c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c36:	3304      	adds	r3, #4

08001c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c3c:	d3f9      	bcc.n	8001c32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c40:	4c0a      	ldr	r4, [pc, #40]	@ (8001c6c <LoopForever+0x16>)
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c44:	e001      	b.n	8001c4a <LoopFillZerobss>

08001c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c48:	3204      	adds	r2, #4

08001c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c4c:	d3fb      	bcc.n	8001c46 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001c4e:	f000 fa5d 	bl	800210c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8001c52:	f7ff febd 	bl	80019d0 <main>

08001c56 <LoopForever>:

LoopForever:
  b LoopForever
 8001c56:	e7fe      	b.n	8001c56 <LoopForever>
  ldr   r0, =_estack
 8001c58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c60:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001c64:	08002640 	.word	0x08002640
  ldr r2, =_sbss
 8001c68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001c6c:	20000264 	.word	0x20000264

08001c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC1_2_IRQHandler>
	...

08001c74 <std>:
 8001c74:	2300      	movs	r3, #0
 8001c76:	b510      	push	{r4, lr}
 8001c78:	4604      	mov	r4, r0
 8001c7a:	e9c0 3300 	strd	r3, r3, [r0]
 8001c7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001c82:	6083      	str	r3, [r0, #8]
 8001c84:	8181      	strh	r1, [r0, #12]
 8001c86:	6643      	str	r3, [r0, #100]	@ 0x64
 8001c88:	81c2      	strh	r2, [r0, #14]
 8001c8a:	6183      	str	r3, [r0, #24]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	2208      	movs	r2, #8
 8001c90:	305c      	adds	r0, #92	@ 0x5c
 8001c92:	f000 f9e7 	bl	8002064 <memset>
 8001c96:	4b0d      	ldr	r3, [pc, #52]	@ (8001ccc <std+0x58>)
 8001c98:	6263      	str	r3, [r4, #36]	@ 0x24
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd0 <std+0x5c>)
 8001c9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd4 <std+0x60>)
 8001ca0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <std+0x64>)
 8001ca4:	6323      	str	r3, [r4, #48]	@ 0x30
 8001ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cdc <std+0x68>)
 8001ca8:	6224      	str	r4, [r4, #32]
 8001caa:	429c      	cmp	r4, r3
 8001cac:	d006      	beq.n	8001cbc <std+0x48>
 8001cae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001cb2:	4294      	cmp	r4, r2
 8001cb4:	d002      	beq.n	8001cbc <std+0x48>
 8001cb6:	33d0      	adds	r3, #208	@ 0xd0
 8001cb8:	429c      	cmp	r4, r3
 8001cba:	d105      	bne.n	8001cc8 <std+0x54>
 8001cbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cc4:	f000 ba46 	b.w	8002154 <__retarget_lock_init_recursive>
 8001cc8:	bd10      	pop	{r4, pc}
 8001cca:	bf00      	nop
 8001ccc:	08001eb5 	.word	0x08001eb5
 8001cd0:	08001ed7 	.word	0x08001ed7
 8001cd4:	08001f0f 	.word	0x08001f0f
 8001cd8:	08001f33 	.word	0x08001f33
 8001cdc:	20000118 	.word	0x20000118

08001ce0 <stdio_exit_handler>:
 8001ce0:	4a02      	ldr	r2, [pc, #8]	@ (8001cec <stdio_exit_handler+0xc>)
 8001ce2:	4903      	ldr	r1, [pc, #12]	@ (8001cf0 <stdio_exit_handler+0x10>)
 8001ce4:	4803      	ldr	r0, [pc, #12]	@ (8001cf4 <stdio_exit_handler+0x14>)
 8001ce6:	f000 b869 	b.w	8001dbc <_fwalk_sglue>
 8001cea:	bf00      	nop
 8001cec:	2000000c 	.word	0x2000000c
 8001cf0:	08002455 	.word	0x08002455
 8001cf4:	2000001c 	.word	0x2000001c

08001cf8 <cleanup_stdio>:
 8001cf8:	6841      	ldr	r1, [r0, #4]
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <cleanup_stdio+0x34>)
 8001cfc:	4299      	cmp	r1, r3
 8001cfe:	b510      	push	{r4, lr}
 8001d00:	4604      	mov	r4, r0
 8001d02:	d001      	beq.n	8001d08 <cleanup_stdio+0x10>
 8001d04:	f000 fba6 	bl	8002454 <_fflush_r>
 8001d08:	68a1      	ldr	r1, [r4, #8]
 8001d0a:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <cleanup_stdio+0x38>)
 8001d0c:	4299      	cmp	r1, r3
 8001d0e:	d002      	beq.n	8001d16 <cleanup_stdio+0x1e>
 8001d10:	4620      	mov	r0, r4
 8001d12:	f000 fb9f 	bl	8002454 <_fflush_r>
 8001d16:	68e1      	ldr	r1, [r4, #12]
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <cleanup_stdio+0x3c>)
 8001d1a:	4299      	cmp	r1, r3
 8001d1c:	d004      	beq.n	8001d28 <cleanup_stdio+0x30>
 8001d1e:	4620      	mov	r0, r4
 8001d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d24:	f000 bb96 	b.w	8002454 <_fflush_r>
 8001d28:	bd10      	pop	{r4, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000118 	.word	0x20000118
 8001d30:	20000180 	.word	0x20000180
 8001d34:	200001e8 	.word	0x200001e8

08001d38 <global_stdio_init.part.0>:
 8001d38:	b510      	push	{r4, lr}
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <global_stdio_init.part.0+0x30>)
 8001d3c:	4c0b      	ldr	r4, [pc, #44]	@ (8001d6c <global_stdio_init.part.0+0x34>)
 8001d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d70 <global_stdio_init.part.0+0x38>)
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	4620      	mov	r0, r4
 8001d44:	2200      	movs	r2, #0
 8001d46:	2104      	movs	r1, #4
 8001d48:	f7ff ff94 	bl	8001c74 <std>
 8001d4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001d50:	2201      	movs	r2, #1
 8001d52:	2109      	movs	r1, #9
 8001d54:	f7ff ff8e 	bl	8001c74 <std>
 8001d58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d62:	2112      	movs	r1, #18
 8001d64:	f7ff bf86 	b.w	8001c74 <std>
 8001d68:	20000250 	.word	0x20000250
 8001d6c:	20000118 	.word	0x20000118
 8001d70:	08001ce1 	.word	0x08001ce1

08001d74 <__sfp_lock_acquire>:
 8001d74:	4801      	ldr	r0, [pc, #4]	@ (8001d7c <__sfp_lock_acquire+0x8>)
 8001d76:	f000 b9ee 	b.w	8002156 <__retarget_lock_acquire_recursive>
 8001d7a:	bf00      	nop
 8001d7c:	20000259 	.word	0x20000259

08001d80 <__sfp_lock_release>:
 8001d80:	4801      	ldr	r0, [pc, #4]	@ (8001d88 <__sfp_lock_release+0x8>)
 8001d82:	f000 b9e9 	b.w	8002158 <__retarget_lock_release_recursive>
 8001d86:	bf00      	nop
 8001d88:	20000259 	.word	0x20000259

08001d8c <__sinit>:
 8001d8c:	b510      	push	{r4, lr}
 8001d8e:	4604      	mov	r4, r0
 8001d90:	f7ff fff0 	bl	8001d74 <__sfp_lock_acquire>
 8001d94:	6a23      	ldr	r3, [r4, #32]
 8001d96:	b11b      	cbz	r3, 8001da0 <__sinit+0x14>
 8001d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d9c:	f7ff bff0 	b.w	8001d80 <__sfp_lock_release>
 8001da0:	4b04      	ldr	r3, [pc, #16]	@ (8001db4 <__sinit+0x28>)
 8001da2:	6223      	str	r3, [r4, #32]
 8001da4:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <__sinit+0x2c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f5      	bne.n	8001d98 <__sinit+0xc>
 8001dac:	f7ff ffc4 	bl	8001d38 <global_stdio_init.part.0>
 8001db0:	e7f2      	b.n	8001d98 <__sinit+0xc>
 8001db2:	bf00      	nop
 8001db4:	08001cf9 	.word	0x08001cf9
 8001db8:	20000250 	.word	0x20000250

08001dbc <_fwalk_sglue>:
 8001dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001dc0:	4607      	mov	r7, r0
 8001dc2:	4688      	mov	r8, r1
 8001dc4:	4614      	mov	r4, r2
 8001dc6:	2600      	movs	r6, #0
 8001dc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001dcc:	f1b9 0901 	subs.w	r9, r9, #1
 8001dd0:	d505      	bpl.n	8001dde <_fwalk_sglue+0x22>
 8001dd2:	6824      	ldr	r4, [r4, #0]
 8001dd4:	2c00      	cmp	r4, #0
 8001dd6:	d1f7      	bne.n	8001dc8 <_fwalk_sglue+0xc>
 8001dd8:	4630      	mov	r0, r6
 8001dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001dde:	89ab      	ldrh	r3, [r5, #12]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d907      	bls.n	8001df4 <_fwalk_sglue+0x38>
 8001de4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001de8:	3301      	adds	r3, #1
 8001dea:	d003      	beq.n	8001df4 <_fwalk_sglue+0x38>
 8001dec:	4629      	mov	r1, r5
 8001dee:	4638      	mov	r0, r7
 8001df0:	47c0      	blx	r8
 8001df2:	4306      	orrs	r6, r0
 8001df4:	3568      	adds	r5, #104	@ 0x68
 8001df6:	e7e9      	b.n	8001dcc <_fwalk_sglue+0x10>

08001df8 <_puts_r>:
 8001df8:	6a03      	ldr	r3, [r0, #32]
 8001dfa:	b570      	push	{r4, r5, r6, lr}
 8001dfc:	6884      	ldr	r4, [r0, #8]
 8001dfe:	4605      	mov	r5, r0
 8001e00:	460e      	mov	r6, r1
 8001e02:	b90b      	cbnz	r3, 8001e08 <_puts_r+0x10>
 8001e04:	f7ff ffc2 	bl	8001d8c <__sinit>
 8001e08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001e0a:	07db      	lsls	r3, r3, #31
 8001e0c:	d405      	bmi.n	8001e1a <_puts_r+0x22>
 8001e0e:	89a3      	ldrh	r3, [r4, #12]
 8001e10:	0598      	lsls	r0, r3, #22
 8001e12:	d402      	bmi.n	8001e1a <_puts_r+0x22>
 8001e14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001e16:	f000 f99e 	bl	8002156 <__retarget_lock_acquire_recursive>
 8001e1a:	89a3      	ldrh	r3, [r4, #12]
 8001e1c:	0719      	lsls	r1, r3, #28
 8001e1e:	d502      	bpl.n	8001e26 <_puts_r+0x2e>
 8001e20:	6923      	ldr	r3, [r4, #16]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d135      	bne.n	8001e92 <_puts_r+0x9a>
 8001e26:	4621      	mov	r1, r4
 8001e28:	4628      	mov	r0, r5
 8001e2a:	f000 f8c5 	bl	8001fb8 <__swsetup_r>
 8001e2e:	b380      	cbz	r0, 8001e92 <_puts_r+0x9a>
 8001e30:	f04f 35ff 	mov.w	r5, #4294967295
 8001e34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001e36:	07da      	lsls	r2, r3, #31
 8001e38:	d405      	bmi.n	8001e46 <_puts_r+0x4e>
 8001e3a:	89a3      	ldrh	r3, [r4, #12]
 8001e3c:	059b      	lsls	r3, r3, #22
 8001e3e:	d402      	bmi.n	8001e46 <_puts_r+0x4e>
 8001e40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001e42:	f000 f989 	bl	8002158 <__retarget_lock_release_recursive>
 8001e46:	4628      	mov	r0, r5
 8001e48:	bd70      	pop	{r4, r5, r6, pc}
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	da04      	bge.n	8001e58 <_puts_r+0x60>
 8001e4e:	69a2      	ldr	r2, [r4, #24]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	dc17      	bgt.n	8001e84 <_puts_r+0x8c>
 8001e54:	290a      	cmp	r1, #10
 8001e56:	d015      	beq.n	8001e84 <_puts_r+0x8c>
 8001e58:	6823      	ldr	r3, [r4, #0]
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	6022      	str	r2, [r4, #0]
 8001e5e:	7019      	strb	r1, [r3, #0]
 8001e60:	68a3      	ldr	r3, [r4, #8]
 8001e62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001e66:	3b01      	subs	r3, #1
 8001e68:	60a3      	str	r3, [r4, #8]
 8001e6a:	2900      	cmp	r1, #0
 8001e6c:	d1ed      	bne.n	8001e4a <_puts_r+0x52>
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	da11      	bge.n	8001e96 <_puts_r+0x9e>
 8001e72:	4622      	mov	r2, r4
 8001e74:	210a      	movs	r1, #10
 8001e76:	4628      	mov	r0, r5
 8001e78:	f000 f85f 	bl	8001f3a <__swbuf_r>
 8001e7c:	3001      	adds	r0, #1
 8001e7e:	d0d7      	beq.n	8001e30 <_puts_r+0x38>
 8001e80:	250a      	movs	r5, #10
 8001e82:	e7d7      	b.n	8001e34 <_puts_r+0x3c>
 8001e84:	4622      	mov	r2, r4
 8001e86:	4628      	mov	r0, r5
 8001e88:	f000 f857 	bl	8001f3a <__swbuf_r>
 8001e8c:	3001      	adds	r0, #1
 8001e8e:	d1e7      	bne.n	8001e60 <_puts_r+0x68>
 8001e90:	e7ce      	b.n	8001e30 <_puts_r+0x38>
 8001e92:	3e01      	subs	r6, #1
 8001e94:	e7e4      	b.n	8001e60 <_puts_r+0x68>
 8001e96:	6823      	ldr	r3, [r4, #0]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	6022      	str	r2, [r4, #0]
 8001e9c:	220a      	movs	r2, #10
 8001e9e:	701a      	strb	r2, [r3, #0]
 8001ea0:	e7ee      	b.n	8001e80 <_puts_r+0x88>
	...

08001ea4 <puts>:
 8001ea4:	4b02      	ldr	r3, [pc, #8]	@ (8001eb0 <puts+0xc>)
 8001ea6:	4601      	mov	r1, r0
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	f7ff bfa5 	b.w	8001df8 <_puts_r>
 8001eae:	bf00      	nop
 8001eb0:	20000018 	.word	0x20000018

08001eb4 <__sread>:
 8001eb4:	b510      	push	{r4, lr}
 8001eb6:	460c      	mov	r4, r1
 8001eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ebc:	f000 f8fc 	bl	80020b8 <_read_r>
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	bfab      	itete	ge
 8001ec4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8001ec8:	181b      	addge	r3, r3, r0
 8001eca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001ece:	bfac      	ite	ge
 8001ed0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001ed2:	81a3      	strhlt	r3, [r4, #12]
 8001ed4:	bd10      	pop	{r4, pc}

08001ed6 <__swrite>:
 8001ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eda:	461f      	mov	r7, r3
 8001edc:	898b      	ldrh	r3, [r1, #12]
 8001ede:	05db      	lsls	r3, r3, #23
 8001ee0:	4605      	mov	r5, r0
 8001ee2:	460c      	mov	r4, r1
 8001ee4:	4616      	mov	r6, r2
 8001ee6:	d505      	bpl.n	8001ef4 <__swrite+0x1e>
 8001ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001eec:	2302      	movs	r3, #2
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f000 f8d0 	bl	8002094 <_lseek_r>
 8001ef4:	89a3      	ldrh	r3, [r4, #12]
 8001ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001efa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001efe:	81a3      	strh	r3, [r4, #12]
 8001f00:	4632      	mov	r2, r6
 8001f02:	463b      	mov	r3, r7
 8001f04:	4628      	mov	r0, r5
 8001f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f0a:	f000 b8e7 	b.w	80020dc <_write_r>

08001f0e <__sseek>:
 8001f0e:	b510      	push	{r4, lr}
 8001f10:	460c      	mov	r4, r1
 8001f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f16:	f000 f8bd 	bl	8002094 <_lseek_r>
 8001f1a:	1c43      	adds	r3, r0, #1
 8001f1c:	89a3      	ldrh	r3, [r4, #12]
 8001f1e:	bf15      	itete	ne
 8001f20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001f22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001f26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001f2a:	81a3      	strheq	r3, [r4, #12]
 8001f2c:	bf18      	it	ne
 8001f2e:	81a3      	strhne	r3, [r4, #12]
 8001f30:	bd10      	pop	{r4, pc}

08001f32 <__sclose>:
 8001f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f36:	f000 b89d 	b.w	8002074 <_close_r>

08001f3a <__swbuf_r>:
 8001f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f3c:	460e      	mov	r6, r1
 8001f3e:	4614      	mov	r4, r2
 8001f40:	4605      	mov	r5, r0
 8001f42:	b118      	cbz	r0, 8001f4c <__swbuf_r+0x12>
 8001f44:	6a03      	ldr	r3, [r0, #32]
 8001f46:	b90b      	cbnz	r3, 8001f4c <__swbuf_r+0x12>
 8001f48:	f7ff ff20 	bl	8001d8c <__sinit>
 8001f4c:	69a3      	ldr	r3, [r4, #24]
 8001f4e:	60a3      	str	r3, [r4, #8]
 8001f50:	89a3      	ldrh	r3, [r4, #12]
 8001f52:	071a      	lsls	r2, r3, #28
 8001f54:	d501      	bpl.n	8001f5a <__swbuf_r+0x20>
 8001f56:	6923      	ldr	r3, [r4, #16]
 8001f58:	b943      	cbnz	r3, 8001f6c <__swbuf_r+0x32>
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	4628      	mov	r0, r5
 8001f5e:	f000 f82b 	bl	8001fb8 <__swsetup_r>
 8001f62:	b118      	cbz	r0, 8001f6c <__swbuf_r+0x32>
 8001f64:	f04f 37ff 	mov.w	r7, #4294967295
 8001f68:	4638      	mov	r0, r7
 8001f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f6c:	6823      	ldr	r3, [r4, #0]
 8001f6e:	6922      	ldr	r2, [r4, #16]
 8001f70:	1a98      	subs	r0, r3, r2
 8001f72:	6963      	ldr	r3, [r4, #20]
 8001f74:	b2f6      	uxtb	r6, r6
 8001f76:	4283      	cmp	r3, r0
 8001f78:	4637      	mov	r7, r6
 8001f7a:	dc05      	bgt.n	8001f88 <__swbuf_r+0x4e>
 8001f7c:	4621      	mov	r1, r4
 8001f7e:	4628      	mov	r0, r5
 8001f80:	f000 fa68 	bl	8002454 <_fflush_r>
 8001f84:	2800      	cmp	r0, #0
 8001f86:	d1ed      	bne.n	8001f64 <__swbuf_r+0x2a>
 8001f88:	68a3      	ldr	r3, [r4, #8]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	60a3      	str	r3, [r4, #8]
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	6022      	str	r2, [r4, #0]
 8001f94:	701e      	strb	r6, [r3, #0]
 8001f96:	6962      	ldr	r2, [r4, #20]
 8001f98:	1c43      	adds	r3, r0, #1
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d004      	beq.n	8001fa8 <__swbuf_r+0x6e>
 8001f9e:	89a3      	ldrh	r3, [r4, #12]
 8001fa0:	07db      	lsls	r3, r3, #31
 8001fa2:	d5e1      	bpl.n	8001f68 <__swbuf_r+0x2e>
 8001fa4:	2e0a      	cmp	r6, #10
 8001fa6:	d1df      	bne.n	8001f68 <__swbuf_r+0x2e>
 8001fa8:	4621      	mov	r1, r4
 8001faa:	4628      	mov	r0, r5
 8001fac:	f000 fa52 	bl	8002454 <_fflush_r>
 8001fb0:	2800      	cmp	r0, #0
 8001fb2:	d0d9      	beq.n	8001f68 <__swbuf_r+0x2e>
 8001fb4:	e7d6      	b.n	8001f64 <__swbuf_r+0x2a>
	...

08001fb8 <__swsetup_r>:
 8001fb8:	b538      	push	{r3, r4, r5, lr}
 8001fba:	4b29      	ldr	r3, [pc, #164]	@ (8002060 <__swsetup_r+0xa8>)
 8001fbc:	4605      	mov	r5, r0
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	460c      	mov	r4, r1
 8001fc2:	b118      	cbz	r0, 8001fcc <__swsetup_r+0x14>
 8001fc4:	6a03      	ldr	r3, [r0, #32]
 8001fc6:	b90b      	cbnz	r3, 8001fcc <__swsetup_r+0x14>
 8001fc8:	f7ff fee0 	bl	8001d8c <__sinit>
 8001fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fd0:	0719      	lsls	r1, r3, #28
 8001fd2:	d422      	bmi.n	800201a <__swsetup_r+0x62>
 8001fd4:	06da      	lsls	r2, r3, #27
 8001fd6:	d407      	bmi.n	8001fe8 <__swsetup_r+0x30>
 8001fd8:	2209      	movs	r2, #9
 8001fda:	602a      	str	r2, [r5, #0]
 8001fdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fe0:	81a3      	strh	r3, [r4, #12]
 8001fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe6:	e033      	b.n	8002050 <__swsetup_r+0x98>
 8001fe8:	0758      	lsls	r0, r3, #29
 8001fea:	d512      	bpl.n	8002012 <__swsetup_r+0x5a>
 8001fec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001fee:	b141      	cbz	r1, 8002002 <__swsetup_r+0x4a>
 8001ff0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001ff4:	4299      	cmp	r1, r3
 8001ff6:	d002      	beq.n	8001ffe <__swsetup_r+0x46>
 8001ff8:	4628      	mov	r0, r5
 8001ffa:	f000 f8af 	bl	800215c <_free_r>
 8001ffe:	2300      	movs	r3, #0
 8002000:	6363      	str	r3, [r4, #52]	@ 0x34
 8002002:	89a3      	ldrh	r3, [r4, #12]
 8002004:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002008:	81a3      	strh	r3, [r4, #12]
 800200a:	2300      	movs	r3, #0
 800200c:	6063      	str	r3, [r4, #4]
 800200e:	6923      	ldr	r3, [r4, #16]
 8002010:	6023      	str	r3, [r4, #0]
 8002012:	89a3      	ldrh	r3, [r4, #12]
 8002014:	f043 0308 	orr.w	r3, r3, #8
 8002018:	81a3      	strh	r3, [r4, #12]
 800201a:	6923      	ldr	r3, [r4, #16]
 800201c:	b94b      	cbnz	r3, 8002032 <__swsetup_r+0x7a>
 800201e:	89a3      	ldrh	r3, [r4, #12]
 8002020:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002028:	d003      	beq.n	8002032 <__swsetup_r+0x7a>
 800202a:	4621      	mov	r1, r4
 800202c:	4628      	mov	r0, r5
 800202e:	f000 fa5f 	bl	80024f0 <__smakebuf_r>
 8002032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002036:	f013 0201 	ands.w	r2, r3, #1
 800203a:	d00a      	beq.n	8002052 <__swsetup_r+0x9a>
 800203c:	2200      	movs	r2, #0
 800203e:	60a2      	str	r2, [r4, #8]
 8002040:	6962      	ldr	r2, [r4, #20]
 8002042:	4252      	negs	r2, r2
 8002044:	61a2      	str	r2, [r4, #24]
 8002046:	6922      	ldr	r2, [r4, #16]
 8002048:	b942      	cbnz	r2, 800205c <__swsetup_r+0xa4>
 800204a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800204e:	d1c5      	bne.n	8001fdc <__swsetup_r+0x24>
 8002050:	bd38      	pop	{r3, r4, r5, pc}
 8002052:	0799      	lsls	r1, r3, #30
 8002054:	bf58      	it	pl
 8002056:	6962      	ldrpl	r2, [r4, #20]
 8002058:	60a2      	str	r2, [r4, #8]
 800205a:	e7f4      	b.n	8002046 <__swsetup_r+0x8e>
 800205c:	2000      	movs	r0, #0
 800205e:	e7f7      	b.n	8002050 <__swsetup_r+0x98>
 8002060:	20000018 	.word	0x20000018

08002064 <memset>:
 8002064:	4402      	add	r2, r0
 8002066:	4603      	mov	r3, r0
 8002068:	4293      	cmp	r3, r2
 800206a:	d100      	bne.n	800206e <memset+0xa>
 800206c:	4770      	bx	lr
 800206e:	f803 1b01 	strb.w	r1, [r3], #1
 8002072:	e7f9      	b.n	8002068 <memset+0x4>

08002074 <_close_r>:
 8002074:	b538      	push	{r3, r4, r5, lr}
 8002076:	4d06      	ldr	r5, [pc, #24]	@ (8002090 <_close_r+0x1c>)
 8002078:	2300      	movs	r3, #0
 800207a:	4604      	mov	r4, r0
 800207c:	4608      	mov	r0, r1
 800207e:	602b      	str	r3, [r5, #0]
 8002080:	f7ff fd63 	bl	8001b4a <_close>
 8002084:	1c43      	adds	r3, r0, #1
 8002086:	d102      	bne.n	800208e <_close_r+0x1a>
 8002088:	682b      	ldr	r3, [r5, #0]
 800208a:	b103      	cbz	r3, 800208e <_close_r+0x1a>
 800208c:	6023      	str	r3, [r4, #0]
 800208e:	bd38      	pop	{r3, r4, r5, pc}
 8002090:	20000254 	.word	0x20000254

08002094 <_lseek_r>:
 8002094:	b538      	push	{r3, r4, r5, lr}
 8002096:	4d07      	ldr	r5, [pc, #28]	@ (80020b4 <_lseek_r+0x20>)
 8002098:	4604      	mov	r4, r0
 800209a:	4608      	mov	r0, r1
 800209c:	4611      	mov	r1, r2
 800209e:	2200      	movs	r2, #0
 80020a0:	602a      	str	r2, [r5, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	f7ff fd78 	bl	8001b98 <_lseek>
 80020a8:	1c43      	adds	r3, r0, #1
 80020aa:	d102      	bne.n	80020b2 <_lseek_r+0x1e>
 80020ac:	682b      	ldr	r3, [r5, #0]
 80020ae:	b103      	cbz	r3, 80020b2 <_lseek_r+0x1e>
 80020b0:	6023      	str	r3, [r4, #0]
 80020b2:	bd38      	pop	{r3, r4, r5, pc}
 80020b4:	20000254 	.word	0x20000254

080020b8 <_read_r>:
 80020b8:	b538      	push	{r3, r4, r5, lr}
 80020ba:	4d07      	ldr	r5, [pc, #28]	@ (80020d8 <_read_r+0x20>)
 80020bc:	4604      	mov	r4, r0
 80020be:	4608      	mov	r0, r1
 80020c0:	4611      	mov	r1, r2
 80020c2:	2200      	movs	r2, #0
 80020c4:	602a      	str	r2, [r5, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	f7ff fd06 	bl	8001ad8 <_read>
 80020cc:	1c43      	adds	r3, r0, #1
 80020ce:	d102      	bne.n	80020d6 <_read_r+0x1e>
 80020d0:	682b      	ldr	r3, [r5, #0]
 80020d2:	b103      	cbz	r3, 80020d6 <_read_r+0x1e>
 80020d4:	6023      	str	r3, [r4, #0]
 80020d6:	bd38      	pop	{r3, r4, r5, pc}
 80020d8:	20000254 	.word	0x20000254

080020dc <_write_r>:
 80020dc:	b538      	push	{r3, r4, r5, lr}
 80020de:	4d07      	ldr	r5, [pc, #28]	@ (80020fc <_write_r+0x20>)
 80020e0:	4604      	mov	r4, r0
 80020e2:	4608      	mov	r0, r1
 80020e4:	4611      	mov	r1, r2
 80020e6:	2200      	movs	r2, #0
 80020e8:	602a      	str	r2, [r5, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	f7ff fd11 	bl	8001b12 <_write>
 80020f0:	1c43      	adds	r3, r0, #1
 80020f2:	d102      	bne.n	80020fa <_write_r+0x1e>
 80020f4:	682b      	ldr	r3, [r5, #0]
 80020f6:	b103      	cbz	r3, 80020fa <_write_r+0x1e>
 80020f8:	6023      	str	r3, [r4, #0]
 80020fa:	bd38      	pop	{r3, r4, r5, pc}
 80020fc:	20000254 	.word	0x20000254

08002100 <__errno>:
 8002100:	4b01      	ldr	r3, [pc, #4]	@ (8002108 <__errno+0x8>)
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000018 	.word	0x20000018

0800210c <__libc_init_array>:
 800210c:	b570      	push	{r4, r5, r6, lr}
 800210e:	4d0d      	ldr	r5, [pc, #52]	@ (8002144 <__libc_init_array+0x38>)
 8002110:	4c0d      	ldr	r4, [pc, #52]	@ (8002148 <__libc_init_array+0x3c>)
 8002112:	1b64      	subs	r4, r4, r5
 8002114:	10a4      	asrs	r4, r4, #2
 8002116:	2600      	movs	r6, #0
 8002118:	42a6      	cmp	r6, r4
 800211a:	d109      	bne.n	8002130 <__libc_init_array+0x24>
 800211c:	4d0b      	ldr	r5, [pc, #44]	@ (800214c <__libc_init_array+0x40>)
 800211e:	4c0c      	ldr	r4, [pc, #48]	@ (8002150 <__libc_init_array+0x44>)
 8002120:	f000 fa54 	bl	80025cc <_init>
 8002124:	1b64      	subs	r4, r4, r5
 8002126:	10a4      	asrs	r4, r4, #2
 8002128:	2600      	movs	r6, #0
 800212a:	42a6      	cmp	r6, r4
 800212c:	d105      	bne.n	800213a <__libc_init_array+0x2e>
 800212e:	bd70      	pop	{r4, r5, r6, pc}
 8002130:	f855 3b04 	ldr.w	r3, [r5], #4
 8002134:	4798      	blx	r3
 8002136:	3601      	adds	r6, #1
 8002138:	e7ee      	b.n	8002118 <__libc_init_array+0xc>
 800213a:	f855 3b04 	ldr.w	r3, [r5], #4
 800213e:	4798      	blx	r3
 8002140:	3601      	adds	r6, #1
 8002142:	e7f2      	b.n	800212a <__libc_init_array+0x1e>
 8002144:	08002638 	.word	0x08002638
 8002148:	08002638 	.word	0x08002638
 800214c:	08002638 	.word	0x08002638
 8002150:	0800263c 	.word	0x0800263c

08002154 <__retarget_lock_init_recursive>:
 8002154:	4770      	bx	lr

08002156 <__retarget_lock_acquire_recursive>:
 8002156:	4770      	bx	lr

08002158 <__retarget_lock_release_recursive>:
 8002158:	4770      	bx	lr
	...

0800215c <_free_r>:
 800215c:	b538      	push	{r3, r4, r5, lr}
 800215e:	4605      	mov	r5, r0
 8002160:	2900      	cmp	r1, #0
 8002162:	d041      	beq.n	80021e8 <_free_r+0x8c>
 8002164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002168:	1f0c      	subs	r4, r1, #4
 800216a:	2b00      	cmp	r3, #0
 800216c:	bfb8      	it	lt
 800216e:	18e4      	addlt	r4, r4, r3
 8002170:	f000 f8e0 	bl	8002334 <__malloc_lock>
 8002174:	4a1d      	ldr	r2, [pc, #116]	@ (80021ec <_free_r+0x90>)
 8002176:	6813      	ldr	r3, [r2, #0]
 8002178:	b933      	cbnz	r3, 8002188 <_free_r+0x2c>
 800217a:	6063      	str	r3, [r4, #4]
 800217c:	6014      	str	r4, [r2, #0]
 800217e:	4628      	mov	r0, r5
 8002180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002184:	f000 b8dc 	b.w	8002340 <__malloc_unlock>
 8002188:	42a3      	cmp	r3, r4
 800218a:	d908      	bls.n	800219e <_free_r+0x42>
 800218c:	6820      	ldr	r0, [r4, #0]
 800218e:	1821      	adds	r1, r4, r0
 8002190:	428b      	cmp	r3, r1
 8002192:	bf01      	itttt	eq
 8002194:	6819      	ldreq	r1, [r3, #0]
 8002196:	685b      	ldreq	r3, [r3, #4]
 8002198:	1809      	addeq	r1, r1, r0
 800219a:	6021      	streq	r1, [r4, #0]
 800219c:	e7ed      	b.n	800217a <_free_r+0x1e>
 800219e:	461a      	mov	r2, r3
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	b10b      	cbz	r3, 80021a8 <_free_r+0x4c>
 80021a4:	42a3      	cmp	r3, r4
 80021a6:	d9fa      	bls.n	800219e <_free_r+0x42>
 80021a8:	6811      	ldr	r1, [r2, #0]
 80021aa:	1850      	adds	r0, r2, r1
 80021ac:	42a0      	cmp	r0, r4
 80021ae:	d10b      	bne.n	80021c8 <_free_r+0x6c>
 80021b0:	6820      	ldr	r0, [r4, #0]
 80021b2:	4401      	add	r1, r0
 80021b4:	1850      	adds	r0, r2, r1
 80021b6:	4283      	cmp	r3, r0
 80021b8:	6011      	str	r1, [r2, #0]
 80021ba:	d1e0      	bne.n	800217e <_free_r+0x22>
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	6053      	str	r3, [r2, #4]
 80021c2:	4408      	add	r0, r1
 80021c4:	6010      	str	r0, [r2, #0]
 80021c6:	e7da      	b.n	800217e <_free_r+0x22>
 80021c8:	d902      	bls.n	80021d0 <_free_r+0x74>
 80021ca:	230c      	movs	r3, #12
 80021cc:	602b      	str	r3, [r5, #0]
 80021ce:	e7d6      	b.n	800217e <_free_r+0x22>
 80021d0:	6820      	ldr	r0, [r4, #0]
 80021d2:	1821      	adds	r1, r4, r0
 80021d4:	428b      	cmp	r3, r1
 80021d6:	bf04      	itt	eq
 80021d8:	6819      	ldreq	r1, [r3, #0]
 80021da:	685b      	ldreq	r3, [r3, #4]
 80021dc:	6063      	str	r3, [r4, #4]
 80021de:	bf04      	itt	eq
 80021e0:	1809      	addeq	r1, r1, r0
 80021e2:	6021      	streq	r1, [r4, #0]
 80021e4:	6054      	str	r4, [r2, #4]
 80021e6:	e7ca      	b.n	800217e <_free_r+0x22>
 80021e8:	bd38      	pop	{r3, r4, r5, pc}
 80021ea:	bf00      	nop
 80021ec:	20000260 	.word	0x20000260

080021f0 <sbrk_aligned>:
 80021f0:	b570      	push	{r4, r5, r6, lr}
 80021f2:	4e0f      	ldr	r6, [pc, #60]	@ (8002230 <sbrk_aligned+0x40>)
 80021f4:	460c      	mov	r4, r1
 80021f6:	6831      	ldr	r1, [r6, #0]
 80021f8:	4605      	mov	r5, r0
 80021fa:	b911      	cbnz	r1, 8002202 <sbrk_aligned+0x12>
 80021fc:	f000 f9d6 	bl	80025ac <_sbrk_r>
 8002200:	6030      	str	r0, [r6, #0]
 8002202:	4621      	mov	r1, r4
 8002204:	4628      	mov	r0, r5
 8002206:	f000 f9d1 	bl	80025ac <_sbrk_r>
 800220a:	1c43      	adds	r3, r0, #1
 800220c:	d103      	bne.n	8002216 <sbrk_aligned+0x26>
 800220e:	f04f 34ff 	mov.w	r4, #4294967295
 8002212:	4620      	mov	r0, r4
 8002214:	bd70      	pop	{r4, r5, r6, pc}
 8002216:	1cc4      	adds	r4, r0, #3
 8002218:	f024 0403 	bic.w	r4, r4, #3
 800221c:	42a0      	cmp	r0, r4
 800221e:	d0f8      	beq.n	8002212 <sbrk_aligned+0x22>
 8002220:	1a21      	subs	r1, r4, r0
 8002222:	4628      	mov	r0, r5
 8002224:	f000 f9c2 	bl	80025ac <_sbrk_r>
 8002228:	3001      	adds	r0, #1
 800222a:	d1f2      	bne.n	8002212 <sbrk_aligned+0x22>
 800222c:	e7ef      	b.n	800220e <sbrk_aligned+0x1e>
 800222e:	bf00      	nop
 8002230:	2000025c 	.word	0x2000025c

08002234 <_malloc_r>:
 8002234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002238:	1ccd      	adds	r5, r1, #3
 800223a:	f025 0503 	bic.w	r5, r5, #3
 800223e:	3508      	adds	r5, #8
 8002240:	2d0c      	cmp	r5, #12
 8002242:	bf38      	it	cc
 8002244:	250c      	movcc	r5, #12
 8002246:	2d00      	cmp	r5, #0
 8002248:	4606      	mov	r6, r0
 800224a:	db01      	blt.n	8002250 <_malloc_r+0x1c>
 800224c:	42a9      	cmp	r1, r5
 800224e:	d904      	bls.n	800225a <_malloc_r+0x26>
 8002250:	230c      	movs	r3, #12
 8002252:	6033      	str	r3, [r6, #0]
 8002254:	2000      	movs	r0, #0
 8002256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800225a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002330 <_malloc_r+0xfc>
 800225e:	f000 f869 	bl	8002334 <__malloc_lock>
 8002262:	f8d8 3000 	ldr.w	r3, [r8]
 8002266:	461c      	mov	r4, r3
 8002268:	bb44      	cbnz	r4, 80022bc <_malloc_r+0x88>
 800226a:	4629      	mov	r1, r5
 800226c:	4630      	mov	r0, r6
 800226e:	f7ff ffbf 	bl	80021f0 <sbrk_aligned>
 8002272:	1c43      	adds	r3, r0, #1
 8002274:	4604      	mov	r4, r0
 8002276:	d158      	bne.n	800232a <_malloc_r+0xf6>
 8002278:	f8d8 4000 	ldr.w	r4, [r8]
 800227c:	4627      	mov	r7, r4
 800227e:	2f00      	cmp	r7, #0
 8002280:	d143      	bne.n	800230a <_malloc_r+0xd6>
 8002282:	2c00      	cmp	r4, #0
 8002284:	d04b      	beq.n	800231e <_malloc_r+0xea>
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	4639      	mov	r1, r7
 800228a:	4630      	mov	r0, r6
 800228c:	eb04 0903 	add.w	r9, r4, r3
 8002290:	f000 f98c 	bl	80025ac <_sbrk_r>
 8002294:	4581      	cmp	r9, r0
 8002296:	d142      	bne.n	800231e <_malloc_r+0xea>
 8002298:	6821      	ldr	r1, [r4, #0]
 800229a:	1a6d      	subs	r5, r5, r1
 800229c:	4629      	mov	r1, r5
 800229e:	4630      	mov	r0, r6
 80022a0:	f7ff ffa6 	bl	80021f0 <sbrk_aligned>
 80022a4:	3001      	adds	r0, #1
 80022a6:	d03a      	beq.n	800231e <_malloc_r+0xea>
 80022a8:	6823      	ldr	r3, [r4, #0]
 80022aa:	442b      	add	r3, r5
 80022ac:	6023      	str	r3, [r4, #0]
 80022ae:	f8d8 3000 	ldr.w	r3, [r8]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	bb62      	cbnz	r2, 8002310 <_malloc_r+0xdc>
 80022b6:	f8c8 7000 	str.w	r7, [r8]
 80022ba:	e00f      	b.n	80022dc <_malloc_r+0xa8>
 80022bc:	6822      	ldr	r2, [r4, #0]
 80022be:	1b52      	subs	r2, r2, r5
 80022c0:	d420      	bmi.n	8002304 <_malloc_r+0xd0>
 80022c2:	2a0b      	cmp	r2, #11
 80022c4:	d917      	bls.n	80022f6 <_malloc_r+0xc2>
 80022c6:	1961      	adds	r1, r4, r5
 80022c8:	42a3      	cmp	r3, r4
 80022ca:	6025      	str	r5, [r4, #0]
 80022cc:	bf18      	it	ne
 80022ce:	6059      	strne	r1, [r3, #4]
 80022d0:	6863      	ldr	r3, [r4, #4]
 80022d2:	bf08      	it	eq
 80022d4:	f8c8 1000 	streq.w	r1, [r8]
 80022d8:	5162      	str	r2, [r4, r5]
 80022da:	604b      	str	r3, [r1, #4]
 80022dc:	4630      	mov	r0, r6
 80022de:	f000 f82f 	bl	8002340 <__malloc_unlock>
 80022e2:	f104 000b 	add.w	r0, r4, #11
 80022e6:	1d23      	adds	r3, r4, #4
 80022e8:	f020 0007 	bic.w	r0, r0, #7
 80022ec:	1ac2      	subs	r2, r0, r3
 80022ee:	bf1c      	itt	ne
 80022f0:	1a1b      	subne	r3, r3, r0
 80022f2:	50a3      	strne	r3, [r4, r2]
 80022f4:	e7af      	b.n	8002256 <_malloc_r+0x22>
 80022f6:	6862      	ldr	r2, [r4, #4]
 80022f8:	42a3      	cmp	r3, r4
 80022fa:	bf0c      	ite	eq
 80022fc:	f8c8 2000 	streq.w	r2, [r8]
 8002300:	605a      	strne	r2, [r3, #4]
 8002302:	e7eb      	b.n	80022dc <_malloc_r+0xa8>
 8002304:	4623      	mov	r3, r4
 8002306:	6864      	ldr	r4, [r4, #4]
 8002308:	e7ae      	b.n	8002268 <_malloc_r+0x34>
 800230a:	463c      	mov	r4, r7
 800230c:	687f      	ldr	r7, [r7, #4]
 800230e:	e7b6      	b.n	800227e <_malloc_r+0x4a>
 8002310:	461a      	mov	r2, r3
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	42a3      	cmp	r3, r4
 8002316:	d1fb      	bne.n	8002310 <_malloc_r+0xdc>
 8002318:	2300      	movs	r3, #0
 800231a:	6053      	str	r3, [r2, #4]
 800231c:	e7de      	b.n	80022dc <_malloc_r+0xa8>
 800231e:	230c      	movs	r3, #12
 8002320:	6033      	str	r3, [r6, #0]
 8002322:	4630      	mov	r0, r6
 8002324:	f000 f80c 	bl	8002340 <__malloc_unlock>
 8002328:	e794      	b.n	8002254 <_malloc_r+0x20>
 800232a:	6005      	str	r5, [r0, #0]
 800232c:	e7d6      	b.n	80022dc <_malloc_r+0xa8>
 800232e:	bf00      	nop
 8002330:	20000260 	.word	0x20000260

08002334 <__malloc_lock>:
 8002334:	4801      	ldr	r0, [pc, #4]	@ (800233c <__malloc_lock+0x8>)
 8002336:	f7ff bf0e 	b.w	8002156 <__retarget_lock_acquire_recursive>
 800233a:	bf00      	nop
 800233c:	20000258 	.word	0x20000258

08002340 <__malloc_unlock>:
 8002340:	4801      	ldr	r0, [pc, #4]	@ (8002348 <__malloc_unlock+0x8>)
 8002342:	f7ff bf09 	b.w	8002158 <__retarget_lock_release_recursive>
 8002346:	bf00      	nop
 8002348:	20000258 	.word	0x20000258

0800234c <__sflush_r>:
 800234c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002354:	0716      	lsls	r6, r2, #28
 8002356:	4605      	mov	r5, r0
 8002358:	460c      	mov	r4, r1
 800235a:	d454      	bmi.n	8002406 <__sflush_r+0xba>
 800235c:	684b      	ldr	r3, [r1, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	dc02      	bgt.n	8002368 <__sflush_r+0x1c>
 8002362:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002364:	2b00      	cmp	r3, #0
 8002366:	dd48      	ble.n	80023fa <__sflush_r+0xae>
 8002368:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800236a:	2e00      	cmp	r6, #0
 800236c:	d045      	beq.n	80023fa <__sflush_r+0xae>
 800236e:	2300      	movs	r3, #0
 8002370:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002374:	682f      	ldr	r7, [r5, #0]
 8002376:	6a21      	ldr	r1, [r4, #32]
 8002378:	602b      	str	r3, [r5, #0]
 800237a:	d030      	beq.n	80023de <__sflush_r+0x92>
 800237c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800237e:	89a3      	ldrh	r3, [r4, #12]
 8002380:	0759      	lsls	r1, r3, #29
 8002382:	d505      	bpl.n	8002390 <__sflush_r+0x44>
 8002384:	6863      	ldr	r3, [r4, #4]
 8002386:	1ad2      	subs	r2, r2, r3
 8002388:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800238a:	b10b      	cbz	r3, 8002390 <__sflush_r+0x44>
 800238c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800238e:	1ad2      	subs	r2, r2, r3
 8002390:	2300      	movs	r3, #0
 8002392:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002394:	6a21      	ldr	r1, [r4, #32]
 8002396:	4628      	mov	r0, r5
 8002398:	47b0      	blx	r6
 800239a:	1c43      	adds	r3, r0, #1
 800239c:	89a3      	ldrh	r3, [r4, #12]
 800239e:	d106      	bne.n	80023ae <__sflush_r+0x62>
 80023a0:	6829      	ldr	r1, [r5, #0]
 80023a2:	291d      	cmp	r1, #29
 80023a4:	d82b      	bhi.n	80023fe <__sflush_r+0xb2>
 80023a6:	4a2a      	ldr	r2, [pc, #168]	@ (8002450 <__sflush_r+0x104>)
 80023a8:	40ca      	lsrs	r2, r1
 80023aa:	07d6      	lsls	r6, r2, #31
 80023ac:	d527      	bpl.n	80023fe <__sflush_r+0xb2>
 80023ae:	2200      	movs	r2, #0
 80023b0:	6062      	str	r2, [r4, #4]
 80023b2:	04d9      	lsls	r1, r3, #19
 80023b4:	6922      	ldr	r2, [r4, #16]
 80023b6:	6022      	str	r2, [r4, #0]
 80023b8:	d504      	bpl.n	80023c4 <__sflush_r+0x78>
 80023ba:	1c42      	adds	r2, r0, #1
 80023bc:	d101      	bne.n	80023c2 <__sflush_r+0x76>
 80023be:	682b      	ldr	r3, [r5, #0]
 80023c0:	b903      	cbnz	r3, 80023c4 <__sflush_r+0x78>
 80023c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80023c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80023c6:	602f      	str	r7, [r5, #0]
 80023c8:	b1b9      	cbz	r1, 80023fa <__sflush_r+0xae>
 80023ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80023ce:	4299      	cmp	r1, r3
 80023d0:	d002      	beq.n	80023d8 <__sflush_r+0x8c>
 80023d2:	4628      	mov	r0, r5
 80023d4:	f7ff fec2 	bl	800215c <_free_r>
 80023d8:	2300      	movs	r3, #0
 80023da:	6363      	str	r3, [r4, #52]	@ 0x34
 80023dc:	e00d      	b.n	80023fa <__sflush_r+0xae>
 80023de:	2301      	movs	r3, #1
 80023e0:	4628      	mov	r0, r5
 80023e2:	47b0      	blx	r6
 80023e4:	4602      	mov	r2, r0
 80023e6:	1c50      	adds	r0, r2, #1
 80023e8:	d1c9      	bne.n	800237e <__sflush_r+0x32>
 80023ea:	682b      	ldr	r3, [r5, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0c6      	beq.n	800237e <__sflush_r+0x32>
 80023f0:	2b1d      	cmp	r3, #29
 80023f2:	d001      	beq.n	80023f8 <__sflush_r+0xac>
 80023f4:	2b16      	cmp	r3, #22
 80023f6:	d11e      	bne.n	8002436 <__sflush_r+0xea>
 80023f8:	602f      	str	r7, [r5, #0]
 80023fa:	2000      	movs	r0, #0
 80023fc:	e022      	b.n	8002444 <__sflush_r+0xf8>
 80023fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002402:	b21b      	sxth	r3, r3
 8002404:	e01b      	b.n	800243e <__sflush_r+0xf2>
 8002406:	690f      	ldr	r7, [r1, #16]
 8002408:	2f00      	cmp	r7, #0
 800240a:	d0f6      	beq.n	80023fa <__sflush_r+0xae>
 800240c:	0793      	lsls	r3, r2, #30
 800240e:	680e      	ldr	r6, [r1, #0]
 8002410:	bf08      	it	eq
 8002412:	694b      	ldreq	r3, [r1, #20]
 8002414:	600f      	str	r7, [r1, #0]
 8002416:	bf18      	it	ne
 8002418:	2300      	movne	r3, #0
 800241a:	eba6 0807 	sub.w	r8, r6, r7
 800241e:	608b      	str	r3, [r1, #8]
 8002420:	f1b8 0f00 	cmp.w	r8, #0
 8002424:	dde9      	ble.n	80023fa <__sflush_r+0xae>
 8002426:	6a21      	ldr	r1, [r4, #32]
 8002428:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800242a:	4643      	mov	r3, r8
 800242c:	463a      	mov	r2, r7
 800242e:	4628      	mov	r0, r5
 8002430:	47b0      	blx	r6
 8002432:	2800      	cmp	r0, #0
 8002434:	dc08      	bgt.n	8002448 <__sflush_r+0xfc>
 8002436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800243a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800243e:	81a3      	strh	r3, [r4, #12]
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002448:	4407      	add	r7, r0
 800244a:	eba8 0800 	sub.w	r8, r8, r0
 800244e:	e7e7      	b.n	8002420 <__sflush_r+0xd4>
 8002450:	20400001 	.word	0x20400001

08002454 <_fflush_r>:
 8002454:	b538      	push	{r3, r4, r5, lr}
 8002456:	690b      	ldr	r3, [r1, #16]
 8002458:	4605      	mov	r5, r0
 800245a:	460c      	mov	r4, r1
 800245c:	b913      	cbnz	r3, 8002464 <_fflush_r+0x10>
 800245e:	2500      	movs	r5, #0
 8002460:	4628      	mov	r0, r5
 8002462:	bd38      	pop	{r3, r4, r5, pc}
 8002464:	b118      	cbz	r0, 800246e <_fflush_r+0x1a>
 8002466:	6a03      	ldr	r3, [r0, #32]
 8002468:	b90b      	cbnz	r3, 800246e <_fflush_r+0x1a>
 800246a:	f7ff fc8f 	bl	8001d8c <__sinit>
 800246e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f3      	beq.n	800245e <_fflush_r+0xa>
 8002476:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002478:	07d0      	lsls	r0, r2, #31
 800247a:	d404      	bmi.n	8002486 <_fflush_r+0x32>
 800247c:	0599      	lsls	r1, r3, #22
 800247e:	d402      	bmi.n	8002486 <_fflush_r+0x32>
 8002480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002482:	f7ff fe68 	bl	8002156 <__retarget_lock_acquire_recursive>
 8002486:	4628      	mov	r0, r5
 8002488:	4621      	mov	r1, r4
 800248a:	f7ff ff5f 	bl	800234c <__sflush_r>
 800248e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002490:	07da      	lsls	r2, r3, #31
 8002492:	4605      	mov	r5, r0
 8002494:	d4e4      	bmi.n	8002460 <_fflush_r+0xc>
 8002496:	89a3      	ldrh	r3, [r4, #12]
 8002498:	059b      	lsls	r3, r3, #22
 800249a:	d4e1      	bmi.n	8002460 <_fflush_r+0xc>
 800249c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800249e:	f7ff fe5b 	bl	8002158 <__retarget_lock_release_recursive>
 80024a2:	e7dd      	b.n	8002460 <_fflush_r+0xc>

080024a4 <__swhatbuf_r>:
 80024a4:	b570      	push	{r4, r5, r6, lr}
 80024a6:	460c      	mov	r4, r1
 80024a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024ac:	2900      	cmp	r1, #0
 80024ae:	b096      	sub	sp, #88	@ 0x58
 80024b0:	4615      	mov	r5, r2
 80024b2:	461e      	mov	r6, r3
 80024b4:	da0d      	bge.n	80024d2 <__swhatbuf_r+0x2e>
 80024b6:	89a3      	ldrh	r3, [r4, #12]
 80024b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80024bc:	f04f 0100 	mov.w	r1, #0
 80024c0:	bf14      	ite	ne
 80024c2:	2340      	movne	r3, #64	@ 0x40
 80024c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80024c8:	2000      	movs	r0, #0
 80024ca:	6031      	str	r1, [r6, #0]
 80024cc:	602b      	str	r3, [r5, #0]
 80024ce:	b016      	add	sp, #88	@ 0x58
 80024d0:	bd70      	pop	{r4, r5, r6, pc}
 80024d2:	466a      	mov	r2, sp
 80024d4:	f000 f848 	bl	8002568 <_fstat_r>
 80024d8:	2800      	cmp	r0, #0
 80024da:	dbec      	blt.n	80024b6 <__swhatbuf_r+0x12>
 80024dc:	9901      	ldr	r1, [sp, #4]
 80024de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80024e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80024e6:	4259      	negs	r1, r3
 80024e8:	4159      	adcs	r1, r3
 80024ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024ee:	e7eb      	b.n	80024c8 <__swhatbuf_r+0x24>

080024f0 <__smakebuf_r>:
 80024f0:	898b      	ldrh	r3, [r1, #12]
 80024f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024f4:	079d      	lsls	r5, r3, #30
 80024f6:	4606      	mov	r6, r0
 80024f8:	460c      	mov	r4, r1
 80024fa:	d507      	bpl.n	800250c <__smakebuf_r+0x1c>
 80024fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002500:	6023      	str	r3, [r4, #0]
 8002502:	6123      	str	r3, [r4, #16]
 8002504:	2301      	movs	r3, #1
 8002506:	6163      	str	r3, [r4, #20]
 8002508:	b003      	add	sp, #12
 800250a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800250c:	ab01      	add	r3, sp, #4
 800250e:	466a      	mov	r2, sp
 8002510:	f7ff ffc8 	bl	80024a4 <__swhatbuf_r>
 8002514:	9f00      	ldr	r7, [sp, #0]
 8002516:	4605      	mov	r5, r0
 8002518:	4639      	mov	r1, r7
 800251a:	4630      	mov	r0, r6
 800251c:	f7ff fe8a 	bl	8002234 <_malloc_r>
 8002520:	b948      	cbnz	r0, 8002536 <__smakebuf_r+0x46>
 8002522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002526:	059a      	lsls	r2, r3, #22
 8002528:	d4ee      	bmi.n	8002508 <__smakebuf_r+0x18>
 800252a:	f023 0303 	bic.w	r3, r3, #3
 800252e:	f043 0302 	orr.w	r3, r3, #2
 8002532:	81a3      	strh	r3, [r4, #12]
 8002534:	e7e2      	b.n	80024fc <__smakebuf_r+0xc>
 8002536:	89a3      	ldrh	r3, [r4, #12]
 8002538:	6020      	str	r0, [r4, #0]
 800253a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800253e:	81a3      	strh	r3, [r4, #12]
 8002540:	9b01      	ldr	r3, [sp, #4]
 8002542:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002546:	b15b      	cbz	r3, 8002560 <__smakebuf_r+0x70>
 8002548:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800254c:	4630      	mov	r0, r6
 800254e:	f000 f81d 	bl	800258c <_isatty_r>
 8002552:	b128      	cbz	r0, 8002560 <__smakebuf_r+0x70>
 8002554:	89a3      	ldrh	r3, [r4, #12]
 8002556:	f023 0303 	bic.w	r3, r3, #3
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	81a3      	strh	r3, [r4, #12]
 8002560:	89a3      	ldrh	r3, [r4, #12]
 8002562:	431d      	orrs	r5, r3
 8002564:	81a5      	strh	r5, [r4, #12]
 8002566:	e7cf      	b.n	8002508 <__smakebuf_r+0x18>

08002568 <_fstat_r>:
 8002568:	b538      	push	{r3, r4, r5, lr}
 800256a:	4d07      	ldr	r5, [pc, #28]	@ (8002588 <_fstat_r+0x20>)
 800256c:	2300      	movs	r3, #0
 800256e:	4604      	mov	r4, r0
 8002570:	4608      	mov	r0, r1
 8002572:	4611      	mov	r1, r2
 8002574:	602b      	str	r3, [r5, #0]
 8002576:	f7ff faf4 	bl	8001b62 <_fstat>
 800257a:	1c43      	adds	r3, r0, #1
 800257c:	d102      	bne.n	8002584 <_fstat_r+0x1c>
 800257e:	682b      	ldr	r3, [r5, #0]
 8002580:	b103      	cbz	r3, 8002584 <_fstat_r+0x1c>
 8002582:	6023      	str	r3, [r4, #0]
 8002584:	bd38      	pop	{r3, r4, r5, pc}
 8002586:	bf00      	nop
 8002588:	20000254 	.word	0x20000254

0800258c <_isatty_r>:
 800258c:	b538      	push	{r3, r4, r5, lr}
 800258e:	4d06      	ldr	r5, [pc, #24]	@ (80025a8 <_isatty_r+0x1c>)
 8002590:	2300      	movs	r3, #0
 8002592:	4604      	mov	r4, r0
 8002594:	4608      	mov	r0, r1
 8002596:	602b      	str	r3, [r5, #0]
 8002598:	f7ff faf3 	bl	8001b82 <_isatty>
 800259c:	1c43      	adds	r3, r0, #1
 800259e:	d102      	bne.n	80025a6 <_isatty_r+0x1a>
 80025a0:	682b      	ldr	r3, [r5, #0]
 80025a2:	b103      	cbz	r3, 80025a6 <_isatty_r+0x1a>
 80025a4:	6023      	str	r3, [r4, #0]
 80025a6:	bd38      	pop	{r3, r4, r5, pc}
 80025a8:	20000254 	.word	0x20000254

080025ac <_sbrk_r>:
 80025ac:	b538      	push	{r3, r4, r5, lr}
 80025ae:	4d06      	ldr	r5, [pc, #24]	@ (80025c8 <_sbrk_r+0x1c>)
 80025b0:	2300      	movs	r3, #0
 80025b2:	4604      	mov	r4, r0
 80025b4:	4608      	mov	r0, r1
 80025b6:	602b      	str	r3, [r5, #0]
 80025b8:	f7ff fafc 	bl	8001bb4 <_sbrk>
 80025bc:	1c43      	adds	r3, r0, #1
 80025be:	d102      	bne.n	80025c6 <_sbrk_r+0x1a>
 80025c0:	682b      	ldr	r3, [r5, #0]
 80025c2:	b103      	cbz	r3, 80025c6 <_sbrk_r+0x1a>
 80025c4:	6023      	str	r3, [r4, #0]
 80025c6:	bd38      	pop	{r3, r4, r5, pc}
 80025c8:	20000254 	.word	0x20000254

080025cc <_init>:
 80025cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ce:	bf00      	nop
 80025d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025d2:	bc08      	pop	{r3}
 80025d4:	469e      	mov	lr, r3
 80025d6:	4770      	bx	lr

080025d8 <_fini>:
 80025d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025da:	bf00      	nop
 80025dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025de:	bc08      	pop	{r3}
 80025e0:	469e      	mov	lr, r3
 80025e2:	4770      	bx	lr
