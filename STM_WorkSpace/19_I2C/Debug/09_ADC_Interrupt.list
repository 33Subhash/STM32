
09_ADC_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002310  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800249c  0800249c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800249c  0800249c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800249c  0800249c  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800249c  0800249c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800249c  0800249c  0000349c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024a0  080024a0  000034a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080024a4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          000000d4  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000e0  200000e0  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ba7f  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000180e  00000000  00000000  0000fabb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  000112d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c4  00000000  00000000  00011f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000014b7  00000000  00000000  00012934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e1ec  00000000  00000000  00013deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101e8a  00000000  00000000  00021fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123e61  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003680  00000000  00000000  00123ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00127524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002484 	.word	0x08002484

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002484 	.word	0x08002484

080001cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001d2:	2300      	movs	r3, #0
 80001d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d6:	2003      	movs	r0, #3
 80001d8:	f001 fd28 	bl	8001c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001dc:	200f      	movs	r0, #15
 80001de:	f000 f815 	bl	800020c <HAL_InitTick>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e8:	2301      	movs	r3, #1
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	e001      	b.n	80001f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ee:	f000 f805 	bl	80001fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001f2:	79fb      	ldrb	r3, [r7, #7]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
	...

0800020c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000214:	2300      	movs	r3, #0
 8000216:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000218:	4b17      	ldr	r3, [pc, #92]	@ (8000278 <HAL_InitTick+0x6c>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d023      	beq.n	8000268 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000220:	4b16      	ldr	r3, [pc, #88]	@ (800027c <HAL_InitTick+0x70>)
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	4b14      	ldr	r3, [pc, #80]	@ (8000278 <HAL_InitTick+0x6c>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	4619      	mov	r1, r3
 800022a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800022e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000232:	fbb2 f3f3 	udiv	r3, r2, r3
 8000236:	4618      	mov	r0, r3
 8000238:	f001 fd1f 	bl	8001c7a <HAL_SYSTICK_Config>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d10f      	bne.n	8000262 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b0f      	cmp	r3, #15
 8000246:	d809      	bhi.n	800025c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000248:	2200      	movs	r2, #0
 800024a:	6879      	ldr	r1, [r7, #4]
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	f001 fcf7 	bl	8001c42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000254:	4a0a      	ldr	r2, [pc, #40]	@ (8000280 <HAL_InitTick+0x74>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	6013      	str	r3, [r2, #0]
 800025a:	e007      	b.n	800026c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800025c:	2301      	movs	r3, #1
 800025e:	73fb      	strb	r3, [r7, #15]
 8000260:	e004      	b.n	800026c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000262:	2301      	movs	r3, #1
 8000264:	73fb      	strb	r3, [r7, #15]
 8000266:	e001      	b.n	800026c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000268:	2301      	movs	r3, #1
 800026a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800026c:	7bfb      	ldrb	r3, [r7, #15]
}
 800026e:	4618      	mov	r0, r3
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000004 	.word	0x20000004
 800027c:	20000008 	.word	0x20000008
 8000280:	20000000 	.word	0x20000000

08000284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000288:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <HAL_IncTick+0x20>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	461a      	mov	r2, r3
 800028e:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <HAL_IncTick+0x24>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4413      	add	r3, r2
 8000294:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <HAL_IncTick+0x24>)
 8000296:	6013      	str	r3, [r2, #0]
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000004 	.word	0x20000004
 80002a8:	20000028 	.word	0x20000028

080002ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  return uwTick;
 80002b0:	4b03      	ldr	r3, [pc, #12]	@ (80002c0 <HAL_GetTick+0x14>)
 80002b2:	681b      	ldr	r3, [r3, #0]
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	20000028 	.word	0x20000028

080002c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	431a      	orrs	r2, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	609a      	str	r2, [r3, #8]
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr

080002ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80002ea:	b480      	push	{r7}
 80002ec:	b083      	sub	sp, #12
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
 80002f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	431a      	orrs	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	609a      	str	r2, [r3, #8]
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000320:	4618      	mov	r0, r3
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr

0800032c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800032c:	b480      	push	{r7}
 800032e:	b087      	sub	sp, #28
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	607a      	str	r2, [r7, #4]
 8000338:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	3360      	adds	r3, #96	@ 0x60
 800033e:	461a      	mov	r2, r3
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	4413      	add	r3, r2
 8000346:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	4b08      	ldr	r3, [pc, #32]	@ (8000370 <LL_ADC_SetOffset+0x44>)
 800034e:	4013      	ands	r3, r2
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000356:	683a      	ldr	r2, [r7, #0]
 8000358:	430a      	orrs	r2, r1
 800035a:	4313      	orrs	r3, r2
 800035c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000364:	bf00      	nop
 8000366:	371c      	adds	r7, #28
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	03fff000 	.word	0x03fff000

08000374 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	3360      	adds	r3, #96	@ 0x60
 8000382:	461a      	mov	r2, r3
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	4413      	add	r3, r2
 800038a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000394:	4618      	mov	r0, r3
 8000396:	3714      	adds	r7, #20
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b087      	sub	sp, #28
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	3360      	adds	r3, #96	@ 0x60
 80003b0:	461a      	mov	r2, r3
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	4413      	add	r3, r2
 80003b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80003ba:	697b      	ldr	r3, [r7, #20]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	431a      	orrs	r2, r3
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80003ca:	bf00      	nop
 80003cc:	371c      	adds	r7, #28
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80003d6:	b480      	push	{r7}
 80003d8:	b083      	sub	sp, #12
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	68db      	ldr	r3, [r3, #12]
 80003e2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d101      	bne.n	80003ee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80003ea:	2301      	movs	r3, #1
 80003ec:	e000      	b.n	80003f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80003ee:	2300      	movs	r3, #0
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr

080003fc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b087      	sub	sp, #28
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	3330      	adds	r3, #48	@ 0x30
 800040c:	461a      	mov	r2, r3
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	0a1b      	lsrs	r3, r3, #8
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	f003 030c 	and.w	r3, r3, #12
 8000418:	4413      	add	r3, r2
 800041a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	f003 031f 	and.w	r3, r3, #31
 8000426:	211f      	movs	r1, #31
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	43db      	mvns	r3, r3
 800042e:	401a      	ands	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	0e9b      	lsrs	r3, r3, #26
 8000434:	f003 011f 	and.w	r1, r3, #31
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	f003 031f 	and.w	r3, r3, #31
 800043e:	fa01 f303 	lsl.w	r3, r1, r3
 8000442:	431a      	orrs	r2, r3
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000448:	bf00      	nop
 800044a:	371c      	adds	r7, #28
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000460:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d101      	bne.n	800046c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000468:	2301      	movs	r3, #1
 800046a:	e000      	b.n	800046e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800046c:	2300      	movs	r3, #0
}
 800046e:	4618      	mov	r0, r3
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800047a:	b480      	push	{r7}
 800047c:	b087      	sub	sp, #28
 800047e:	af00      	add	r7, sp, #0
 8000480:	60f8      	str	r0, [r7, #12]
 8000482:	60b9      	str	r1, [r7, #8]
 8000484:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	3314      	adds	r3, #20
 800048a:	461a      	mov	r2, r3
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	0e5b      	lsrs	r3, r3, #25
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	f003 0304 	and.w	r3, r3, #4
 8000496:	4413      	add	r3, r2
 8000498:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	0d1b      	lsrs	r3, r3, #20
 80004a2:	f003 031f 	and.w	r3, r3, #31
 80004a6:	2107      	movs	r1, #7
 80004a8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ac:	43db      	mvns	r3, r3
 80004ae:	401a      	ands	r2, r3
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	0d1b      	lsrs	r3, r3, #20
 80004b4:	f003 031f 	and.w	r3, r3, #31
 80004b8:	6879      	ldr	r1, [r7, #4]
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	431a      	orrs	r2, r3
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80004c4:	bf00      	nop
 80004c6:	371c      	adds	r7, #28
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr

080004d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80004e8:	43db      	mvns	r3, r3
 80004ea:	401a      	ands	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f003 0318 	and.w	r3, r3, #24
 80004f2:	4908      	ldr	r1, [pc, #32]	@ (8000514 <LL_ADC_SetChannelSingleDiff+0x44>)
 80004f4:	40d9      	lsrs	r1, r3
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	400b      	ands	r3, r1
 80004fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80004fe:	431a      	orrs	r2, r3
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	0007ffff 	.word	0x0007ffff

08000518 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	f003 031f 	and.w	r3, r3, #31
}
 8000528:	4618      	mov	r0, r3
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000544:	4618      	mov	r0, r3
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000560:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	6093      	str	r3, [r2, #8]
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000584:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000588:	d101      	bne.n	800058e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800058a:	2301      	movs	r3, #1
 800058c:	e000      	b.n	8000590 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800058e:	2300      	movs	r3, #0
}
 8000590:	4618      	mov	r0, r3
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80005ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80005b0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80005d8:	d101      	bne.n	80005de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80005da:	2301      	movs	r3, #1
 80005dc:	e000      	b.n	80005e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80005de:	2300      	movs	r3, #0
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80005fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000600:	f043 0201 	orr.w	r2, r3, #1
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000628:	f043 0202 	orr.w	r2, r3, #2
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	2b01      	cmp	r3, #1
 800064e:	d101      	bne.n	8000654 <LL_ADC_IsEnabled+0x18>
 8000650:	2301      	movs	r3, #1
 8000652:	e000      	b.n	8000656 <LL_ADC_IsEnabled+0x1a>
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	2b02      	cmp	r3, #2
 8000674:	d101      	bne.n	800067a <LL_ADC_IsDisableOngoing+0x18>
 8000676:	2301      	movs	r3, #1
 8000678:	e000      	b.n	800067c <LL_ADC_IsDisableOngoing+0x1a>
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000698:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800069c:	f043 0204 	orr.w	r2, r3, #4
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	f003 0304 	and.w	r3, r3, #4
 80006c0:	2b04      	cmp	r3, #4
 80006c2:	d101      	bne.n	80006c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80006c4:	2301      	movs	r3, #1
 80006c6:	e000      	b.n	80006ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80006c8:	2300      	movs	r3, #0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b08      	cmp	r3, #8
 80006e8:	d101      	bne.n	80006ee <LL_ADC_INJ_IsConversionOngoing+0x18>
 80006ea:	2301      	movs	r3, #1
 80006ec:	e000      	b.n	80006f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b089      	sub	sp, #36	@ 0x24
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000704:	2300      	movs	r3, #0
 8000706:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000712:	2301      	movs	r3, #1
 8000714:	e130      	b.n	8000978 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	691b      	ldr	r3, [r3, #16]
 800071a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000720:	2b00      	cmp	r3, #0
 8000722:	d109      	bne.n	8000738 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f000 f939 	bl	800099c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2200      	movs	r2, #0
 800072e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff19 	bl	8000574 <LL_ADC_IsDeepPowerDownEnabled>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d004      	beq.n	8000752 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff feff 	bl	8000550 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff34 	bl	80005c4 <LL_ADC_IsInternalRegulatorEnabled>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d115      	bne.n	800078e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff18 	bl	800059c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800076c:	4b84      	ldr	r3, [pc, #528]	@ (8000980 <HAL_ADC_Init+0x284>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	099b      	lsrs	r3, r3, #6
 8000772:	4a84      	ldr	r2, [pc, #528]	@ (8000984 <HAL_ADC_Init+0x288>)
 8000774:	fba2 2303 	umull	r2, r3, r2, r3
 8000778:	099b      	lsrs	r3, r3, #6
 800077a:	3301      	adds	r3, #1
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000780:	e002      	b.n	8000788 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	3b01      	subs	r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1f9      	bne.n	8000782 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff16 	bl	80005c4 <LL_ADC_IsInternalRegulatorEnabled>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d10d      	bne.n	80007ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80007a2:	f043 0210 	orr.w	r2, r3, #16
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ae:	f043 0201 	orr.w	r2, r3, #1
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ff76 	bl	80006b0 <LL_ADC_REG_IsConversionOngoing>
 80007c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80007ca:	f003 0310 	and.w	r3, r3, #16
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	f040 80c9 	bne.w	8000966 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	f040 80c5 	bne.w	8000966 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80007e0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80007e4:	f043 0202 	orr.w	r2, r3, #2
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff23 	bl	800063c <LL_ADC_IsEnabled>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d115      	bne.n	8000828 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80007fc:	4862      	ldr	r0, [pc, #392]	@ (8000988 <HAL_ADC_Init+0x28c>)
 80007fe:	f7ff ff1d 	bl	800063c <LL_ADC_IsEnabled>
 8000802:	4604      	mov	r4, r0
 8000804:	4861      	ldr	r0, [pc, #388]	@ (800098c <HAL_ADC_Init+0x290>)
 8000806:	f7ff ff19 	bl	800063c <LL_ADC_IsEnabled>
 800080a:	4603      	mov	r3, r0
 800080c:	431c      	orrs	r4, r3
 800080e:	4860      	ldr	r0, [pc, #384]	@ (8000990 <HAL_ADC_Init+0x294>)
 8000810:	f7ff ff14 	bl	800063c <LL_ADC_IsEnabled>
 8000814:	4603      	mov	r3, r0
 8000816:	4323      	orrs	r3, r4
 8000818:	2b00      	cmp	r3, #0
 800081a:	d105      	bne.n	8000828 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	4619      	mov	r1, r3
 8000822:	485c      	ldr	r0, [pc, #368]	@ (8000994 <HAL_ADC_Init+0x298>)
 8000824:	f7ff fd4e 	bl	80002c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	7e5b      	ldrb	r3, [r3, #25]
 800082c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000832:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000838:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800083e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000846:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000848:	4313      	orrs	r3, r2
 800084a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d106      	bne.n	8000864 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800085a:	3b01      	subs	r3, #1
 800085c:	045b      	lsls	r3, r3, #17
 800085e:	69ba      	ldr	r2, [r7, #24]
 8000860:	4313      	orrs	r3, r2
 8000862:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000868:	2b00      	cmp	r3, #0
 800086a:	d009      	beq.n	8000880 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000870:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000878:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800087a:	69ba      	ldr	r2, [r7, #24]
 800087c:	4313      	orrs	r3, r2
 800087e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	68da      	ldr	r2, [r3, #12]
 8000886:	4b44      	ldr	r3, [pc, #272]	@ (8000998 <HAL_ADC_Init+0x29c>)
 8000888:	4013      	ands	r3, r2
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	6812      	ldr	r2, [r2, #0]
 800088e:	69b9      	ldr	r1, [r7, #24]
 8000890:	430b      	orrs	r3, r1
 8000892:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff1c 	bl	80006d6 <LL_ADC_INJ_IsConversionOngoing>
 800089e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d13d      	bne.n	8000922 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d13a      	bne.n	8000922 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80008b0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80008b8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80008ba:	4313      	orrs	r3, r2
 80008bc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80008c8:	f023 0302 	bic.w	r3, r3, #2
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	6812      	ldr	r2, [r2, #0]
 80008d0:	69b9      	ldr	r1, [r7, #24]
 80008d2:	430b      	orrs	r3, r1
 80008d4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d118      	bne.n	8000912 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	691b      	ldr	r3, [r3, #16]
 80008e6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80008ea:	f023 0304 	bic.w	r3, r3, #4
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80008f6:	4311      	orrs	r1, r2
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80008fc:	4311      	orrs	r1, r2
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000902:	430a      	orrs	r2, r1
 8000904:	431a      	orrs	r2, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f042 0201 	orr.w	r2, r2, #1
 800090e:	611a      	str	r2, [r3, #16]
 8000910:	e007      	b.n	8000922 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	691a      	ldr	r2, [r3, #16]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f022 0201 	bic.w	r2, r2, #1
 8000920:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	691b      	ldr	r3, [r3, #16]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d10c      	bne.n	8000944 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000930:	f023 010f 	bic.w	r1, r3, #15
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	69db      	ldr	r3, [r3, #28]
 8000938:	1e5a      	subs	r2, r3, #1
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	430a      	orrs	r2, r1
 8000940:	631a      	str	r2, [r3, #48]	@ 0x30
 8000942:	e007      	b.n	8000954 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f022 020f 	bic.w	r2, r2, #15
 8000952:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000958:	f023 0303 	bic.w	r3, r3, #3
 800095c:	f043 0201 	orr.w	r2, r3, #1
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	655a      	str	r2, [r3, #84]	@ 0x54
 8000964:	e007      	b.n	8000976 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800096a:	f043 0210 	orr.w	r2, r3, #16
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000976:	7ffb      	ldrb	r3, [r7, #31]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3724      	adds	r7, #36	@ 0x24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd90      	pop	{r4, r7, pc}
 8000980:	20000008 	.word	0x20000008
 8000984:	053e2d63 	.word	0x053e2d63
 8000988:	50040000 	.word	0x50040000
 800098c:	50040100 	.word	0x50040100
 8000990:	50040200 	.word	0x50040200
 8000994:	50040300 	.word	0x50040300
 8000998:	fff0c007 	.word	0xfff0c007

0800099c <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80009b8:	4857      	ldr	r0, [pc, #348]	@ (8000b18 <HAL_ADC_Start+0x168>)
 80009ba:	f7ff fdad 	bl	8000518 <LL_ADC_GetMultimode>
 80009be:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fe73 	bl	80006b0 <LL_ADC_REG_IsConversionOngoing>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f040 809c 	bne.w	8000b0a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d101      	bne.n	80009e0 <HAL_ADC_Start+0x30>
 80009dc:	2302      	movs	r3, #2
 80009de:	e097      	b.n	8000b10 <HAL_ADC_Start+0x160>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2201      	movs	r2, #1
 80009e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 fec9 	bl	8001780 <ADC_Enable>
 80009ee:	4603      	mov	r3, r0
 80009f0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80009f2:	7dfb      	ldrb	r3, [r7, #23]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	f040 8083 	bne.w	8000b00 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009fe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000a02:	f023 0301 	bic.w	r3, r3, #1
 8000a06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a42      	ldr	r2, [pc, #264]	@ (8000b1c <HAL_ADC_Start+0x16c>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d002      	beq.n	8000a1e <HAL_ADC_Start+0x6e>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	e000      	b.n	8000a20 <HAL_ADC_Start+0x70>
 8000a1e:	4b40      	ldr	r3, [pc, #256]	@ (8000b20 <HAL_ADC_Start+0x170>)
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	6812      	ldr	r2, [r2, #0]
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d002      	beq.n	8000a2e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d105      	bne.n	8000a3a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a32:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000a46:	d106      	bne.n	8000a56 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4c:	f023 0206 	bic.w	r2, r3, #6
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	659a      	str	r2, [r3, #88]	@ 0x58
 8000a54:	e002      	b.n	8000a5c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	221c      	movs	r2, #28
 8000a62:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a2a      	ldr	r2, [pc, #168]	@ (8000b1c <HAL_ADC_Start+0x16c>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d002      	beq.n	8000a7c <HAL_ADC_Start+0xcc>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	e000      	b.n	8000a7e <HAL_ADC_Start+0xce>
 8000a7c:	4b28      	ldr	r3, [pc, #160]	@ (8000b20 <HAL_ADC_Start+0x170>)
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	6812      	ldr	r2, [r2, #0]
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d008      	beq.n	8000a98 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d005      	beq.n	8000a98 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	2b05      	cmp	r3, #5
 8000a90:	d002      	beq.n	8000a98 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	2b09      	cmp	r3, #9
 8000a96:	d114      	bne.n	8000ac2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d007      	beq.n	8000ab6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000aaa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000aae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fde4 	bl	8000688 <LL_ADC_REG_StartConversion>
 8000ac0:	e025      	b.n	8000b0e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ac6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a12      	ldr	r2, [pc, #72]	@ (8000b1c <HAL_ADC_Start+0x16c>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d002      	beq.n	8000ade <HAL_ADC_Start+0x12e>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	e000      	b.n	8000ae0 <HAL_ADC_Start+0x130>
 8000ade:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <HAL_ADC_Start+0x170>)
 8000ae0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d00f      	beq.n	8000b0e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000af2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000af6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	655a      	str	r2, [r3, #84]	@ 0x54
 8000afe:	e006      	b.n	8000b0e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8000b08:	e001      	b.n	8000b0e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	50040300 	.word	0x50040300
 8000b1c:	50040100 	.word	0x50040100
 8000b20:	50040000 	.word	0x50040000

08000b24 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
	...

08000b40 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	@ 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000b5c:	4882      	ldr	r0, [pc, #520]	@ (8000d68 <HAL_ADC_IRQHandler+0x228>)
 8000b5e:	f7ff fcdb 	bl	8000518 <LL_ADC_GetMultimode>
 8000b62:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d017      	beq.n	8000b9e <HAL_ADC_IRQHandler+0x5e>
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	f003 0302 	and.w	r3, r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d012      	beq.n	8000b9e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b7c:	f003 0310 	and.w	r3, r3, #16
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d105      	bne.n	8000b90 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b88:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f000 ff8f 	bl	8001ab4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d004      	beq.n	8000bb2 <HAL_ADC_IRQHandler+0x72>
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d10a      	bne.n	8000bc8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f000 8083 	beq.w	8000cc4 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	f003 0308 	and.w	r3, r3, #8
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d07d      	beq.n	8000cc4 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000bcc:	f003 0310 	and.w	r3, r3, #16
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d105      	bne.n	8000be0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000bd8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fbf6 	bl	80003d6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d062      	beq.n	8000cb6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a5d      	ldr	r2, [pc, #372]	@ (8000d6c <HAL_ADC_IRQHandler+0x22c>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d002      	beq.n	8000c00 <HAL_ADC_IRQHandler+0xc0>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	e000      	b.n	8000c02 <HAL_ADC_IRQHandler+0xc2>
 8000c00:	4b5b      	ldr	r3, [pc, #364]	@ (8000d70 <HAL_ADC_IRQHandler+0x230>)
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	6812      	ldr	r2, [r2, #0]
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d008      	beq.n	8000c1c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d005      	beq.n	8000c1c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	2b05      	cmp	r3, #5
 8000c14:	d002      	beq.n	8000c1c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	2b09      	cmp	r3, #9
 8000c1a:	d104      	bne.n	8000c26 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	623b      	str	r3, [r7, #32]
 8000c24:	e00c      	b.n	8000c40 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a50      	ldr	r2, [pc, #320]	@ (8000d6c <HAL_ADC_IRQHandler+0x22c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d002      	beq.n	8000c36 <HAL_ADC_IRQHandler+0xf6>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	e000      	b.n	8000c38 <HAL_ADC_IRQHandler+0xf8>
 8000c36:	4b4e      	ldr	r3, [pc, #312]	@ (8000d70 <HAL_ADC_IRQHandler+0x230>)
 8000c38:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8000c40:	6a3b      	ldr	r3, [r7, #32]
 8000c42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d135      	bne.n	8000cb6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0308 	and.w	r3, r3, #8
 8000c54:	2b08      	cmp	r3, #8
 8000c56:	d12e      	bne.n	8000cb6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fd27 	bl	80006b0 <LL_ADC_REG_IsConversionOngoing>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d11a      	bne.n	8000c9e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f022 020c 	bic.w	r2, r2, #12
 8000c76:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d112      	bne.n	8000cb6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c94:	f043 0201 	orr.w	r2, r3, #1
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c9c:	e00b      	b.n	8000cb6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ca2:	f043 0210 	orr.w	r2, r3, #16
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cae:	f043 0201 	orr.w	r2, r3, #1
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f001 fb7c 	bl	80023b4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	220c      	movs	r2, #12
 8000cc2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f003 0320 	and.w	r3, r3, #32
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d004      	beq.n	8000cd8 <HAL_ADC_IRQHandler+0x198>
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	f003 0320 	and.w	r3, r3, #32
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d10b      	bne.n	8000cf0 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 809f 	beq.w	8000e22 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 8099 	beq.w	8000e22 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cf4:	f003 0310 	and.w	r3, r3, #16
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d105      	bne.n	8000d08 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d00:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fba1 	bl	8000454 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8000d12:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fb5c 	bl	80003d6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000d1e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a11      	ldr	r2, [pc, #68]	@ (8000d6c <HAL_ADC_IRQHandler+0x22c>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d002      	beq.n	8000d30 <HAL_ADC_IRQHandler+0x1f0>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	e000      	b.n	8000d32 <HAL_ADC_IRQHandler+0x1f2>
 8000d30:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <HAL_ADC_IRQHandler+0x230>)
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	6812      	ldr	r2, [r2, #0]
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d008      	beq.n	8000d4c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d005      	beq.n	8000d4c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d002      	beq.n	8000d4c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	2b07      	cmp	r3, #7
 8000d4a:	d104      	bne.n	8000d56 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	623b      	str	r3, [r7, #32]
 8000d54:	e013      	b.n	8000d7e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a04      	ldr	r2, [pc, #16]	@ (8000d6c <HAL_ADC_IRQHandler+0x22c>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d009      	beq.n	8000d74 <HAL_ADC_IRQHandler+0x234>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	e007      	b.n	8000d76 <HAL_ADC_IRQHandler+0x236>
 8000d66:	bf00      	nop
 8000d68:	50040300 	.word	0x50040300
 8000d6c:	50040100 	.word	0x50040100
 8000d70:	50040000 	.word	0x50040000
 8000d74:	4b7d      	ldr	r3, [pc, #500]	@ (8000f6c <HAL_ADC_IRQHandler+0x42c>)
 8000d76:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d047      	beq.n	8000e14 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d007      	beq.n	8000d9e <HAL_ADC_IRQHandler+0x25e>
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d03f      	beq.n	8000e14 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8000d94:	6a3b      	ldr	r3, [r7, #32]
 8000d96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d13a      	bne.n	8000e14 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000da8:	2b40      	cmp	r3, #64	@ 0x40
 8000daa:	d133      	bne.n	8000e14 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d12e      	bne.n	8000e14 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fc8b 	bl	80006d6 <LL_ADC_INJ_IsConversionOngoing>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d11a      	bne.n	8000dfc <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8000dd4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dda:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d112      	bne.n	8000e14 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000df2:	f043 0201 	orr.w	r2, r3, #1
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	655a      	str	r2, [r3, #84]	@ 0x54
 8000dfa:	e00b      	b.n	8000e14 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e00:	f043 0210 	orr.w	r2, r3, #16
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0c:	f043 0201 	orr.w	r2, r3, #1
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f000 fe25 	bl	8001a64 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2260      	movs	r2, #96	@ 0x60
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d011      	beq.n	8000e50 <HAL_ADC_IRQHandler+0x310>
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d00c      	beq.n	8000e50 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e3a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 f896 	bl	8000f74 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2280      	movs	r2, #128	@ 0x80
 8000e4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d012      	beq.n	8000e80 <HAL_ADC_IRQHandler+0x340>
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00d      	beq.n	8000e80 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e68:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f000 fe0b 	bl	8001a8c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d012      	beq.n	8000eb0 <HAL_ADC_IRQHandler+0x370>
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d00d      	beq.n	8000eb0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e98:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f000 fdfd 	bl	8001aa0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f003 0310 	and.w	r3, r3, #16
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d036      	beq.n	8000f28 <HAL_ADC_IRQHandler+0x3e8>
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	f003 0310 	and.w	r3, r3, #16
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d031      	beq.n	8000f28 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ed0:	e014      	b.n	8000efc <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d008      	beq.n	8000eea <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8000ed8:	4825      	ldr	r0, [pc, #148]	@ (8000f70 <HAL_ADC_IRQHandler+0x430>)
 8000eda:	f7ff fb2b 	bl	8000534 <LL_ADC_GetMultiDMATransfer>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d00b      	beq.n	8000efc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ee8:	e008      	b.n	8000efc <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8000efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d10e      	bne.n	8000f20 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f06:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f12:	f043 0202 	orr.w	r2, r3, #2
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 f834 	bl	8000f88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2210      	movs	r2, #16
 8000f26:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d018      	beq.n	8000f64 <HAL_ADC_IRQHandler+0x424>
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d013      	beq.n	8000f64 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f40:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4c:	f043 0208 	orr.w	r2, r3, #8
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f5c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 fd8a 	bl	8001a78 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8000f64:	bf00      	nop
 8000f66:	3728      	adds	r7, #40	@ 0x28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	50040000 	.word	0x50040000
 8000f70:	50040300 	.word	0x50040300

08000f74 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0b6      	sub	sp, #216	@ 0xd8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d101      	bne.n	8000fbe <HAL_ADC_ConfigChannel+0x22>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e3c9      	b.n	8001752 <HAL_ADC_ConfigChannel+0x7b6>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fb70 	bl	80006b0 <LL_ADC_REG_IsConversionOngoing>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f040 83aa 	bne.w	800172c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b05      	cmp	r3, #5
 8000fe6:	d824      	bhi.n	8001032 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	3b02      	subs	r3, #2
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d81b      	bhi.n	800102a <HAL_ADC_ConfigChannel+0x8e>
 8000ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ff8 <HAL_ADC_ConfigChannel+0x5c>)
 8000ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff8:	08001009 	.word	0x08001009
 8000ffc:	08001011 	.word	0x08001011
 8001000:	08001019 	.word	0x08001019
 8001004:	08001021 	.word	0x08001021
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001008:	230c      	movs	r3, #12
 800100a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800100e:	e010      	b.n	8001032 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001010:	2312      	movs	r3, #18
 8001012:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001016:	e00c      	b.n	8001032 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001018:	2318      	movs	r3, #24
 800101a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800101e:	e008      	b.n	8001032 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001020:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001024:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001028:	e003      	b.n	8001032 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800102a:	2306      	movs	r3, #6
 800102c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001030:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001040:	f7ff f9dc 	bl	80003fc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fb31 	bl	80006b0 <LL_ADC_REG_IsConversionOngoing>
 800104e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fb3d 	bl	80006d6 <LL_ADC_INJ_IsConversionOngoing>
 800105c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001060:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001064:	2b00      	cmp	r3, #0
 8001066:	f040 81a4 	bne.w	80013b2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800106a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800106e:	2b00      	cmp	r3, #0
 8001070:	f040 819f 	bne.w	80013b2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	6819      	ldr	r1, [r3, #0]
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	461a      	mov	r2, r3
 8001082:	f7ff f9fa 	bl	800047a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	695a      	ldr	r2, [r3, #20]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	08db      	lsrs	r3, r3, #3
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	d00a      	beq.n	80010be <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	6919      	ldr	r1, [r3, #16]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80010b8:	f7ff f938 	bl	800032c <LL_ADC_SetOffset>
 80010bc:	e179      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff f955 	bl	8000374 <LL_ADC_GetOffsetChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d10a      	bne.n	80010ea <HAL_ADC_ConfigChannel+0x14e>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f94a 	bl	8000374 <LL_ADC_GetOffsetChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	0e9b      	lsrs	r3, r3, #26
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	e01e      	b.n	8001128 <HAL_ADC_ConfigChannel+0x18c>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff f93f 	bl	8000374 <LL_ADC_GetOffsetChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001100:	fa93 f3a3 	rbit	r3, r3
 8001104:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001108:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800110c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001110:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001118:	2320      	movs	r3, #32
 800111a:	e004      	b.n	8001126 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800111c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001120:	fab3 f383 	clz	r3, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001130:	2b00      	cmp	r3, #0
 8001132:	d105      	bne.n	8001140 <HAL_ADC_ConfigChannel+0x1a4>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	0e9b      	lsrs	r3, r3, #26
 800113a:	f003 031f 	and.w	r3, r3, #31
 800113e:	e018      	b.n	8001172 <HAL_ADC_ConfigChannel+0x1d6>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800114c:	fa93 f3a3 	rbit	r3, r3
 8001150:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001154:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001158:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800115c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001164:	2320      	movs	r3, #32
 8001166:	e004      	b.n	8001172 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001168:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800116c:	fab3 f383 	clz	r3, r3
 8001170:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001172:	429a      	cmp	r2, r3
 8001174:	d106      	bne.n	8001184 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f90e 	bl	80003a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2101      	movs	r1, #1
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f8f2 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8001190:	4603      	mov	r3, r0
 8001192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10a      	bne.n	80011b0 <HAL_ADC_ConfigChannel+0x214>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2101      	movs	r1, #1
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f8e7 	bl	8000374 <LL_ADC_GetOffsetChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	0e9b      	lsrs	r3, r3, #26
 80011aa:	f003 021f 	and.w	r2, r3, #31
 80011ae:	e01e      	b.n	80011ee <HAL_ADC_ConfigChannel+0x252>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2101      	movs	r1, #1
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f8dc 	bl	8000374 <LL_ADC_GetOffsetChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80011c6:	fa93 f3a3 	rbit	r3, r3
 80011ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80011ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80011d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80011de:	2320      	movs	r3, #32
 80011e0:	e004      	b.n	80011ec <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80011e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80011e6:	fab3 f383 	clz	r3, r3
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d105      	bne.n	8001206 <HAL_ADC_ConfigChannel+0x26a>
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	0e9b      	lsrs	r3, r3, #26
 8001200:	f003 031f 	and.w	r3, r3, #31
 8001204:	e018      	b.n	8001238 <HAL_ADC_ConfigChannel+0x29c>
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001212:	fa93 f3a3 	rbit	r3, r3
 8001216:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800121a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800121e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001222:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800122a:	2320      	movs	r3, #32
 800122c:	e004      	b.n	8001238 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800122e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001232:	fab3 f383 	clz	r3, r3
 8001236:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001238:	429a      	cmp	r2, r3
 800123a:	d106      	bne.n	800124a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2200      	movs	r2, #0
 8001242:	2101      	movs	r1, #1
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f8ab 	bl	80003a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2102      	movs	r1, #2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f88f 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8001256:	4603      	mov	r3, r0
 8001258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800125c:	2b00      	cmp	r3, #0
 800125e:	d10a      	bne.n	8001276 <HAL_ADC_ConfigChannel+0x2da>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2102      	movs	r1, #2
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f884 	bl	8000374 <LL_ADC_GetOffsetChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	0e9b      	lsrs	r3, r3, #26
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	e01e      	b.n	80012b4 <HAL_ADC_ConfigChannel+0x318>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2102      	movs	r1, #2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f879 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001288:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800128c:	fa93 f3a3 	rbit	r3, r3
 8001290:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001294:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001298:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800129c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80012a4:	2320      	movs	r3, #32
 80012a6:	e004      	b.n	80012b2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80012a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80012ac:	fab3 f383 	clz	r3, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d105      	bne.n	80012cc <HAL_ADC_ConfigChannel+0x330>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	0e9b      	lsrs	r3, r3, #26
 80012c6:	f003 031f 	and.w	r3, r3, #31
 80012ca:	e014      	b.n	80012f6 <HAL_ADC_ConfigChannel+0x35a>
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80012d4:	fa93 f3a3 	rbit	r3, r3
 80012d8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80012da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80012dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80012e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d101      	bne.n	80012ec <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80012e8:	2320      	movs	r3, #32
 80012ea:	e004      	b.n	80012f6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80012ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012f0:	fab3 f383 	clz	r3, r3
 80012f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d106      	bne.n	8001308 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2200      	movs	r2, #0
 8001300:	2102      	movs	r1, #2
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f84c 	bl	80003a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2103      	movs	r1, #3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f830 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10a      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x398>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2103      	movs	r1, #3
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f825 	bl	8000374 <LL_ADC_GetOffsetChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	0e9b      	lsrs	r3, r3, #26
 800132e:	f003 021f 	and.w	r2, r3, #31
 8001332:	e017      	b.n	8001364 <HAL_ADC_ConfigChannel+0x3c8>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2103      	movs	r1, #3
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f81a 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001344:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001346:	fa93 f3a3 	rbit	r3, r3
 800134a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800134c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800134e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001350:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001356:	2320      	movs	r3, #32
 8001358:	e003      	b.n	8001362 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800135a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800135c:	fab3 f383 	clz	r3, r3
 8001360:	b2db      	uxtb	r3, r3
 8001362:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800136c:	2b00      	cmp	r3, #0
 800136e:	d105      	bne.n	800137c <HAL_ADC_ConfigChannel+0x3e0>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	0e9b      	lsrs	r3, r3, #26
 8001376:	f003 031f 	and.w	r3, r3, #31
 800137a:	e011      	b.n	80013a0 <HAL_ADC_ConfigChannel+0x404>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001382:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001384:	fa93 f3a3 	rbit	r3, r3
 8001388:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800138a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800138c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800138e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001394:	2320      	movs	r3, #32
 8001396:	e003      	b.n	80013a0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001398:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800139a:	fab3 f383 	clz	r3, r3
 800139e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d106      	bne.n	80013b2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2200      	movs	r2, #0
 80013aa:	2103      	movs	r1, #3
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7fe fff7 	bl	80003a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f940 	bl	800063c <LL_ADC_IsEnabled>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f040 8140 	bne.w	8001644 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	6819      	ldr	r1, [r3, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	461a      	mov	r2, r3
 80013d2:	f7ff f87d 	bl	80004d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	4a8f      	ldr	r2, [pc, #572]	@ (8001618 <HAL_ADC_ConfigChannel+0x67c>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	f040 8131 	bne.w	8001644 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10b      	bne.n	800140a <HAL_ADC_ConfigChannel+0x46e>
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	0e9b      	lsrs	r3, r3, #26
 80013f8:	3301      	adds	r3, #1
 80013fa:	f003 031f 	and.w	r3, r3, #31
 80013fe:	2b09      	cmp	r3, #9
 8001400:	bf94      	ite	ls
 8001402:	2301      	movls	r3, #1
 8001404:	2300      	movhi	r3, #0
 8001406:	b2db      	uxtb	r3, r3
 8001408:	e019      	b.n	800143e <HAL_ADC_ConfigChannel+0x4a2>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001410:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001412:	fa93 f3a3 	rbit	r3, r3
 8001416:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800141a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800141c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001422:	2320      	movs	r3, #32
 8001424:	e003      	b.n	800142e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001426:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001428:	fab3 f383 	clz	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	3301      	adds	r3, #1
 8001430:	f003 031f 	and.w	r3, r3, #31
 8001434:	2b09      	cmp	r3, #9
 8001436:	bf94      	ite	ls
 8001438:	2301      	movls	r3, #1
 800143a:	2300      	movhi	r3, #0
 800143c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800143e:	2b00      	cmp	r3, #0
 8001440:	d079      	beq.n	8001536 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800144a:	2b00      	cmp	r3, #0
 800144c:	d107      	bne.n	800145e <HAL_ADC_ConfigChannel+0x4c2>
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	0e9b      	lsrs	r3, r3, #26
 8001454:	3301      	adds	r3, #1
 8001456:	069b      	lsls	r3, r3, #26
 8001458:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800145c:	e015      	b.n	800148a <HAL_ADC_ConfigChannel+0x4ee>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001464:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001466:	fa93 f3a3 	rbit	r3, r3
 800146a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800146c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800146e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001476:	2320      	movs	r3, #32
 8001478:	e003      	b.n	8001482 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800147a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800147c:	fab3 f383 	clz	r3, r3
 8001480:	b2db      	uxtb	r3, r3
 8001482:	3301      	adds	r3, #1
 8001484:	069b      	lsls	r3, r3, #26
 8001486:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001492:	2b00      	cmp	r3, #0
 8001494:	d109      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x50e>
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	0e9b      	lsrs	r3, r3, #26
 800149c:	3301      	adds	r3, #1
 800149e:	f003 031f 	and.w	r3, r3, #31
 80014a2:	2101      	movs	r1, #1
 80014a4:	fa01 f303 	lsl.w	r3, r1, r3
 80014a8:	e017      	b.n	80014da <HAL_ADC_ConfigChannel+0x53e>
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014b2:	fa93 f3a3 	rbit	r3, r3
 80014b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80014b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014ba:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80014bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80014c2:	2320      	movs	r3, #32
 80014c4:	e003      	b.n	80014ce <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80014c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014c8:	fab3 f383 	clz	r3, r3
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	3301      	adds	r3, #1
 80014d0:	f003 031f 	and.w	r3, r3, #31
 80014d4:	2101      	movs	r1, #1
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	ea42 0103 	orr.w	r1, r2, r3
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10a      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x564>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	0e9b      	lsrs	r3, r3, #26
 80014f0:	3301      	adds	r3, #1
 80014f2:	f003 021f 	and.w	r2, r3, #31
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	051b      	lsls	r3, r3, #20
 80014fe:	e018      	b.n	8001532 <HAL_ADC_ConfigChannel+0x596>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001508:	fa93 f3a3 	rbit	r3, r3
 800150c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800150e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001510:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001518:	2320      	movs	r3, #32
 800151a:	e003      	b.n	8001524 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800151c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800151e:	fab3 f383 	clz	r3, r3
 8001522:	b2db      	uxtb	r3, r3
 8001524:	3301      	adds	r3, #1
 8001526:	f003 021f 	and.w	r2, r3, #31
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001532:	430b      	orrs	r3, r1
 8001534:	e081      	b.n	800163a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800153e:	2b00      	cmp	r3, #0
 8001540:	d107      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x5b6>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	0e9b      	lsrs	r3, r3, #26
 8001548:	3301      	adds	r3, #1
 800154a:	069b      	lsls	r3, r3, #26
 800154c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001550:	e015      	b.n	800157e <HAL_ADC_ConfigChannel+0x5e2>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800155a:	fa93 f3a3 	rbit	r3, r3
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800156a:	2320      	movs	r3, #32
 800156c:	e003      	b.n	8001576 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800156e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001570:	fab3 f383 	clz	r3, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	3301      	adds	r3, #1
 8001578:	069b      	lsls	r3, r3, #26
 800157a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001586:	2b00      	cmp	r3, #0
 8001588:	d109      	bne.n	800159e <HAL_ADC_ConfigChannel+0x602>
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	0e9b      	lsrs	r3, r3, #26
 8001590:	3301      	adds	r3, #1
 8001592:	f003 031f 	and.w	r3, r3, #31
 8001596:	2101      	movs	r1, #1
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	e017      	b.n	80015ce <HAL_ADC_ConfigChannel+0x632>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	fa93 f3a3 	rbit	r3, r3
 80015aa:	61bb      	str	r3, [r7, #24]
  return result;
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80015b0:	6a3b      	ldr	r3, [r7, #32]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80015b6:	2320      	movs	r3, #32
 80015b8:	e003      	b.n	80015c2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	fab3 f383 	clz	r3, r3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	3301      	adds	r3, #1
 80015c4:	f003 031f 	and.w	r3, r3, #31
 80015c8:	2101      	movs	r1, #1
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	ea42 0103 	orr.w	r1, r2, r3
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10d      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x65e>
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	0e9b      	lsrs	r3, r3, #26
 80015e4:	3301      	adds	r3, #1
 80015e6:	f003 021f 	and.w	r2, r3, #31
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	3b1e      	subs	r3, #30
 80015f2:	051b      	lsls	r3, r3, #20
 80015f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015f8:	e01e      	b.n	8001638 <HAL_ADC_ConfigChannel+0x69c>
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	fa93 f3a3 	rbit	r3, r3
 8001606:	60fb      	str	r3, [r7, #12]
  return result;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d104      	bne.n	800161c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001612:	2320      	movs	r3, #32
 8001614:	e006      	b.n	8001624 <HAL_ADC_ConfigChannel+0x688>
 8001616:	bf00      	nop
 8001618:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fab3 f383 	clz	r3, r3
 8001622:	b2db      	uxtb	r3, r3
 8001624:	3301      	adds	r3, #1
 8001626:	f003 021f 	and.w	r2, r3, #31
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	3b1e      	subs	r3, #30
 8001632:	051b      	lsls	r3, r3, #20
 8001634:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001638:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800163e:	4619      	mov	r1, r3
 8001640:	f7fe ff1b 	bl	800047a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b44      	ldr	r3, [pc, #272]	@ (800175c <HAL_ADC_ConfigChannel+0x7c0>)
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d07a      	beq.n	8001746 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001650:	4843      	ldr	r0, [pc, #268]	@ (8001760 <HAL_ADC_ConfigChannel+0x7c4>)
 8001652:	f7fe fe5d 	bl	8000310 <LL_ADC_GetCommonPathInternalCh>
 8001656:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a41      	ldr	r2, [pc, #260]	@ (8001764 <HAL_ADC_ConfigChannel+0x7c8>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d12c      	bne.n	80016be <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001664:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001668:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d126      	bne.n	80016be <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a3c      	ldr	r2, [pc, #240]	@ (8001768 <HAL_ADC_ConfigChannel+0x7cc>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d004      	beq.n	8001684 <HAL_ADC_ConfigChannel+0x6e8>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a3b      	ldr	r2, [pc, #236]	@ (800176c <HAL_ADC_ConfigChannel+0x7d0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d15d      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001684:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001688:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800168c:	4619      	mov	r1, r3
 800168e:	4834      	ldr	r0, [pc, #208]	@ (8001760 <HAL_ADC_ConfigChannel+0x7c4>)
 8001690:	f7fe fe2b 	bl	80002ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001694:	4b36      	ldr	r3, [pc, #216]	@ (8001770 <HAL_ADC_ConfigChannel+0x7d4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	099b      	lsrs	r3, r3, #6
 800169a:	4a36      	ldr	r2, [pc, #216]	@ (8001774 <HAL_ADC_ConfigChannel+0x7d8>)
 800169c:	fba2 2303 	umull	r2, r3, r2, r3
 80016a0:	099b      	lsrs	r3, r3, #6
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80016ae:	e002      	b.n	80016b6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f9      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80016bc:	e040      	b.n	8001740 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001778 <HAL_ADC_ConfigChannel+0x7dc>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d118      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80016c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80016cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d112      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a23      	ldr	r2, [pc, #140]	@ (8001768 <HAL_ADC_ConfigChannel+0x7cc>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d004      	beq.n	80016e8 <HAL_ADC_ConfigChannel+0x74c>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a22      	ldr	r2, [pc, #136]	@ (800176c <HAL_ADC_ConfigChannel+0x7d0>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d12d      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80016ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016f0:	4619      	mov	r1, r3
 80016f2:	481b      	ldr	r0, [pc, #108]	@ (8001760 <HAL_ADC_ConfigChannel+0x7c4>)
 80016f4:	f7fe fdf9 	bl	80002ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80016f8:	e024      	b.n	8001744 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a1f      	ldr	r2, [pc, #124]	@ (800177c <HAL_ADC_ConfigChannel+0x7e0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d120      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001704:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001708:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d11a      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a14      	ldr	r2, [pc, #80]	@ (8001768 <HAL_ADC_ConfigChannel+0x7cc>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d115      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800171a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800171e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001722:	4619      	mov	r1, r3
 8001724:	480e      	ldr	r0, [pc, #56]	@ (8001760 <HAL_ADC_ConfigChannel+0x7c4>)
 8001726:	f7fe fde0 	bl	80002ea <LL_ADC_SetCommonPathInternalCh>
 800172a:	e00c      	b.n	8001746 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001730:	f043 0220 	orr.w	r2, r3, #32
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800173e:	e002      	b.n	8001746 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001740:	bf00      	nop
 8001742:	e000      	b.n	8001746 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001744:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800174e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001752:	4618      	mov	r0, r3
 8001754:	37d8      	adds	r7, #216	@ 0xd8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	80080000 	.word	0x80080000
 8001760:	50040300 	.word	0x50040300
 8001764:	c7520000 	.word	0xc7520000
 8001768:	50040000 	.word	0x50040000
 800176c:	50040200 	.word	0x50040200
 8001770:	20000008 	.word	0x20000008
 8001774:	053e2d63 	.word	0x053e2d63
 8001778:	cb840000 	.word	0xcb840000
 800177c:	80000001 	.word	0x80000001

08001780 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe ff53 	bl	800063c <LL_ADC_IsEnabled>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d169      	bne.n	8001870 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	4b36      	ldr	r3, [pc, #216]	@ (800187c <ADC_Enable+0xfc>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00d      	beq.n	80017c6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ae:	f043 0210 	orr.w	r2, r3, #16
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ba:	f043 0201 	orr.w	r2, r3, #1
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e055      	b.n	8001872 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe ff0e 	bl	80005ec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80017d0:	482b      	ldr	r0, [pc, #172]	@ (8001880 <ADC_Enable+0x100>)
 80017d2:	f7fe fd9d 	bl	8000310 <LL_ADC_GetCommonPathInternalCh>
 80017d6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80017d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d013      	beq.n	8001808 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017e0:	4b28      	ldr	r3, [pc, #160]	@ (8001884 <ADC_Enable+0x104>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	099b      	lsrs	r3, r3, #6
 80017e6:	4a28      	ldr	r2, [pc, #160]	@ (8001888 <ADC_Enable+0x108>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	099b      	lsrs	r3, r3, #6
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80017fa:	e002      	b.n	8001802 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	3b01      	subs	r3, #1
 8001800:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f9      	bne.n	80017fc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001808:	f7fe fd50 	bl	80002ac <HAL_GetTick>
 800180c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800180e:	e028      	b.n	8001862 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe ff11 	bl	800063c <LL_ADC_IsEnabled>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d104      	bne.n	800182a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fee1 	bl	80005ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800182a:	f7fe fd3f 	bl	80002ac <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d914      	bls.n	8001862 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b01      	cmp	r3, #1
 8001844:	d00d      	beq.n	8001862 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800184a:	f043 0210 	orr.w	r2, r3, #16
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001856:	f043 0201 	orr.w	r2, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e007      	b.n	8001872 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b01      	cmp	r3, #1
 800186e:	d1cf      	bne.n	8001810 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	8000003f 	.word	0x8000003f
 8001880:	50040300 	.word	0x50040300
 8001884:	20000008 	.word	0x20000008
 8001888:	053e2d63 	.word	0x053e2d63

0800188c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fee2 	bl	8000662 <LL_ADC_IsDisableOngoing>
 800189e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fec9 	bl	800063c <LL_ADC_IsEnabled>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d047      	beq.n	8001940 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d144      	bne.n	8001940 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 030d 	and.w	r3, r3, #13
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d10c      	bne.n	80018de <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fea3 	bl	8000614 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2203      	movs	r2, #3
 80018d4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018d6:	f7fe fce9 	bl	80002ac <HAL_GetTick>
 80018da:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80018dc:	e029      	b.n	8001932 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e2:	f043 0210 	orr.w	r2, r3, #16
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ee:	f043 0201 	orr.w	r2, r3, #1
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e023      	b.n	8001942 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018fa:	f7fe fcd7 	bl	80002ac <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d914      	bls.n	8001932 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00d      	beq.n	8001932 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800191a:	f043 0210 	orr.w	r2, r3, #16
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001926:	f043 0201 	orr.w	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e007      	b.n	8001942 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1dc      	bne.n	80018fa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <LL_ADC_StartCalibration>:
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800195c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001966:	4313      	orrs	r3, r2
 8001968:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	609a      	str	r2, [r3, #8]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_IsCalibrationOnGoing>:
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800198c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001990:	d101      	bne.n	8001996 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_ADCEx_Calibration_Start+0x1c>
 80019bc:	2302      	movs	r3, #2
 80019be:	e04d      	b.n	8001a5c <HAL_ADCEx_Calibration_Start+0xb8>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff5f 	bl	800188c <ADC_Disable>
 80019ce:	4603      	mov	r3, r0
 80019d0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d136      	bne.n	8001a46 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019e0:	f023 0302 	bic.w	r3, r3, #2
 80019e4:	f043 0202 	orr.w	r2, r3, #2
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6839      	ldr	r1, [r7, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ffa9 	bl	800194a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80019f8:	e014      	b.n	8001a24 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	3301      	adds	r3, #1
 80019fe:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8001a06:	d30d      	bcc.n	8001a24 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a0c:	f023 0312 	bic.w	r3, r3, #18
 8001a10:	f043 0210 	orr.w	r2, r3, #16
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e01b      	b.n	8001a5c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ffa7 	bl	800197c <LL_ADC_IsCalibrationOnGoing>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1e2      	bne.n	80019fa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a38:	f023 0303 	bic.w	r3, r3, #3
 8001a3c:	f043 0201 	orr.w	r2, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a44:	e005      	b.n	8001a52 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a4a:	f043 0210 	orr.w	r2, r3, #16
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afa:	4a04      	ldr	r2, [pc, #16]	@ (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	60d3      	str	r3, [r2, #12]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b14:	4b04      	ldr	r3, [pc, #16]	@ (8001b28 <__NVIC_GetPriorityGrouping+0x18>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	f003 0307 	and.w	r3, r3, #7
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	db0a      	blt.n	8001b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	490c      	ldr	r1, [pc, #48]	@ (8001b78 <__NVIC_SetPriority+0x4c>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	0112      	lsls	r2, r2, #4
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	440b      	add	r3, r1
 8001b50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b54:	e00a      	b.n	8001b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4908      	ldr	r1, [pc, #32]	@ (8001b7c <__NVIC_SetPriority+0x50>)
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	3b04      	subs	r3, #4
 8001b64:	0112      	lsls	r2, r2, #4
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	440b      	add	r3, r1
 8001b6a:	761a      	strb	r2, [r3, #24]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000e100 	.word	0xe000e100
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	@ 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f1c3 0307 	rsb	r3, r3, #7
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	bf28      	it	cs
 8001b9e:	2304      	movcs	r3, #4
 8001ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d902      	bls.n	8001bb0 <NVIC_EncodePriority+0x30>
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3b03      	subs	r3, #3
 8001bae:	e000      	b.n	8001bb2 <NVIC_EncodePriority+0x32>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	43d9      	mvns	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	4313      	orrs	r3, r2
         );
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3724      	adds	r7, #36	@ 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bf8:	d301      	bcc.n	8001bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00f      	b.n	8001c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001c28 <SysTick_Config+0x40>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c06:	210f      	movs	r1, #15
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	f7ff ff8e 	bl	8001b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c10:	4b05      	ldr	r3, [pc, #20]	@ (8001c28 <SysTick_Config+0x40>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c16:	4b04      	ldr	r3, [pc, #16]	@ (8001c28 <SysTick_Config+0x40>)
 8001c18:	2207      	movs	r2, #7
 8001c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	e000e010 	.word	0xe000e010

08001c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ff47 	bl	8001ac8 <__NVIC_SetPriorityGrouping>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c54:	f7ff ff5c 	bl	8001b10 <__NVIC_GetPriorityGrouping>
 8001c58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	6978      	ldr	r0, [r7, #20]
 8001c60:	f7ff ff8e 	bl	8001b80 <NVIC_EncodePriority>
 8001c64:	4602      	mov	r2, r0
 8001c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff5d 	bl	8001b2c <__NVIC_SetPriority>
}
 8001c72:	bf00      	nop
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff ffb0 	bl	8001be8 <SysTick_Config>
 8001c88:	4603      	mov	r3, r0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca2:	e17f      	b.n	8001fa4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8171 	beq.w	8001f9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d005      	beq.n	8001cd4 <HAL_GPIO_Init+0x40>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d130      	bne.n	8001d36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	2203      	movs	r2, #3
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	091b      	lsrs	r3, r3, #4
 8001d20:	f003 0201 	and.w	r2, r3, #1
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d118      	bne.n	8001d74 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d48:	2201      	movs	r2, #1
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	08db      	lsrs	r3, r3, #3
 8001d5e:	f003 0201 	and.w	r2, r3, #1
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d017      	beq.n	8001db0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d123      	bne.n	8001e04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	08da      	lsrs	r2, r3, #3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3208      	adds	r2, #8
 8001dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	08da      	lsrs	r2, r3, #3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3208      	adds	r2, #8
 8001dfe:	6939      	ldr	r1, [r7, #16]
 8001e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0203 	and.w	r2, r3, #3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80ac 	beq.w	8001f9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e46:	4b5f      	ldr	r3, [pc, #380]	@ (8001fc4 <HAL_GPIO_Init+0x330>)
 8001e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e4a:	4a5e      	ldr	r2, [pc, #376]	@ (8001fc4 <HAL_GPIO_Init+0x330>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e52:	4b5c      	ldr	r3, [pc, #368]	@ (8001fc4 <HAL_GPIO_Init+0x330>)
 8001e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e5e:	4a5a      	ldr	r2, [pc, #360]	@ (8001fc8 <HAL_GPIO_Init+0x334>)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	089b      	lsrs	r3, r3, #2
 8001e64:	3302      	adds	r3, #2
 8001e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	220f      	movs	r2, #15
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e88:	d025      	beq.n	8001ed6 <HAL_GPIO_Init+0x242>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4f      	ldr	r2, [pc, #316]	@ (8001fcc <HAL_GPIO_Init+0x338>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d01f      	beq.n	8001ed2 <HAL_GPIO_Init+0x23e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4e      	ldr	r2, [pc, #312]	@ (8001fd0 <HAL_GPIO_Init+0x33c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d019      	beq.n	8001ece <HAL_GPIO_Init+0x23a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4d      	ldr	r2, [pc, #308]	@ (8001fd4 <HAL_GPIO_Init+0x340>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0x236>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4c      	ldr	r2, [pc, #304]	@ (8001fd8 <HAL_GPIO_Init+0x344>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00d      	beq.n	8001ec6 <HAL_GPIO_Init+0x232>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4b      	ldr	r2, [pc, #300]	@ (8001fdc <HAL_GPIO_Init+0x348>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <HAL_GPIO_Init+0x22e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4a      	ldr	r2, [pc, #296]	@ (8001fe0 <HAL_GPIO_Init+0x34c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_GPIO_Init+0x22a>
 8001eba:	2306      	movs	r3, #6
 8001ebc:	e00c      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	e00a      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ec2:	2305      	movs	r3, #5
 8001ec4:	e008      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e004      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e002      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	f002 0203 	and.w	r2, r2, #3
 8001ede:	0092      	lsls	r2, r2, #2
 8001ee0:	4093      	lsls	r3, r2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ee8:	4937      	ldr	r1, [pc, #220]	@ (8001fc8 <HAL_GPIO_Init+0x334>)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	3302      	adds	r3, #2
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe4 <HAL_GPIO_Init+0x350>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f1a:	4a32      	ldr	r2, [pc, #200]	@ (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f20:	4b30      	ldr	r3, [pc, #192]	@ (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f44:	4a27      	ldr	r2, [pc, #156]	@ (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f4a:	4b26      	ldr	r3, [pc, #152]	@ (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f74:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f98:	4a12      	ldr	r2, [pc, #72]	@ (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	fa22 f303 	lsr.w	r3, r2, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f47f ae78 	bne.w	8001ca4 <HAL_GPIO_Init+0x10>
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	48000400 	.word	0x48000400
 8001fd0:	48000800 	.word	0x48000800
 8001fd4:	48000c00 	.word	0x48000c00
 8001fd8:	48001000 	.word	0x48001000
 8001fdc:	48001400 	.word	0x48001400
 8001fe0:	48001800 	.word	0x48001800
 8001fe4:	40010400 	.word	0x40010400

08001fe8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d020      	beq.n	800204c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01b      	beq.n	800204c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0202 	mvn.w	r2, #2
 800201c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f8ee 	bl	8002214 <HAL_TIM_IC_CaptureCallback>
 8002038:	e005      	b.n	8002046 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f8e0 	bl	8002200 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f8f1 	bl	8002228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	2b00      	cmp	r3, #0
 8002054:	d020      	beq.n	8002098 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d01b      	beq.n	8002098 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0204 	mvn.w	r2, #4
 8002068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2202      	movs	r2, #2
 800206e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8c8 	bl	8002214 <HAL_TIM_IC_CaptureCallback>
 8002084:	e005      	b.n	8002092 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8ba 	bl	8002200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f8cb 	bl	8002228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d020      	beq.n	80020e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d01b      	beq.n	80020e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0208 	mvn.w	r2, #8
 80020b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2204      	movs	r2, #4
 80020ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f8a2 	bl	8002214 <HAL_TIM_IC_CaptureCallback>
 80020d0:	e005      	b.n	80020de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f894 	bl	8002200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f8a5 	bl	8002228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d020      	beq.n	8002130 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01b      	beq.n	8002130 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0210 	mvn.w	r2, #16
 8002100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2208      	movs	r2, #8
 8002106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f87c 	bl	8002214 <HAL_TIM_IC_CaptureCallback>
 800211c:	e005      	b.n	800212a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f86e 	bl	8002200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f87f 	bl	8002228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00c      	beq.n	8002154 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d007      	beq.n	8002154 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0201 	mvn.w	r2, #1
 800214c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f84c 	bl	80021ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00c      	beq.n	8002178 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002164:	2b00      	cmp	r3, #0
 8002166:	d007      	beq.n	8002178 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f876 	bl	8002264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00c      	beq.n	800219c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f86e 	bl	8002278 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00c      	beq.n	80021c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d007      	beq.n	80021c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f83e 	bl	800223c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00c      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d007      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0220 	mvn.w	r2, #32
 80021dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f836 	bl	8002250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <pc0_adc_read>:
extern ADC_HandleTypeDef hadc1 ;

static void adc_continous_conv_init(void) ;

uint32_t pc0_adc_read(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(&hadc1);
 8002290:	4802      	ldr	r0, [pc, #8]	@ (800229c <pc0_adc_read+0x10>)
 8002292:	f7fe fc47 	bl	8000b24 <HAL_ADC_GetValue>
 8002296:	4603      	mov	r3, r0
}
 8002298:	4618      	mov	r0, r3
 800229a:	bd80      	pop	{r7, pc}
 800229c:	2000002c 	.word	0x2000002c

080022a0 <adc_pc0_interrupt_init>:
	HAL_ADC_Start(&hadc1);


}

void adc_pc0_interrupt_init(void){
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08c      	sub	sp, #48	@ 0x30
 80022a4:	af00      	add	r7, sp, #0

	//Configure pc0 as analog pin

	GPIO_InitTypeDef GPIO_InitStruct ={0};
 80022a6:	f107 031c 	add.w	r3, r7, #28
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
 80022b4:	611a      	str	r2, [r3, #16]
	ADC_ChannelConfTypeDef  sConfig ={0};
 80022b6:	1d3b      	adds	r3, r7, #4
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
 80022c4:	615a      	str	r2, [r3, #20]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 80022c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002370 <adc_pc0_interrupt_init+0xd0>)
 80022c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ca:	4a29      	ldr	r2, [pc, #164]	@ (8002370 <adc_pc0_interrupt_init+0xd0>)
 80022cc:	f043 0304 	orr.w	r3, r3, #4
 80022d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022d2:	4b27      	ldr	r3, [pc, #156]	@ (8002370 <adc_pc0_interrupt_init+0xd0>)
 80022d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022de:	2301      	movs	r3, #1
 80022e0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG ;
 80022e2:	2303      	movs	r3, #3
 80022e4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL ;
 80022e6:	2300      	movs	r3, #0
 80022e8:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ea:	f107 031c 	add.w	r3, r7, #28
 80022ee:	4619      	mov	r1, r3
 80022f0:	4820      	ldr	r0, [pc, #128]	@ (8002374 <adc_pc0_interrupt_init+0xd4>)
 80022f2:	f7ff fccf 	bl	8001c94 <HAL_GPIO_Init>

	//Configure ADC module for continuous conversion

	hadc1.Instance = ADC1;
 80022f6:	4b20      	ldr	r3, [pc, #128]	@ (8002378 <adc_pc0_interrupt_init+0xd8>)
 80022f8:	4a20      	ldr	r2, [pc, #128]	@ (800237c <adc_pc0_interrupt_init+0xdc>)
 80022fa:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002378 <adc_pc0_interrupt_init+0xd8>)
 80022fe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002302:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002304:	4b1c      	ldr	r3, [pc, #112]	@ (8002378 <adc_pc0_interrupt_init+0xd8>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;   // Keep this enabled
 800230a:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <adc_pc0_interrupt_init+0xd8>)
 800230c:	2201      	movs	r2, #1
 800230e:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode =DISABLE;
 8002310:	4b19      	ldr	r3, [pc, #100]	@ (8002378 <adc_pc0_interrupt_init+0xd8>)
 8002312:	2200      	movs	r2, #0
 8002314:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002316:	4b18      	ldr	r3, [pc, #96]	@ (8002378 <adc_pc0_interrupt_init+0xd8>)
 8002318:	2200      	movs	r2, #0
 800231a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800231c:	4b16      	ldr	r3, [pc, #88]	@ (8002378 <adc_pc0_interrupt_init+0xd8>)
 800231e:	2200      	movs	r2, #0
 8002320:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002322:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <adc_pc0_interrupt_init+0xd8>)
 8002324:	2200      	movs	r2, #0
 8002326:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8002328:	4b13      	ldr	r3, [pc, #76]	@ (8002378 <adc_pc0_interrupt_init+0xd8>)
 800232a:	2201      	movs	r2, #1
 800232c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800232e:	4b12      	ldr	r3, [pc, #72]	@ (8002378 <adc_pc0_interrupt_init+0xd8>)
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002336:	4b10      	ldr	r3, [pc, #64]	@ (8002378 <adc_pc0_interrupt_init+0xd8>)
 8002338:	2204      	movs	r2, #4
 800233a:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&hadc1);
 800233c:	480e      	ldr	r0, [pc, #56]	@ (8002378 <adc_pc0_interrupt_init+0xd8>)
 800233e:	f7fe f9dd 	bl	80006fc <HAL_ADC_Init>

	// Calibration before starting
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002342:	217f      	movs	r1, #127	@ 0x7f
 8002344:	480c      	ldr	r0, [pc, #48]	@ (8002378 <adc_pc0_interrupt_init+0xd8>)
 8002346:	f7ff fb2d 	bl	80019a4 <HAL_ADCEx_Calibration_Start>

	sConfig.Channel = ADC_CHANNEL_1;   // PC0 = ADC1_IN1
 800234a:	4b0d      	ldr	r3, [pc, #52]	@ (8002380 <adc_pc0_interrupt_init+0xe0>)
 800234c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800234e:	2306      	movs	r3, #6
 8002350:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8002352:	2302      	movs	r3, #2
 8002354:	60fb      	str	r3, [r7, #12]

	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	4619      	mov	r1, r3
 800235a:	4807      	ldr	r0, [pc, #28]	@ (8002378 <adc_pc0_interrupt_init+0xd8>)
 800235c:	f7fe fe1e 	bl	8000f9c <HAL_ADC_ConfigChannel>

	// Start continuous conversions
	HAL_ADC_Start(&hadc1);
 8002360:	4805      	ldr	r0, [pc, #20]	@ (8002378 <adc_pc0_interrupt_init+0xd8>)
 8002362:	f7fe fb25 	bl	80009b0 <HAL_ADC_Start>

}
 8002366:	bf00      	nop
 8002368:	3730      	adds	r7, #48	@ 0x30
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	48000800 	.word	0x48000800
 8002378:	2000002c 	.word	0x2000002c
 800237c:	50040000 	.word	0x50040000
 8002380:	04300002 	.word	0x04300002

08002384 <ADC1_2_IRQHandler>:




void ADC1_2_IRQHandler(void){
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0

	HAL_ADC_IRQHandler(&hadc1);
 8002388:	4802      	ldr	r0, [pc, #8]	@ (8002394 <ADC1_2_IRQHandler+0x10>)
 800238a:	f7fe fbd9 	bl	8000b40 <HAL_ADC_IRQHandler>

}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	2000002c 	.word	0x2000002c

08002398 <main>:
ADC_HandleTypeDef hadc1 ;

uint32_t sensor_value ;

int main(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
    HAL_Init();
 800239c:	f7fd ff16 	bl	80001cc <HAL_Init>
    adc_pc0_interrupt_init();
 80023a0:	f7ff ff7e 	bl	80022a0 <adc_pc0_interrupt_init>



    while (1)
 80023a4:	bf00      	nop
 80023a6:	e7fd      	b.n	80023a4 <main+0xc>

080023a8 <SysTick_Handler>:

    }
}

void SysTick_Handler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80023ac:	f7fd ff6a 	bl	8000284 <HAL_IncTick>
}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback( ADC_HandleTypeDef  *hadc){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

	sensor_value = pc0_adc_read();
 80023bc:	f7ff ff66 	bl	800228c <pc0_adc_read>
 80023c0:	4603      	mov	r3, r0
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b02      	ldr	r3, [pc, #8]	@ (80023d0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80023c6:	601a      	str	r2, [r3, #0]

}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000090 	.word	0x20000090

080023d4 <TIM3_IRQHandler>:
	HAL_NVIC_SetPriority(TIMx_IRQn,0, 0);
	HAL_NVIC_EnableIRQ(TIMx_IRQn);
	HAL_TIM_Base_Start_IT(&TimHandle);
}

void TIMx_IRQHandler(void){
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&TimHandle);
 80023d8:	4802      	ldr	r0, [pc, #8]	@ (80023e4 <TIM3_IRQHandler+0x10>)
 80023da:	f7ff fe05 	bl	8001fe8 <HAL_TIM_IRQHandler>
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000094 	.word	0x20000094

080023e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023e8:	480d      	ldr	r0, [pc, #52]	@ (8002420 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80023ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023f0:	480c      	ldr	r0, [pc, #48]	@ (8002424 <LoopForever+0x6>)
  ldr r1, =_edata
 80023f2:	490d      	ldr	r1, [pc, #52]	@ (8002428 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023f4:	4a0d      	ldr	r2, [pc, #52]	@ (800242c <LoopForever+0xe>)
  movs r3, #0
 80023f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f8:	e002      	b.n	8002400 <LoopCopyDataInit>

080023fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023fe:	3304      	adds	r3, #4

08002400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002404:	d3f9      	bcc.n	80023fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002406:	4a0a      	ldr	r2, [pc, #40]	@ (8002430 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002408:	4c0a      	ldr	r4, [pc, #40]	@ (8002434 <LoopForever+0x16>)
  movs r3, #0
 800240a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800240c:	e001      	b.n	8002412 <LoopFillZerobss>

0800240e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800240e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002410:	3204      	adds	r2, #4

08002412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002414:	d3fb      	bcc.n	800240e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8002416:	f000 f811 	bl	800243c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800241a:	f7ff ffbd 	bl	8002398 <main>

0800241e <LoopForever>:

LoopForever:
  b LoopForever
 800241e:	e7fe      	b.n	800241e <LoopForever>
  ldr   r0, =_estack
 8002420:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002428:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800242c:	080024a4 	.word	0x080024a4
  ldr r2, =_sbss
 8002430:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002434:	200000e0 	.word	0x200000e0

08002438 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002438:	e7fe      	b.n	8002438 <ADC3_IRQHandler>
	...

0800243c <__libc_init_array>:
 800243c:	b570      	push	{r4, r5, r6, lr}
 800243e:	4d0d      	ldr	r5, [pc, #52]	@ (8002474 <__libc_init_array+0x38>)
 8002440:	4c0d      	ldr	r4, [pc, #52]	@ (8002478 <__libc_init_array+0x3c>)
 8002442:	1b64      	subs	r4, r4, r5
 8002444:	10a4      	asrs	r4, r4, #2
 8002446:	2600      	movs	r6, #0
 8002448:	42a6      	cmp	r6, r4
 800244a:	d109      	bne.n	8002460 <__libc_init_array+0x24>
 800244c:	4d0b      	ldr	r5, [pc, #44]	@ (800247c <__libc_init_array+0x40>)
 800244e:	4c0c      	ldr	r4, [pc, #48]	@ (8002480 <__libc_init_array+0x44>)
 8002450:	f000 f818 	bl	8002484 <_init>
 8002454:	1b64      	subs	r4, r4, r5
 8002456:	10a4      	asrs	r4, r4, #2
 8002458:	2600      	movs	r6, #0
 800245a:	42a6      	cmp	r6, r4
 800245c:	d105      	bne.n	800246a <__libc_init_array+0x2e>
 800245e:	bd70      	pop	{r4, r5, r6, pc}
 8002460:	f855 3b04 	ldr.w	r3, [r5], #4
 8002464:	4798      	blx	r3
 8002466:	3601      	adds	r6, #1
 8002468:	e7ee      	b.n	8002448 <__libc_init_array+0xc>
 800246a:	f855 3b04 	ldr.w	r3, [r5], #4
 800246e:	4798      	blx	r3
 8002470:	3601      	adds	r6, #1
 8002472:	e7f2      	b.n	800245a <__libc_init_array+0x1e>
 8002474:	0800249c 	.word	0x0800249c
 8002478:	0800249c 	.word	0x0800249c
 800247c:	0800249c 	.word	0x0800249c
 8002480:	080024a0 	.word	0x080024a0

08002484 <_init>:
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002486:	bf00      	nop
 8002488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248a:	bc08      	pop	{r3}
 800248c:	469e      	mov	lr, r3
 800248e:	4770      	bx	lr

08002490 <_fini>:
 8002490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002492:	bf00      	nop
 8002494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002496:	bc08      	pop	{r3}
 8002498:	469e      	mov	lr, r3
 800249a:	4770      	bx	lr
