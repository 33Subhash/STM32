/*
 * stm32f4xx.h
 *
 *  Created on: Aug 22, 2025
 *      Author: subhash
 */

#include<stdint.h>

#ifndef INC_STM32L4XX_H_
#define INC_STM32L4XX_H_

#define __vo volatile

#define NO_PR_BITS_IMPLEMENTED   4   // STM32L4 has only 4 MSB bits implemented

#define NVIC_ISER0     ((__vo uint32_t*)0xE000E100)
#define NVIC_ISER1     ((__vo uint32_t*)0xE000E104)
#define NVIC_ISER2     ((__vo uint32_t*)0xE000E108)

#define NVIC_ICER0     ((__vo uint32_t*)0xE000E180)
#define NVIC_ICER1     ((__vo uint32_t*)0xE000E184)
#define NVIC_ICER2     ((__vo uint32_t*)0xE000E188)

/*
 * ARM cortex Mx processor priority register Address
 */
#define NVIC_IPR_BASE_ADDR  ((__vo uint32_t*)0xE000E400)


/* Define Base of SRAM and Flash */

#define FLASH_BASEADDR	0x08000000U    //1MB flash memory base address which on not contiguous

#define SRAM1_BASEADDR 	0x20000000U    //96KB SRAM1 base Address
#define SRAM 	 		SRAM1_BASEADDR
#define SRAM2_BASEADDR  0x10000000U    //32KB SRAM2 base Address


/*
 *	AHBx and APBx Bus Peripheral bus address
 */

#define PERIPH_BASE 		0x4000 0000U
#define APB1PERIPH_BASE 	PERIPH_BASE
#define APB2PERIPH_BASE 	0x4001 0000U
#define AHB1PERIPH_BASE 	0x4002 0000U
#define AHB2PERIPH_BASE		0x4800 0000U



/*
 *Base address of peripherals which are hanging on AHB1 bus
 */


#define GPIOA_BASEADDR  (0x48000000U)
#define GPIOB_BASEADDR  (0x48000400U)
#define GPIOC_BASEADDR  (0x48000800U)
#define GPIOD_BASEADDR  (0x4800C00U)
#define GPIOE_BASEADDR  (0x48001000U)
#define GPIOF_BASEADDR  (0x48001400U)
#define GPIOG_BASEADDR  (0x48001800U)
#define GPIOH_BASEADDR  (0x48001C00U)

#define ADC_BASEADDR    (0x50040000U)

#define RCC_BASEADDR	(0x40021000U)


/*
 * Base address of peripherals which are hanging on APB1 bus
 */

#define    RTC_BASEADDR                    0x40002800U

#define    SPI2_BASEADDR                   0x40003800U
#define    SPI3_BASEADDR                   0x40003C00U

#define    USART2_BASEADDR                 0x40004400U
#define    USART3_BASEADDR                 0x40004800U

#define    UART4_BASEADDR                  0x40004C00U
#define    UART5_BASEADDR				   0x40005000U

#define    I2C1_BASEADDR				   0x40005400U
#define    I2C2_BASEADDR				   0x40005800U
#define    I2C3_BASEADDR				   0x40005C00U

#define    DAC1_BASEADDR				   0x40007400U



/*
 *
 * Base address of peripherals which are hanging on APB2
 *
 */

#define    USART1_BASEADDR                0x40013800U

#define    SPI1_BASEADDR                  0x40013000U

#define    EXTI_BASEADDR                  0x40010400U

#define    SYSCFG_BASEADDR                0x40010000U


/*
 *
 *	Base address of peripherals which are hanging on AHB1
 *
 *
 */

#define    DMA1_BASEADDR				  0x40020000U
#define    DMA2_BASEADDR                  0x40020400U

/*******************************Peripheral register definition structure *********************************/



#define __vo volatile

/*
 * SPI registers Declaration
 *
 */

typedef struct
{
    __vo uint32_t SPI_CR1;       /*!< SPI control register 1      */
    __vo uint32_t SPI_CR2;       /*!< SPI control register 2      */
    __vo uint32_t SPI_SR;        /*!< SPI status register         */
    __vo uint32_t SPI_DR;        /*!< SPI data register           */
    __vo uint32_t SPI_CRCPR;     /*!< SPI CRC polynomial register */
    __vo uint32_t SPI_RXCRCR;    /*!< SPI RX CRC register         */
    __vo uint32_t SPI_TXCRCR;    /*!< SPI TX CRC register         */

} SPI_RegDef_t;


/*
 * Assigning names to SPI base address
 */
#define SPI1   ((SPI_RegDef_t*)SPI1_BASEADDR)
#define SPI2   ((SPI_RegDef_t*)SPI2_BASEADDR)
#define SPI3   ((SPI_RegDef_t*)SPI3_BASEADDR)







typedef struct
{
	volatile uint32_t  MODER;    //GPIO port mode register (GPIOx_MODER) offset 0x0
	volatile uint32_t  OTYPER;   //GPIO port output type register (GPIOx_OTYPER)  offset 0x04
	volatile uint32_t  OSPEEDR;  //GPIO port output speed register (GPIOx_OSPEEDR) offset 0x08
	volatile uint32_t  PUPDR;    //GPIO port pull-up/pull-down register (GPIOx_PUPDR)
	volatile uint32_t  IDR;     // GPIO port input data register (GPIOx_IDR)
	volatile uint32_t  ODR;      //GPIO port output data register (GPIOx_ODR)
	volatile uint32_t  BSSR;    //GPIO port bit set/reset register (GPIOx_BSRR)
	volatile uint32_t  LCKR;      //GPIO port configuration lock register (GPIOx_LCKR)
	volatile uint32_t  AFR[2];   //GPIO alternate function low  and high register (GPIOx_AFRL  and GPIO_ARRH)
	volatile uint32_t  BRR;      // GPIO port bit reset register (GPIOx_BRR)
	volatile uint32_t  ASCR;     // GPIO port analog switch control register (GPIOx_ASCR)

}GPIO_RegDef_t;      //GPIO registers structure








/*
 *	Structure for RCC clock
 */

typedef struct
{
    volatile uint32_t CR;          // 0x00: Clock control register
    volatile uint32_t ICSCR;       // 0x04: Internal clock sources calibration register
    volatile uint32_t CFGR;        // 0x08: Clock configuration register
    volatile uint32_t PLLCFGR;     // 0x0C: PLL configuration register
    volatile uint32_t PLLSAI1CFGR; // 0x10: PLLSAI1 configuration register
    volatile uint32_t PLLSAI2CFGR; // 0x14: PLLSAI2 configuration register
    volatile uint32_t CIER;        // 0x18: Clock interrupt enable register
    volatile uint32_t CIFR;        // 0x1C: Clock interrupt flag register
    volatile uint32_t CICR;        // 0x20: Clock interrupt clear register
    uint32_t RESERVED0;            // 0x24: Reserved
    volatile uint32_t AHB1RSTR;    // 0x28: AHB1 peripheral reset register
    volatile uint32_t AHB2RSTR;    // 0x2C: AHB2 peripheral reset register
    volatile uint32_t AHB3RSTR;    // 0x30: AHB3 peripheral reset register
    uint32_t RESERVED1;            // 0x34: Reserved
    volatile uint32_t APB1RSTR1;   // 0x38: APB1 peripheral reset register 1
    volatile uint32_t APB1RSTR2;   // 0x3C: APB1 peripheral reset register 2
    volatile uint32_t APB2RSTR;    // 0x40: APB2 peripheral reset register
    uint32_t RESERVED2;            // 0x44: Reserved
    volatile uint32_t AHB1ENR;     // 0x48: AHB1 peripheral clock enable register
    volatile uint32_t AHB2ENR;     // 0x4C: AHB2 peripheral clock enable register
    volatile uint32_t AHB3ENR;     // 0x50: AHB3 peripheral clock enable register
    uint32_t RESERVED3;            // 0x54: Reserved
    volatile uint32_t APB1ENR1;    // 0x58: APB1 peripheral clock enable register 1
    volatile uint32_t APB1ENR2;    // 0x5C: APB1 peripheral clock enable register 2
    volatile uint32_t APB2ENR;     // 0x60: APB2 peripheral clock enable register
    uint32_t RESERVED4;            // 0x64: Reserved
    volatile uint32_t AHB1SMENR;   // 0x68: AHB1 peripheral clocks enable in sleep/stop
    volatile uint32_t AHB2SMENR;   // 0x6C: AHB2 peripheral clocks enable in sleep/stop
    volatile uint32_t AHB3SMENR;   // 0x70: AHB3 peripheral clocks enable in sleep/stop
    uint32_t RESERVED5;            // 0x74: Reserved
    volatile uint32_t APB1SMENR1;  // 0x78: APB1 peripheral clocks enable in sleep/stop 1
    volatile uint32_t APB1SMENR2;  // 0x7C: APB1 peripheral clocks enable in sleep/stop 2
    volatile uint32_t APB2SMENR;   // 0x80: APB2 peripheral clocks enable in sleep/stop
    uint32_t RESERVED6;            // 0x84: Reserved
    volatile uint32_t CCIPR;       // 0x88: Peripherals independent clock config register
    uint32_t RESERVED7;            // 0x8C: Reserved
    volatile uint32_t BDCR;        // 0x90: Backup domain control register
    volatile uint32_t CSR;         // 0x94: Control/status register
    volatile uint32_t CRRCR;       // 0x98: Clock recovery RC register
    volatile uint32_t CCIPR2;      // 0x9C: Peripherals independent clock config register 2
} RCC_RegDef_t;

/*
 * EXTI peripheral register definition structure
 */

typedef struct
{
    volatile uint32_t IMR1;    /*!< Interrupt mask register 1,      Address offset: 0x00 */
    volatile uint32_t EMR1;    /*!< Event mask register 1,          Address offset: 0x04 */
    volatile uint32_t RTSR1;   /*!< Rising trigger selection reg 1, Address offset: 0x08 */
    volatile uint32_t FTSR1;   /*!< Falling trigger selection reg 1,Address offset: 0x0C */
    volatile uint32_t SWIER1;  /*!< Software interrupt event reg 1, Address offset: 0x10 */
    volatile uint32_t PR1;     /*!< Pending register 1,             Address offset: 0x14 */
    uint32_t RESERVED1[2];     /*!< Reserved                        Address offset: 0x18â€“0x1C */
    volatile uint32_t IMR2;    /*!< Interrupt mask register 2,      Address offset: 0x20 */
    volatile uint32_t EMR2;    /*!< Event mask register 2,          Address offset: 0x24 */
    volatile uint32_t RTSR2;   /*!< Rising trigger selection reg 2, Address offset: 0x28 */
    volatile uint32_t FTSR2;   /*!< Falling trigger selection reg 2,Address offset: 0x2C */
    volatile uint32_t SWIER2;  /*!< Software interrupt event reg 2, Address offset: 0x30 */
    volatile uint32_t PR2;     /*!< Pending register 2,             Address offset: 0x34 */
} EXTI_RegDef_t;

#define    EXTI  ((EXTI_RegDef_t*)EXTI_BASEADDR)

//EXTI lines IRQ numbers
#define IRQ_NO_EXTI0       6
#define IRQ_NO_EXTI1       7
#define IRQ_NO_EXTI2       8
#define IRQ_NO_EXTI3       9
#define IRQ_NO_EXTI4       10
#define IRQ_NO_EXTI9_5     23
#define IRQ_NO_EXTI15_10   40


//NVIC priority
#define NVIC_IRQ_PRI0   0   // Highest priority
#define NVIC_IRQ_PRI1   1
#define NVIC_IRQ_PRI2   2
#define NVIC_IRQ_PRI3   3
#define NVIC_IRQ_PRI4   4
#define NVIC_IRQ_PRI5   5
#define NVIC_IRQ_PRI6   6
#define NVIC_IRQ_PRI7   7
#define NVIC_IRQ_PRI8   8
#define NVIC_IRQ_PRI9   9
#define NVIC_IRQ_PRI10  10
#define NVIC_IRQ_PRI11  11
#define NVIC_IRQ_PRI12  12
#define NVIC_IRQ_PRI13  13
#define NVIC_IRQ_PRI14  14
#define NVIC_IRQ_PRI15  15  // Lowest priority



typedef struct
{
    volatile uint32_t MEMRMP;       /*!< SYSCFG memory remap register,              Address offset: 0x00 */
    volatile uint32_t CFGR1;        /*!< SYSCFG configuration register 1,           Address offset: 0x04 */
    volatile uint32_t EXTICR[4];    /*!< SYSCFG external interrupt config registers,0x08â€“0x14 */
    volatile uint32_t SCSR;         /*!< SYSCFG SRAM2 control and status register,  Address offset: 0x18 */
    volatile uint32_t CFGR2;        /*!< SYSCFG configuration register 2,           Address offset: 0x1C */
    volatile uint32_t SWPR;         /*!< SYSCFG SRAM2 write protection register,    Address offset: 0x20 */
    volatile uint32_t SKR;          /*!< SYSCFG SRAM2 key register,                 Address offset: 0x24 */
} SYSCFG_RegDef_t;

#define   SYSCFG    ((SYSCFG_RegDef_t*)SYSCFG_BASEADDR)




/*
 *Defining names to Peripherals Base address
 *
 */

#define   GPIOA       ((GPIO_RegDef_t*)GPIOA_BASEADDR)
#define   GPIOB       ((GPIO_RegDef_t*)GPIOB_BASEADDR)
#define   GPIOC       ((GPIO_RegDef_t*)GPIOC_BASEADDR)
#define   GPIOD       ((GPIO_RegDef_t*)GPIOD_BASEADDR)
#define   GPIOE       ((GPIO_RegDef_t*)GPIOE_BASEADDR)
#define   GPIOF       ((GPIO_RegDef_t*)GPIOF_BASEADDR)
#define   GPIOG       ((GPIO_RegDef_t*)GPIOG_BASEADDR)
#define   GPIOH       ((GPIO_RegDef_t*)GPIOH_BASEADDR)



#define		RCC 		((RCC_RegDef_t*)RCC_BASEADDR)

#define 	EXTI 		((EXTI_RegDef_t*)EXTI_BASEADDR)



/*
 * Macros for enabling GPIOx clock
 *
 */

#define GPIOA_PCLK_EN()    (RCC->AHB2ENR |= (1 << 0))
#define GPIOB_PCLK_EN()    (RCC->AHB2ENR |= (1 << 1))
#define GPIOC_PCLK_EN()    (RCC->AHB2ENR |= (1 << 2))
#define GPIOD_PCLK_EN()    (RCC->AHB2ENR |= (1 << 3))
#define GPIOE_PCLK_EN()    (RCC->AHB2ENR |= (1 << 4))
#define GPIOF_PCLK_EN()    (RCC->AHB2ENR |= (1 << 5))
#define GPIOG_PCLK_EN()    (RCC->AHB2ENR |= (1 << 6))
#define GPIOH_PCLK_EN()    (RCC->AHB2ENR |= (1 << 7))

/*
 *
 *	Macros for enabling SPIx clock
 */

#define SPI1_PCLK_EN()     (RCC->APB2ENR |= (1 << 12))
#define SPI2_PCLK_EN()     (RCC->APB1ENR1 |= (1 << 14))
#define SPI3_PCLK_EN()     (RCC->APB1ENR1 |= (1 << 15))

/*
 *
 * Macros for enabling I2Cx clock
 */

#define I2C1_PCLK_EN()     (RCC->APB1ENR1 |= (1 << 21))
#define I2C2_PCLK_EN()     (RCC->APB1ENR1 |= (1 << 22))
#define I2C3_PCLK_EN()     (RCC->APB1ENR1 |= (1 << 23))

/*
 *
 *	Macros for enabling UARTx clock
 */

#define USART1_PCLK_EN()   (RCC->APB2ENR |= (1 << 14))
#define USART2_PCLK_EN()   (RCC->APB1ENR1 |= (1 << 17))
#define USART3_PCLK_EN()   (RCC->APB1ENR1 |= (1 << 18))
#define UART4_PCLK_EN()    (RCC->APB1ENR1 |= (1 << 19))
#define UART5_PCLK_EN()    (RCC->APB1ENR1 |= (1 << 20))

/*
 *
 * Macros for enabling DMAx RCC Clock
 */

#define DMA1_PCLK_EN()     (RCC->AHB1ENR |= (1 << 0))
#define DMA2_PCLK_EN()     (RCC->AHB1ENR |= (1 << 1))

/*
 *
 * Macros for enabling ADC clock
 */

#define ADC_PCLK_EN()      (RCC->AHB2ENR |= (1 << 13))

/*
 *
 *	Macros for enabling DAC clock
 *
 */

#define DAC1_PCLK_EN()     (RCC->APB1ENR1 |= (1 << 29))

/*
 *
 * Macro for enabling System configuration clock
 */

#define SYSCFG_PCLK_EN()   (RCC->APB2ENR |= (1 << 0))

/*
 * Macros for disabling clock
 *
 */

/*
 * macros for disabling GPIOx RCC clock
 */

#define GPIOA_PCLK_DI()    (RCC->AHB2ENR &= ~(1 << 0))
#define GPIOB_PCLK_DI()    (RCC->AHB2ENR &= ~(1 << 1))
#define GPIOC_PCLK_DI()    (RCC->AHB2ENR &= ~(1 << 2))
#define GPIOD_PCLK_DI()    (RCC->AHB2ENR &= ~(1 << 3))
#define GPIOE_PCLK_DI()    (RCC->AHB2ENR &= ~(1 << 4))
#define GPIOF_PCLK_DI()    (RCC->AHB2ENR &= ~(1 << 5))
#define GPIOG_PCLK_DI()    (RCC->AHB2ENR &= ~(1 << 6))
#define GPIOH_PCLK_DI()    (RCC->AHB2ENR &= ~(1 << 7))

/*
 * Macros for disabling SPIx RCC clock
 */
#define SPI1_PCLK_DI()     (RCC->APB2ENR  &= ~(1 << 12))
#define SPI2_PCLK_DI()     (RCC->APB1ENR1 &= ~(1 << 14))
#define SPI3_PCLK_DI()     (RCC->APB1ENR1 &= ~(1 << 15))

/*
 * Macros for disabling I2Cx RCC clock
 */
#define I2C1_PCLK_DI()     (RCC->APB1ENR1 &= ~(1 << 21))
#define I2C2_PCLK_DI()     (RCC->APB1ENR1 &= ~(1 << 22))
#define I2C3_PCLK_DI()     (RCC->APB1ENR1 &= ~(1 << 23))

/*
 * Macros for disabling USARTx RCC clock
 */

#define USART1_PCLK_DI()   (RCC->APB2ENR  &= ~(1 << 14))
#define USART2_PCLK_DI()   (RCC->APB1ENR1 &= ~(1 << 17))
#define USART3_PCLK_DI()   (RCC->APB1ENR1 &= ~(1 << 18))
#define UART4_PCLK_DI()    (RCC->APB1ENR1 &= ~(1 << 19))
#define UART5_PCLK_DI()    (RCC->APB1ENR1 &= ~(1 << 20))

/*
 * Macros for disabling DMAx RCC clock
 */
#define DMA1_PCLK_DI()     (RCC->AHB1ENR  &= ~(1 << 0))
#define DMA2_PCLK_DI()     (RCC->AHB1ENR  &= ~(1 << 1))

/*
 *
 * Macros for disabling ADC clock
 */

#define ADC_PCLK_DI()      (RCC->AHB2ENR  &= ~(1 << 13))

/*
 *
 * Macros for disabling DAC clock
 */

#define DAC1_PCLK_DI()     (RCC->APB1ENR1 &= ~(1 << 29))

/*
 *
 * Macro for disabling System configuration clock
 */
#define SYSCFG_PCLK_DI()   (RCC->APB2ENR  &= ~(1 << 0))

/*
 *
 * Macros related GPIO RESET setting
 */

#define GPIOA_REG_RESET()    do{ (RCC->AHB1RSTR |= (1 << 0));  (RCC->AHB1RSTR &= ~(1 << 0)); } while(0)
#define GPIOB_REG_RESET()    do{ (RCC->AHB1RSTR |= (1 << 1));  (RCC->AHB1RSTR &= ~(1 << 1)); } while(0)
#define GPIOC_REG_RESET()    do{ (RCC->AHB1RSTR |= (1 << 2));  (RCC->AHB1RSTR &= ~(1 << 2)); } while(0)
#define GPIOD_REG_RESET()    do{ (RCC->AHB1RSTR |= (1 << 3));  (RCC->AHB1RSTR &= ~(1 << 3)); } while(0)
#define GPIOE_REG_RESET()    do{ (RCC->AHB1RSTR |= (1 << 4));  (RCC->AHB1RSTR &= ~(1 << 4)); } while(0)
#define GPIOF_REG_RESET()    do{ (RCC->AHB1RSTR |= (1 << 5));  (RCC->AHB1RSTR &= ~(1 << 5)); } while(0)
#define GPIOG_REG_RESET()    do{ (RCC->AHB1RSTR |= (1 << 6));  (RCC->AHB1RSTR &= ~(1 << 6)); } while(0)
#define GPIOH_REG_RESET()    do{ (RCC->AHB1RSTR |= (1 << 7));  (RCC->AHB1RSTR &= ~(1 << 7)); } while(0)


/*
 * Macros related to GPIO RESET setting
 */

#define SPI1_REG_RESET()   do{ (RCC->APB2RSTR |= (1 << 12)); (RCC->APB2RSTR &= ~(1 << 12)); }while(0)
#define SPI2_REG_RESET()   do{ (RCC->APB1RSTR1 |= (1 << 14)); (RCC->APB1RSTR1 &= ~(1 << 14)); }while(0)
#define SPI3_REG_RESET()   do{ (RCC->APB1RSTR1 |= (1 << 15)); (RCC->APB1RSTR1 &= ~(1 << 15)); }while(0)


/*
 *  Generic macros
 */
#define ENABLE          1
#define DISABLE         0
#define SET             1
#define RESET           0
#define GPIO_PIN_SET    SET
#define GPIO_PIN_RESET  RESET

/*
 * Code to base address
 */

#define GPIO_BASEADDR_TO_CODE(x)   ( (x == GPIOA) ? 0 :\
                                     (x == GPIOB) ? 1 :\
                                     (x == GPIOC) ? 2 :\
                                     (x == GPIOD) ? 3 :\
                                     (x == GPIOE) ? 4 :\
                                     (x == GPIOF) ? 5 :\
                                     (x == GPIOG) ? 6 :\
                                    (x == GPIOH) ? 7 : 0 )



/*
 * Bit position macros for SPI peripheral
 *
 */

/******************* Bit position definitions for SPI_CR1 register *******************/
#define SPI_CR1_CPHA        0   /*!< Clock Phase                         */
#define SPI_CR1_CPOL        1   /*!< Clock Polarity                      */
#define SPI_CR1_MSTR        2   /*!< Master Selection                    */
#define SPI_CR1_BR          3   /*!< Baud Rate Control [5:3]             */
#define SPI_CR1_SPE         6   /*!< SPI Enable                          */
#define SPI_CR1_LSBFIRST    7   /*!< Frame Format (LSB/MSB first)        */
#define SPI_CR1_SSI         8   /*!< Internal Slave Select               */
#define SPI_CR1_SSM         9   /*!< Software Slave Management           */
#define SPI_CR1_RXONLY      10  /*!< Receive Only                        */
#define SPI_CR1_DFF         11  /*!< Data Frame Format (8/16 bit) [on some series] */
#define SPI_CR1_CRCNEXT     12  /*!< CRC Transfer Next                   */
#define SPI_CR1_CRCEN       13  /*!< Hardware CRC Calculation Enable     */
#define SPI_CR1_BIDIOE      14  /*!< Output Enable in Bidirectional Mode */
#define SPI_CR1_BIDIMODE    15  /*!< Bidirectional Data Mode Enable      */

/******************* Bit position definitions for SPI_CR2 register *******************/
#define SPI_CR2_RXDMAEN     0   /*!< Rx Buffer DMA Enable                */
#define SPI_CR2_TXDMAEN     1   /*!< Tx Buffer DMA Enable                */
#define SPI_CR2_SSOE        2   /*!< SS Output Enable                    */
#define SPI_CR2_NSSP        3   /*!< NSS Pulse Management                */
#define SPI_CR2_FRF         4   /*!< Frame Format                        */
#define SPI_CR2_ERRIE       5   /*!< Error Interrupt Enable              */
#define SPI_CR2_RXNEIE      6   /*!< RX buffer Not Empty Interrupt Enable*/
#define SPI_CR2_TXEIE       7   /*!< Tx buffer Empty Interrupt Enable    */
#define SPI_CR2_DS          8   /*!< Data Size [11:8]                    */
#define SPI_CR2_FRXTH       12  /*!< FIFO Reception Threshold            */
#define SPI_CR2_LDMA_RX     13  /*!< Last DMA transfer for reception     */
#define SPI_CR2_LDMA_TX     14  /*!< Last DMA transfer for transmission  */

#endif /* INC_STM32L4XX_H_ */
