
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000081c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080009a8  080009a8  000019a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009b4  080009b4  000019c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080009b4  080009b4  000019b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080009bc  080009c4  000019c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009bc  080009bc  000019bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009c0  080009c0  000019c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000019c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000019c4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000011ef  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000417  00000000  00000000  00002be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000110  00000000  00000000  00003000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c0  00000000  00000000  00003110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000216d  00000000  00000000  000031d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001748  00000000  00000000  0000533d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000093b8  00000000  00000000  00006a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000fe3d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000368  00000000  00000000  0000fe80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  000101e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000990 	.word	0x08000990

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000004 	.word	0x20000004
 80001c8:	08000990 	.word	0x08000990

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <SPI1_GPIOInits>:
 * 	PA5	 SPI1_SCK
 *  PA4	 SPI1_NSS
 * 	AF5
 */

void SPI1_GPIOInits(void){
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins ;

	//enable clock

	GPIO_PeriClockControl(GPIOA, ENABLE);
 80001e2:	2101      	movs	r1, #1
 80001e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001e8:	f000 f88c 	bl	8000304 <GPIO_PeriClockControl>


	SPIPins.pGPIOx = GPIOA ;
 80001ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001f0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode= GPIO_MODE_ALTFN;
 80001f2:	2302      	movs	r3, #2
 80001f4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5 ;
 80001f6:	2305      	movs	r3, #5
 80001f8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP ;
 80001fa:	2300      	movs	r3, #0
 80001fc:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD ;
 80001fe:	2300      	movs	r3, #0
 8000200:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST ;
 8000202:	2302      	movs	r3, #2
 8000204:	72bb      	strb	r3, [r7, #10]



	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5 ;
 8000206:	2305      	movs	r3, #5
 8000208:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	4618      	mov	r0, r3
 800020e:	f000 f943 	bl	8000498 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000212:	2307      	movs	r3, #7
 8000214:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4618      	mov	r0, r3
 800021a:	f000 f93d 	bl	8000498 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800021e:	2306      	movs	r3, #6
 8000220:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f937 	bl	8000498 <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 800022a:	2304      	movs	r3, #4
 800022c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f931 	bl	8000498 <GPIO_Init>
}
 8000236:	bf00      	nop
 8000238:	3710      	adds	r7, #16
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}

0800023e <SPI1_Inits>:



void SPI1_Inits(void){
 800023e:	b580      	push	{r7, lr}
 8000240:	b084      	sub	sp, #16
 8000242:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle ;

	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD ;
 8000244:	2301      	movs	r3, #1
 8000246:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER ;
 8000248:	2301      	movs	r3, #1
 800024a:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2 ;
 800024c:	2300      	movs	r3, #0
 800024e:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS ;
 8000250:	2300      	movs	r3, #0
 8000252:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW ;
 8000254:	2300      	movs	r3, #0
 8000256:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW ;
 8000258:	2300      	movs	r3, #0
 800025a:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN ;
 800025c:	2301      	movs	r3, #1
 800025e:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	4618      	mov	r0, r3
 8000264:	f000 fabc 	bl	80007e0 <SPI_Init>

}
 8000268:	bf00      	nop
 800026a:	3710      	adds	r7, #16
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}

08000270 <main>:


int main(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0

	char user_data[]="hello world";
 8000276:	4a0c      	ldr	r2, [pc, #48]	@ (80002a8 <main+0x38>)
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	ca07      	ldmia	r2, {r0, r1, r2}
 800027c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	SPI1_GPIOInits();
 8000280:	f7ff ffac 	bl	80001dc <SPI1_GPIOInits>
	SPI1_Inits();
 8000284:	f7ff ffdb 	bl	800023e <SPI1_Inits>
	SPI_PeripheralControl(SPI1 , ENABLE );
 8000288:	2101      	movs	r1, #1
 800028a:	4808      	ldr	r0, [pc, #32]	@ (80002ac <main+0x3c>)
 800028c:	f000 fb3f 	bl	800090e <SPI_PeripheralControl>

	SPI_SendData(SPI1 ,(uint8_t*) user_data , strlen(user_data));
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	4618      	mov	r0, r3
 8000294:	f7ff ff9a 	bl	80001cc <strlen>
 8000298:	4602      	mov	r2, r0
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4619      	mov	r1, r3
 800029e:	4803      	ldr	r0, [pc, #12]	@ (80002ac <main+0x3c>)
 80002a0:	f000 fafe 	bl	80008a0 <SPI_SendData>

	while(1);
 80002a4:	bf00      	nop
 80002a6:	e7fd      	b.n	80002a4 <main+0x34>
 80002a8:	080009a8 	.word	0x080009a8
 80002ac:	40013000 	.word	0x40013000

080002b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b0:	480d      	ldr	r0, [pc, #52]	@ (80002e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b8:	480c      	ldr	r0, [pc, #48]	@ (80002ec <LoopForever+0x6>)
  ldr r1, =_edata
 80002ba:	490d      	ldr	r1, [pc, #52]	@ (80002f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002bc:	4a0d      	ldr	r2, [pc, #52]	@ (80002f4 <LoopForever+0xe>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c0:	e002      	b.n	80002c8 <LoopCopyDataInit>

080002c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c6:	3304      	adds	r3, #4

080002c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002cc:	d3f9      	bcc.n	80002c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ce:	4a0a      	ldr	r2, [pc, #40]	@ (80002f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d0:	4c0a      	ldr	r4, [pc, #40]	@ (80002fc <LoopForever+0x16>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d4:	e001      	b.n	80002da <LoopFillZerobss>

080002d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d8:	3204      	adds	r2, #4

080002da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002dc:	d3fb      	bcc.n	80002d6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80002de:	f000 fb33 	bl	8000948 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80002e2:	f7ff ffc5 	bl	8000270 <main>

080002e6 <LoopForever>:

LoopForever:
  b LoopForever
 80002e6:	e7fe      	b.n	80002e6 <LoopForever>
  ldr   r0, =_estack
 80002e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f4:	080009c4 	.word	0x080009c4
  ldr r2, =_sbss
 80002f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002fc:	2000001c 	.word	0x2000001c

08000300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000300:	e7fe      	b.n	8000300 <ADC1_2_IRQHandler>
	...

08000304 <GPIO_PeriClockControl>:
  * @Note         - The function uses macros GPIOx_PCLK_EN() / GPIOx_PCLK_DI()
  *                 which should be defined in the MCU header file for clock control.
  ******************************************************************************
  */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx,uint8_t EnorDi){
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi != ENABLE ){
 8000310:	78fb      	ldrb	r3, [r7, #3]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d057      	beq.n	80003c6 <GPIO_PeriClockControl+0xc2>

		if(pGPIOx == GPIOA ){
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800031c:	d106      	bne.n	800032c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_DI();
 800031e:	4b58      	ldr	r3, [pc, #352]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000322:	4a57      	ldr	r2, [pc, #348]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000324:	f023 0301 	bic.w	r3, r3, #1
 8000328:	64d3      	str	r3, [r2, #76]	@ 0x4c

		}else if(pGPIOx == GPIOF ){
			GPIOF_PCLK_EN();
		}
	}
}
 800032a:	e0a3      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB ){
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a55      	ldr	r2, [pc, #340]	@ (8000484 <GPIO_PeriClockControl+0x180>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d106      	bne.n	8000342 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_DI();
 8000334:	4b52      	ldr	r3, [pc, #328]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000338:	4a51      	ldr	r2, [pc, #324]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 800033a:	f023 0302 	bic.w	r3, r3, #2
 800033e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000340:	e098      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC ){
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a50      	ldr	r2, [pc, #320]	@ (8000488 <GPIO_PeriClockControl+0x184>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d106      	bne.n	8000358 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_DI();
 800034a:	4b4d      	ldr	r3, [pc, #308]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800034e:	4a4c      	ldr	r2, [pc, #304]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000350:	f023 0304 	bic.w	r3, r3, #4
 8000354:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000356:	e08d      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD ){
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a4c      	ldr	r2, [pc, #304]	@ (800048c <GPIO_PeriClockControl+0x188>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d106      	bne.n	800036e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_DI();
 8000360:	4b47      	ldr	r3, [pc, #284]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000364:	4a46      	ldr	r2, [pc, #280]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000366:	f023 0308 	bic.w	r3, r3, #8
 800036a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800036c:	e082      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE ){
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a47      	ldr	r2, [pc, #284]	@ (8000490 <GPIO_PeriClockControl+0x18c>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_DI();
 8000376:	4b42      	ldr	r3, [pc, #264]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800037a:	4a41      	ldr	r2, [pc, #260]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 800037c:	f023 0310 	bic.w	r3, r3, #16
 8000380:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000382:	e077      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF ){
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a43      	ldr	r2, [pc, #268]	@ (8000494 <GPIO_PeriClockControl+0x190>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_DI();
 800038c:	4b3c      	ldr	r3, [pc, #240]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 800038e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000390:	4a3b      	ldr	r2, [pc, #236]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000392:	f023 0320 	bic.w	r3, r3, #32
 8000396:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000398:	e06c      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE ){
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a3c      	ldr	r2, [pc, #240]	@ (8000490 <GPIO_PeriClockControl+0x18c>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d106      	bne.n	80003b0 <GPIO_PeriClockControl+0xac>
			GPIOE_PCLK_DI();
 80003a2:	4b37      	ldr	r3, [pc, #220]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a6:	4a36      	ldr	r2, [pc, #216]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 80003a8:	f023 0310 	bic.w	r3, r3, #16
 80003ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003ae:	e061      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF ){
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a38      	ldr	r2, [pc, #224]	@ (8000494 <GPIO_PeriClockControl+0x190>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d15d      	bne.n	8000474 <GPIO_PeriClockControl+0x170>
			GPIOF_PCLK_DI();
 80003b8:	4b31      	ldr	r3, [pc, #196]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 80003ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003bc:	4a30      	ldr	r2, [pc, #192]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 80003be:	f023 0320 	bic.w	r3, r3, #32
 80003c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003c4:	e056      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA ){
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80003cc:	d106      	bne.n	80003dc <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_EN();
 80003ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 80003d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003d2:	4a2b      	ldr	r2, [pc, #172]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003da:	e04b      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB ){
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a29      	ldr	r2, [pc, #164]	@ (8000484 <GPIO_PeriClockControl+0x180>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d106      	bne.n	80003f2 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_EN();
 80003e4:	4b26      	ldr	r3, [pc, #152]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 80003e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e8:	4a25      	ldr	r2, [pc, #148]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 80003ea:	f043 0302 	orr.w	r3, r3, #2
 80003ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003f0:	e040      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC ){
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a24      	ldr	r2, [pc, #144]	@ (8000488 <GPIO_PeriClockControl+0x184>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d106      	bne.n	8000408 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_EN();
 80003fa:	4b21      	ldr	r3, [pc, #132]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fe:	4a20      	ldr	r2, [pc, #128]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000400:	f043 0304 	orr.w	r3, r3, #4
 8000404:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000406:	e035      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD ){
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a20      	ldr	r2, [pc, #128]	@ (800048c <GPIO_PeriClockControl+0x188>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d106      	bne.n	800041e <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_EN();
 8000410:	4b1b      	ldr	r3, [pc, #108]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000414:	4a1a      	ldr	r2, [pc, #104]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000416:	f043 0308 	orr.w	r3, r3, #8
 800041a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800041c:	e02a      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE ){
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a1b      	ldr	r2, [pc, #108]	@ (8000490 <GPIO_PeriClockControl+0x18c>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d106      	bne.n	8000434 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_EN();
 8000426:	4b16      	ldr	r3, [pc, #88]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042a:	4a15      	ldr	r2, [pc, #84]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 800042c:	f043 0310 	orr.w	r3, r3, #16
 8000430:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000432:	e01f      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF ){
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a17      	ldr	r2, [pc, #92]	@ (8000494 <GPIO_PeriClockControl+0x190>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d106      	bne.n	800044a <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_EN();
 800043c:	4b10      	ldr	r3, [pc, #64]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 800043e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000440:	4a0f      	ldr	r2, [pc, #60]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000442:	f043 0320 	orr.w	r3, r3, #32
 8000446:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000448:	e014      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE ){
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a10      	ldr	r2, [pc, #64]	@ (8000490 <GPIO_PeriClockControl+0x18c>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d106      	bne.n	8000460 <GPIO_PeriClockControl+0x15c>
			GPIOE_PCLK_EN();
 8000452:	4b0b      	ldr	r3, [pc, #44]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000456:	4a0a      	ldr	r2, [pc, #40]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000458:	f043 0310 	orr.w	r3, r3, #16
 800045c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800045e:	e009      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF ){
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a0c      	ldr	r2, [pc, #48]	@ (8000494 <GPIO_PeriClockControl+0x190>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d105      	bne.n	8000474 <GPIO_PeriClockControl+0x170>
			GPIOF_PCLK_EN();
 8000468:	4b05      	ldr	r3, [pc, #20]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 800046a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046c:	4a04      	ldr	r2, [pc, #16]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 800046e:	f043 0320 	orr.w	r3, r3, #32
 8000472:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000474:	bf00      	nop
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr
 8000480:	40021000 	.word	0x40021000
 8000484:	48000400 	.word	0x48000400
 8000488:	48000800 	.word	0x48000800
 800048c:	04800c00 	.word	0x04800c00
 8000490:	48001000 	.word	0x48001000
 8000494:	48001400 	.word	0x48001400

08000498 <GPIO_Init>:
  * @param[in] pGPIOHandle - Handle structure that contains GPIO configuration information.
  * @return    - None
  * @note      - Make sure peripheral clock for GPIO is enabled before calling this function.
  */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000498:	b480      	push	{r7}
 800049a:	b087      	sub	sp, #28
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]

    // 1. Configure the mode of GPIO pin
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	795b      	ldrb	r3, [r3, #5]
 80004a8:	2b03      	cmp	r3, #3
 80004aa:	d822      	bhi.n	80004f2 <GPIO_Init+0x5a>
    {
        // non-interrupt mode
        temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	795b      	ldrb	r3, [r3, #5]
 80004b0:	461a      	mov	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	791b      	ldrb	r3, [r3, #4]
 80004b6:	005b      	lsls	r3, r3, #1
 80004b8:	fa02 f303 	lsl.w	r3, r2, r3
 80004bc:	617b      	str	r3, [r7, #20]
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	791b      	ldrb	r3, [r3, #4]
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	2103      	movs	r1, #3
 80004cc:	fa01 f303 	lsl.w	r3, r1, r3
 80004d0:	43db      	mvns	r3, r3
 80004d2:	4619      	mov	r1, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	400a      	ands	r2, r1
 80004da:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	6819      	ldr	r1, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	697a      	ldr	r2, [r7, #20]
 80004e8:	430a      	orrs	r2, r1
 80004ea:	601a      	str	r2, [r3, #0]
        temp = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	e0d2      	b.n	8000698 <GPIO_Init+0x200>
    {


        // interrupt mode

    	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	795b      	ldrb	r3, [r3, #5]
 80004f6:	2b04      	cmp	r3, #4
 80004f8:	d117      	bne.n	800052a <GPIO_Init+0x92>
    	{
    	    //1. Configure the FTSR (Falling Trigger Selection Register)
    	    EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004fa:	4b47      	ldr	r3, [pc, #284]	@ (8000618 <GPIO_Init+0x180>)
 80004fc:	68db      	ldr	r3, [r3, #12]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	7912      	ldrb	r2, [r2, #4]
 8000502:	4611      	mov	r1, r2
 8000504:	2201      	movs	r2, #1
 8000506:	408a      	lsls	r2, r1
 8000508:	4611      	mov	r1, r2
 800050a:	4a43      	ldr	r2, [pc, #268]	@ (8000618 <GPIO_Init+0x180>)
 800050c:	430b      	orrs	r3, r1
 800050e:	60d3      	str	r3, [r2, #12]

    	    //Clear the corresponding RTSR bit (just in case)
    	    EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000510:	4b41      	ldr	r3, [pc, #260]	@ (8000618 <GPIO_Init+0x180>)
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	7912      	ldrb	r2, [r2, #4]
 8000518:	4611      	mov	r1, r2
 800051a:	2201      	movs	r2, #1
 800051c:	408a      	lsls	r2, r1
 800051e:	43d2      	mvns	r2, r2
 8000520:	4611      	mov	r1, r2
 8000522:	4a3d      	ldr	r2, [pc, #244]	@ (8000618 <GPIO_Init+0x180>)
 8000524:	400b      	ands	r3, r1
 8000526:	6093      	str	r3, [r2, #8]
 8000528:	e035      	b.n	8000596 <GPIO_Init+0xfe>

    	}
    	else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	795b      	ldrb	r3, [r3, #5]
 800052e:	2b05      	cmp	r3, #5
 8000530:	d117      	bne.n	8000562 <GPIO_Init+0xca>
    	{
    	    //1. Configure the RTSR (Rising Trigger Selection Register)
    	    EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000532:	4b39      	ldr	r3, [pc, #228]	@ (8000618 <GPIO_Init+0x180>)
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	7912      	ldrb	r2, [r2, #4]
 800053a:	4611      	mov	r1, r2
 800053c:	2201      	movs	r2, #1
 800053e:	408a      	lsls	r2, r1
 8000540:	4611      	mov	r1, r2
 8000542:	4a35      	ldr	r2, [pc, #212]	@ (8000618 <GPIO_Init+0x180>)
 8000544:	430b      	orrs	r3, r1
 8000546:	6093      	str	r3, [r2, #8]

    	    //Clear the corresponding FTSR bit (just in case)
    	    EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000548:	4b33      	ldr	r3, [pc, #204]	@ (8000618 <GPIO_Init+0x180>)
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	7912      	ldrb	r2, [r2, #4]
 8000550:	4611      	mov	r1, r2
 8000552:	2201      	movs	r2, #1
 8000554:	408a      	lsls	r2, r1
 8000556:	43d2      	mvns	r2, r2
 8000558:	4611      	mov	r1, r2
 800055a:	4a2f      	ldr	r2, [pc, #188]	@ (8000618 <GPIO_Init+0x180>)
 800055c:	400b      	ands	r3, r1
 800055e:	60d3      	str	r3, [r2, #12]
 8000560:	e019      	b.n	8000596 <GPIO_Init+0xfe>
    	}
    	else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	795b      	ldrb	r3, [r3, #5]
 8000566:	2b06      	cmp	r3, #6
 8000568:	d115      	bne.n	8000596 <GPIO_Init+0xfe>
    	{
    	    //1. Configure both FTSR and RTSR
    	    EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800056a:	4b2b      	ldr	r3, [pc, #172]	@ (8000618 <GPIO_Init+0x180>)
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	7912      	ldrb	r2, [r2, #4]
 8000572:	4611      	mov	r1, r2
 8000574:	2201      	movs	r2, #1
 8000576:	408a      	lsls	r2, r1
 8000578:	4611      	mov	r1, r2
 800057a:	4a27      	ldr	r2, [pc, #156]	@ (8000618 <GPIO_Init+0x180>)
 800057c:	430b      	orrs	r3, r1
 800057e:	6093      	str	r3, [r2, #8]
    	    EXTI->FTSR1|= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000580:	4b25      	ldr	r3, [pc, #148]	@ (8000618 <GPIO_Init+0x180>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	7912      	ldrb	r2, [r2, #4]
 8000588:	4611      	mov	r1, r2
 800058a:	2201      	movs	r2, #1
 800058c:	408a      	lsls	r2, r1
 800058e:	4611      	mov	r1, r2
 8000590:	4a21      	ldr	r2, [pc, #132]	@ (8000618 <GPIO_Init+0x180>)
 8000592:	430b      	orrs	r3, r1
 8000594:	60d3      	str	r3, [r2, #12]
    	}

    	//2. Configure the GPIO port selection in SYSCFG_EXTICR
    	uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	791b      	ldrb	r3, [r3, #4]
 800059a:	089b      	lsrs	r3, r3, #2
 800059c:	74fb      	strb	r3, [r7, #19]
    	uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	791b      	ldrb	r3, [r3, #4]
 80005a2:	f003 0303 	and.w	r3, r3, #3
 80005a6:	74bb      	strb	r3, [r7, #18]
    	uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80005b0:	d042      	beq.n	8000638 <GPIO_Init+0x1a0>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a19      	ldr	r2, [pc, #100]	@ (800061c <GPIO_Init+0x184>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d02b      	beq.n	8000614 <GPIO_Init+0x17c>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a17      	ldr	r2, [pc, #92]	@ (8000620 <GPIO_Init+0x188>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d024      	beq.n	8000610 <GPIO_Init+0x178>
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a16      	ldr	r2, [pc, #88]	@ (8000624 <GPIO_Init+0x18c>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d01d      	beq.n	800060c <GPIO_Init+0x174>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a14      	ldr	r2, [pc, #80]	@ (8000628 <GPIO_Init+0x190>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d016      	beq.n	8000608 <GPIO_Init+0x170>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a13      	ldr	r2, [pc, #76]	@ (800062c <GPIO_Init+0x194>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d00f      	beq.n	8000604 <GPIO_Init+0x16c>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a11      	ldr	r2, [pc, #68]	@ (8000630 <GPIO_Init+0x198>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d008      	beq.n	8000600 <GPIO_Init+0x168>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a10      	ldr	r2, [pc, #64]	@ (8000634 <GPIO_Init+0x19c>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d101      	bne.n	80005fc <GPIO_Init+0x164>
 80005f8:	2307      	movs	r3, #7
 80005fa:	e01e      	b.n	800063a <GPIO_Init+0x1a2>
 80005fc:	2300      	movs	r3, #0
 80005fe:	e01c      	b.n	800063a <GPIO_Init+0x1a2>
 8000600:	2306      	movs	r3, #6
 8000602:	e01a      	b.n	800063a <GPIO_Init+0x1a2>
 8000604:	2305      	movs	r3, #5
 8000606:	e018      	b.n	800063a <GPIO_Init+0x1a2>
 8000608:	2304      	movs	r3, #4
 800060a:	e016      	b.n	800063a <GPIO_Init+0x1a2>
 800060c:	2303      	movs	r3, #3
 800060e:	e014      	b.n	800063a <GPIO_Init+0x1a2>
 8000610:	2302      	movs	r3, #2
 8000612:	e012      	b.n	800063a <GPIO_Init+0x1a2>
 8000614:	2301      	movs	r3, #1
 8000616:	e010      	b.n	800063a <GPIO_Init+0x1a2>
 8000618:	40010400 	.word	0x40010400
 800061c:	48000400 	.word	0x48000400
 8000620:	48000800 	.word	0x48000800
 8000624:	04800c00 	.word	0x04800c00
 8000628:	48001000 	.word	0x48001000
 800062c:	48001400 	.word	0x48001400
 8000630:	48001800 	.word	0x48001800
 8000634:	48001c00 	.word	0x48001c00
 8000638:	2300      	movs	r3, #0
 800063a:	747b      	strb	r3, [r7, #17]
    	SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4));
 800063c:	4a66      	ldr	r2, [pc, #408]	@ (80007d8 <GPIO_Init+0x340>)
 800063e:	7cfb      	ldrb	r3, [r7, #19]
 8000640:	3302      	adds	r3, #2
 8000642:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000646:	7cbb      	ldrb	r3, [r7, #18]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	210f      	movs	r1, #15
 800064c:	fa01 f303 	lsl.w	r3, r1, r3
 8000650:	43db      	mvns	r3, r3
 8000652:	4618      	mov	r0, r3
 8000654:	4960      	ldr	r1, [pc, #384]	@ (80007d8 <GPIO_Init+0x340>)
 8000656:	7cfb      	ldrb	r3, [r7, #19]
 8000658:	4002      	ands	r2, r0
 800065a:	3302      	adds	r3, #2
 800065c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	SYSCFG->EXTICR[temp1] |=  (portcode << (temp2 * 4));
 8000660:	4a5d      	ldr	r2, [pc, #372]	@ (80007d8 <GPIO_Init+0x340>)
 8000662:	7cfb      	ldrb	r3, [r7, #19]
 8000664:	3302      	adds	r3, #2
 8000666:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800066a:	7c79      	ldrb	r1, [r7, #17]
 800066c:	7cbb      	ldrb	r3, [r7, #18]
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	fa01 f303 	lsl.w	r3, r1, r3
 8000674:	4618      	mov	r0, r3
 8000676:	4958      	ldr	r1, [pc, #352]	@ (80007d8 <GPIO_Init+0x340>)
 8000678:	7cfb      	ldrb	r3, [r7, #19]
 800067a:	4302      	orrs	r2, r0
 800067c:	3302      	adds	r3, #2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	//3. Enable the interrupt delivery using IMR (Interrupt mask register)
    	EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000682:	4b56      	ldr	r3, [pc, #344]	@ (80007dc <GPIO_Init+0x344>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	7912      	ldrb	r2, [r2, #4]
 800068a:	4611      	mov	r1, r2
 800068c:	2201      	movs	r2, #1
 800068e:	408a      	lsls	r2, r1
 8000690:	4611      	mov	r1, r2
 8000692:	4a52      	ldr	r2, [pc, #328]	@ (80007dc <GPIO_Init+0x344>)
 8000694:	430b      	orrs	r3, r1
 8000696:	6013      	str	r3, [r2, #0]

    }

    // 2. Configure speed
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	799b      	ldrb	r3, [r3, #6]
 800069c:	461a      	mov	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	791b      	ldrb	r3, [r3, #4]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	fa02 f303 	lsl.w	r3, r2, r3
 80006a8:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	689a      	ldr	r2, [r3, #8]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	2103      	movs	r1, #3
 80006b8:	fa01 f303 	lsl.w	r3, r1, r3
 80006bc:	43db      	mvns	r3, r3
 80006be:	4619      	mov	r1, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	400a      	ands	r2, r1
 80006c6:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6899      	ldr	r1, [r3, #8]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	697a      	ldr	r2, [r7, #20]
 80006d4:	430a      	orrs	r2, r1
 80006d6:	609a      	str	r2, [r3, #8]
    temp = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]

    // 3. Configure pull-up/pull-down
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	79db      	ldrb	r3, [r3, #7]
 80006e0:	461a      	mov	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	68da      	ldr	r2, [r3, #12]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	2103      	movs	r1, #3
 80006fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000700:	43db      	mvns	r3, r3
 8000702:	4619      	mov	r1, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	400a      	ands	r2, r1
 800070a:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	68d9      	ldr	r1, [r3, #12]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	697a      	ldr	r2, [r7, #20]
 8000718:	430a      	orrs	r2, r1
 800071a:	60da      	str	r2, [r3, #12]
    temp = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

    // 4. Configure output type
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	7a1b      	ldrb	r3, [r3, #8]
 8000724:	461a      	mov	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	791b      	ldrb	r3, [r3, #4]
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	685a      	ldr	r2, [r3, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	4619      	mov	r1, r3
 800073c:	2301      	movs	r3, #1
 800073e:	408b      	lsls	r3, r1
 8000740:	43db      	mvns	r3, r3
 8000742:	4619      	mov	r1, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	400a      	ands	r2, r1
 800074a:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	6859      	ldr	r1, [r3, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	697a      	ldr	r2, [r7, #20]
 8000758:	430a      	orrs	r2, r1
 800075a:	605a      	str	r2, [r3, #4]
    temp = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

    // 5. Configure alternate function if needed
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	795b      	ldrb	r3, [r3, #5]
 8000764:	2b02      	cmp	r3, #2
 8000766:	d131      	bne.n	80007cc <GPIO_Init+0x334>
    {
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;  // AFR[0] or AFR[1]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	743b      	strb	r3, [r7, #16]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;  // Position within register
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	f003 0307 	and.w	r3, r3, #7
 8000778:	73fb      	strb	r3, [r7, #15]

        pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	7c3a      	ldrb	r2, [r7, #16]
 8000780:	3208      	adds	r2, #8
 8000782:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	220f      	movs	r2, #15
 800078c:	fa02 f303 	lsl.w	r3, r2, r3
 8000790:	43db      	mvns	r3, r3
 8000792:	4618      	mov	r0, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	7c3a      	ldrb	r2, [r7, #16]
 800079a:	4001      	ands	r1, r0
 800079c:	3208      	adds	r2, #8
 800079e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	7c3a      	ldrb	r2, [r7, #16]
 80007a8:	3208      	adds	r2, #8
 80007aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	7a5b      	ldrb	r3, [r3, #9]
 80007b2:	461a      	mov	r2, r3
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	fa02 f303 	lsl.w	r3, r2, r3
 80007bc:	4618      	mov	r0, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	7c3a      	ldrb	r2, [r7, #16]
 80007c4:	4301      	orrs	r1, r0
 80007c6:	3208      	adds	r2, #8
 80007c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 80007cc:	bf00      	nop
 80007ce:	371c      	adds	r7, #28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	40010000 	.word	0x40010000
 80007dc:	40010400 	.word	0x40010400

080007e0 <SPI_Init>:
			}
		}
}

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

	uint32_t tempreg = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]

	//1.Configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2 ;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	60fb      	str	r3, [r7, #12]

	//2.Configure the bus config

	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD ){
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	795b      	ldrb	r3, [r3, #5]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d104      	bne.n	800080a <SPI_Init+0x2a>
		//bidi mode cleared
		tempreg &=~( 1<<15 );
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	e014      	b.n	8000834 <SPI_Init+0x54>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	795b      	ldrb	r3, [r3, #5]
 800080e:	2b02      	cmp	r3, #2
 8000810:	d104      	bne.n	800081c <SPI_Init+0x3c>
		//budi mode is set
		tempreg |= (1<<15 );
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	e00b      	b.n	8000834 <SPI_Init+0x54>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RX){
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	795b      	ldrb	r3, [r3, #5]
 8000820:	2b03      	cmp	r3, #3
 8000822:	d107      	bne.n	8000834 <SPI_Init+0x54>

		//BIDI mode should be cleared
		tempreg &=~(1<<15);
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800082a:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |=(1<<10);
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000832:	60fb      	str	r3, [r7, #12]
	}

	//3.Configure the spi serial clock speed
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << 3 ;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	799b      	ldrb	r3, [r3, #6]
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	4313      	orrs	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]

	//4.Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << 11;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	79db      	ldrb	r3, [r3, #7]
 8000844:	02db      	lsls	r3, r3, #11
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	4313      	orrs	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]

	//5.Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << 1 ;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7a1b      	ldrb	r3, [r3, #8]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	4313      	orrs	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]

	//6.Configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << 0 ;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	7a5b      	ldrb	r3, [r3, #9]
 800085c:	461a      	mov	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	4313      	orrs	r3, r2
 8000862:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->SPI_CR1 = tempreg ;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	68fa      	ldr	r2, [r7, #12]
 800086a:	601a      	str	r2, [r3, #0]


}
 800086c:	bf00      	nop
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <SPI_GetFlagStatus>:
    {
        SPI3_REG_RESET();
    }
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx  , uint32_t FlagName ){
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]

	if(pSPIx->SPI_SR & FlagName ){
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	689a      	ldr	r2, [r3, #8]
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	4013      	ands	r3, r2
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET ;
 800088e:	2301      	movs	r3, #1
 8000890:	e000      	b.n	8000894 <SPI_GetFlagStatus+0x1c>
	}

	return FLAG_RESET ;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <SPI_SendData>:
 *                      - If DFF = 0 (8-bit mode), data is sent in 1-byte chunks
 *                      - Blocking call: CPU will be busy until all bytes are transmitted
 *********************************************************************/


void SPI_SendData(SPI_RegDef_t *pSPIx , uint8_t *pTxBuffer , uint32_t Len ){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]

	while(Len > 0 ){
 80008ac:	e027      	b.n	80008fe <SPI_SendData+0x5e>
		//wait untill TXE is set
		while(SPI_GetFlagStatus(pSPIx , SPI_TXE_FLAG ) == FLAG_RESET );
 80008ae:	bf00      	nop
 80008b0:	2102      	movs	r1, #2
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f7ff ffe0 	bl	8000878 <SPI_GetFlagStatus>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d0f8      	beq.n	80008b0 <SPI_SendData+0x10>

		//2. Check the DFF bit

		if(pSPIx->SPI_CR1 & (1<<SPI_CR1_DFF )){
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d00e      	beq.n	80008e8 <SPI_SendData+0x48>

			//16 bit DFF
			//1.load the data in to the DR

			pSPIx->SPI_DR = *((uint16_t *)pTxBuffer);
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	60da      	str	r2, [r3, #12]
			Len--;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	607b      	str	r3, [r7, #4]
			Len--;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3b01      	subs	r3, #1
 80008de:	607b      	str	r3, [r7, #4]
			(uint16_t *)pTxBuffer++;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	3301      	adds	r3, #1
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	e00a      	b.n	80008fe <SPI_SendData+0x5e>
		}else{
			//8 bit data

			pSPIx->SPI_DR = *(pTxBuffer);
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	60da      	str	r2, [r3, #12]
			Len--;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3b01      	subs	r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
			pTxBuffer++ ;
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	3301      	adds	r3, #1
 80008fc:	60bb      	str	r3, [r7, #8]
	while(Len > 0 ){
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d1d4      	bne.n	80008ae <SPI_SendData+0xe>
		}
	}

}
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <SPI_PeripheralControl>:
/*
 * SPI PeripheralControl
 *
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx , uint8_t EnOrDi){
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	460b      	mov	r3, r1
 8000918:	70fb      	strb	r3, [r7, #3]

	if(EnOrDi == ENABLE ){
 800091a:	78fb      	ldrb	r3, [r7, #3]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d106      	bne.n	800092e <SPI_PeripheralControl+0x20>

		pSPIx->SPI_CR1 |= (1<< SPI_CR1_SPE);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	601a      	str	r2, [r3, #0]
	}else{

		pSPIx->SPI_CR1 &=~(1<<SPI_CR1_SPE);
	}

}
 800092c:	e005      	b.n	800093a <SPI_PeripheralControl+0x2c>
		pSPIx->SPI_CR1 &=~(1<<SPI_CR1_SPE);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	601a      	str	r2, [r3, #0]
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <__libc_init_array>:
 8000948:	b570      	push	{r4, r5, r6, lr}
 800094a:	4d0d      	ldr	r5, [pc, #52]	@ (8000980 <__libc_init_array+0x38>)
 800094c:	4c0d      	ldr	r4, [pc, #52]	@ (8000984 <__libc_init_array+0x3c>)
 800094e:	1b64      	subs	r4, r4, r5
 8000950:	10a4      	asrs	r4, r4, #2
 8000952:	2600      	movs	r6, #0
 8000954:	42a6      	cmp	r6, r4
 8000956:	d109      	bne.n	800096c <__libc_init_array+0x24>
 8000958:	4d0b      	ldr	r5, [pc, #44]	@ (8000988 <__libc_init_array+0x40>)
 800095a:	4c0c      	ldr	r4, [pc, #48]	@ (800098c <__libc_init_array+0x44>)
 800095c:	f000 f818 	bl	8000990 <_init>
 8000960:	1b64      	subs	r4, r4, r5
 8000962:	10a4      	asrs	r4, r4, #2
 8000964:	2600      	movs	r6, #0
 8000966:	42a6      	cmp	r6, r4
 8000968:	d105      	bne.n	8000976 <__libc_init_array+0x2e>
 800096a:	bd70      	pop	{r4, r5, r6, pc}
 800096c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000970:	4798      	blx	r3
 8000972:	3601      	adds	r6, #1
 8000974:	e7ee      	b.n	8000954 <__libc_init_array+0xc>
 8000976:	f855 3b04 	ldr.w	r3, [r5], #4
 800097a:	4798      	blx	r3
 800097c:	3601      	adds	r6, #1
 800097e:	e7f2      	b.n	8000966 <__libc_init_array+0x1e>
 8000980:	080009bc 	.word	0x080009bc
 8000984:	080009bc 	.word	0x080009bc
 8000988:	080009bc 	.word	0x080009bc
 800098c:	080009c0 	.word	0x080009c0

08000990 <_init>:
 8000990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000992:	bf00      	nop
 8000994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000996:	bc08      	pop	{r3}
 8000998:	469e      	mov	lr, r3
 800099a:	4770      	bx	lr

0800099c <_fini>:
 800099c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800099e:	bf00      	nop
 80009a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009a2:	bc08      	pop	{r3}
 80009a4:	469e      	mov	lr, r3
 80009a6:	4770      	bx	lr
