/*
 * stm32l4xx_driver_spi.h
 *
 *  Created on: Aug 28, 2025
 *      Author: subhash
 */

#ifndef INC_STM32L4XX_SPI_DRIVER_H_
#define INC_STM32L4XX_SPI_DRIVER_H_

#include<stdint.h>
#include"stm32l4xx.h"

/*
 * Configuration register for SPI
 */

typedef struct
{
    uint8_t SPI_DeviceMode;       /*!< Master or Slave @SPI_DeviceMode */
    uint8_t SPI_BusConfig;        /*!< Full-Duplex, Half-Duplex, or Simplex RX only @SPI_BusConfig */
    uint8_t SPI_SclkSpeed;        /*!< Serial clock speed (prescaler) @SPI_SclkSpeed */
    uint8_t SPI_DFF;              /*!< Data frame format: 8-bit / 16-bit @SPI_DFF */
    uint8_t SPI_CPOL;             /*!< Clock polarity: Low/High @SPI_CPOL */
    uint8_t SPI_CPHA;             /*!< Clock phase: First/Second edge @SPI_CPHA */
    uint8_t SPI_SSM;              /*!< Software slave management enable/disable @SPI_SSM */

} SPI_Config_t;

/*
 * Handle Structure of SPIx peripheral
 */

typedef struct
{
    SPI_RegDef_t *pSPIx;          /*!< Holds base address of SPIx (SPI1, SPI2, etc.) */
    SPI_Config_t SPIConfig;       /*!< Holds SPI configuration settings */

}SPI_Handle_t;



/*
 * Macros used by SPI_Config_t
 *
 */

/*************** SPI Device Mode ***************/
#define SPI_DEVICE_MODE_MASTER      1
#define SPI_DEVICE_MODE_SLAVE       0

/*************** SPI Bus Config ***************/
#define SPI_BUS_CONFIG_FD           1   // Full duplex
#define SPI_BUS_CONFIG_HD           2   // Half duplex
#define	SPI_BUS_CONFIG_SIMPLEX_TX	4
#define SPI_BUS_CONFIG_SIMPLEX_RX	3	// Simplex (RX only)

/*************** SPI SCLK Speed ***************/
#define SPI_SCLK_SPEED_DIV2         0
#define SPI_SCLK_SPEED_DIV4         1
#define SPI_SCLK_SPEED_DIV8         2
#define SPI_SCLK_SPEED_DIV16        3
#define SPI_SCLK_SPEED_DIV32        4
#define SPI_SCLK_SPEED_DIV64        5
#define SPI_SCLK_SPEED_DIV128       6
#define SPI_SCLK_SPEED_DIV256       7

/*************** Data Frame Format ***************/
/***************** SPI_CR2 : Data Size (DS[3:0]) ******************/

#define SPI_CR2_DS_Pos     8U                          // DS bits start position
#define SPI_CR2_DS_Msk     (0xFU << SPI_CR2_DS_Pos)    // Mask for DS[3:0]

/* Data Size options */
#define SPI_DS_8BIT        (0x7U << SPI_CR2_DS_Pos)    // 0111 : 8-bit
#define SPI_DS_16BIT       (0xFU << SPI_CR2_DS_Pos)    // 1111 : 16-bit

/*************** Clock Polarity ***************/
#define SPI_CPOL_LOW                0
#define SPI_CPOL_HIGH               1

/*************** Clock Phase ***************/
#define SPI_CPHA_LOW                0
#define SPI_CPHA_HIGH               1

/*************** Software Slave Management ***************/
#define SPI_SSM_DI                  0
#define SPI_SSM_EN                  1




/////////////***********APIs supported by  the driver**************//////

//peripheral clock setup
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx,uint8_t EnorDi);

/*
 * init and de-init gpio
 */


void SPI_Init(SPI_Handle_t *pSPIHandle);
void SPI_DeInit(SPI_RegDef_t *pSPIx);

/*
 * Data Send and Receive
 *
 */

void SPI_SendData(SPI_RegDef_t *pSPIx , uint8_t  *pTxBuffer , uint32_t Len );
void SPI_ReceiveData(SPI_RegDef_t *pSPIx , uint32_t Len );

/*
 * IRQ Configuration and ISR handling
 */

void SPI_IRQInterruptConfig(uint8_t IRQNumber , uint8_t EnorDi);
void SPI_IRQPriorityConfig(uint8_t IRQNumber , uint32_t IRQPriority);
void SPI_IRQHandling(SPI_Handle_t *pHandle );

/*
 * Other peripheral Control APIs
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx , uint8_t EnOrDi);

#endif /* INC_STM32L4XX_SPI_DRIVER_H_ */
