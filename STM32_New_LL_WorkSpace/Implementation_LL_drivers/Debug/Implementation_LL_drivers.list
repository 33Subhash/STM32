
Implementation_LL_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008cc  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a58  08000a58  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a58  08000a58  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000a58  08000a58  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000a58  08000a58  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a58  08000a58  00001a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a5c  08000a5c  00001a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000a60  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000200c  2**0
                  CONTENTS
 10 .bss          0000001c  2000000c  2000000c  0000200c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  0000200c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001381  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003d4  00000000  00000000  000033bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000148  00000000  00000000  00003798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000ea  00000000  00000000  000038e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000018c9  00000000  00000000  000039ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000017c8  00000000  00000000  00005293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000063ca  00000000  00000000  00006a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000ce25  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000046c  00000000  00000000  0000ce68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008c  00000000  00000000  0000d2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000a40 	.word	0x08000a40

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08000a40 	.word	0x08000a40

080001cc <SPI2_GPIOInits>:
 * PA4 --> SPI1_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0

	GPIO_PeriClockControl(GPIOA, ENABLE);
 80001d2:	2101      	movs	r1, #1
 80001d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001d8:	f000 f886 	bl	80002e8 <GPIO_PeriClockControl>

	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 80001dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001e0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001e2:	2302      	movs	r3, #2
 80001e4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001e6:	2305      	movs	r3, #5
 80001e8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001ea:	2300      	movs	r3, #0
 80001ec:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001ee:	2300      	movs	r3, #0
 80001f0:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 80001f2:	2302      	movs	r3, #2
 80001f4:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 80001f6:	2305      	movs	r3, #5
 80001f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f941 	bl	8000484 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000202:	2307      	movs	r3, #7
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f93b 	bl	8000484 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800020e:	2306      	movs	r3, #6
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f935 	bl	8000484 <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800021a:	230c      	movs	r3, #12
 800021c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f92f 	bl	8000484 <GPIO_Init>


}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI1;
 8000236:	4b0b      	ldr	r3, [pc, #44]	@ (8000264 <SPI2_Inits+0x34>)
 8000238:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800023a:	2301      	movs	r3, #1
 800023c:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800023e:	2301      	movs	r3, #1
 8000240:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;//generates sclk of 8MHz
 8000242:	2300      	movs	r3, #0
 8000244:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000246:	2300      	movs	r3, #0
 8000248:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800024a:	2300      	movs	r3, #0
 800024c:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN;
 800024e:	2301      	movs	r3, #1
 8000250:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4618      	mov	r0, r3
 8000256:	f000 faeb 	bl	8000830 <SPI_Init>
}
 800025a:	bf00      	nop
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40013000 	.word	0x40013000

08000268 <main>:
//uint8_t tx_data = 0xAB;
//uint8_t rx_data = 0x00;
uint8_t tx_data[10] = "hello";
uint8_t rx_data[11]={0};
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0

    SPI2_GPIOInits();
 800026c:	f7ff ffae 	bl	80001cc <SPI2_GPIOInits>
    SPI2_Inits();
 8000270:	f7ff ffde 	bl	8000230 <SPI2_Inits>
    //SPI_PeripheralControl(SPI1, ENABLE);

    //SPI_SendData(SPI1, (uint8_t *)&tx_data, 1);
    //SPI_TransmitReceive(SPI1, tx_data, rx_data, 10);
    //while( SPI_GetFlagStatus(SPI1, SPI_BUSY_FLAG) );
    SPI_SendData(SPI1, &tx_data, 5);
 8000274:	2205      	movs	r2, #5
 8000276:	4905      	ldr	r1, [pc, #20]	@ (800028c <main+0x24>)
 8000278:	4805      	ldr	r0, [pc, #20]	@ (8000290 <main+0x28>)
 800027a:	f000 fb69 	bl	8000950 <SPI_SendData>

    SPI_PeripheralControl(SPI1, DISABLE);
 800027e:	2100      	movs	r1, #0
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <main+0x28>)
 8000282:	f000 fb9d 	bl	80009c0 <SPI_PeripheralControl>

    while(1);
 8000286:	bf00      	nop
 8000288:	e7fd      	b.n	8000286 <main+0x1e>
 800028a:	bf00      	nop
 800028c:	20000000 	.word	0x20000000
 8000290:	40013000 	.word	0x40013000

08000294 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000294:	480d      	ldr	r0, [pc, #52]	@ (80002cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000296:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000298:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800029c:	480c      	ldr	r0, [pc, #48]	@ (80002d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800029e:	490d      	ldr	r1, [pc, #52]	@ (80002d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a0:	4a0d      	ldr	r2, [pc, #52]	@ (80002d8 <LoopForever+0xe>)
  movs r3, #0
 80002a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a4:	e002      	b.n	80002ac <LoopCopyDataInit>

080002a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002aa:	3304      	adds	r3, #4

080002ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b0:	d3f9      	bcc.n	80002a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b2:	4a0a      	ldr	r2, [pc, #40]	@ (80002dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b4:	4c0a      	ldr	r4, [pc, #40]	@ (80002e0 <LoopForever+0x16>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b8:	e001      	b.n	80002be <LoopFillZerobss>

080002ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002bc:	3204      	adds	r2, #4

080002be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c0:	d3fb      	bcc.n	80002ba <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80002c2:	f000 fb99 	bl	80009f8 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80002c6:	f7ff ffcf 	bl	8000268 <main>

080002ca <LoopForever>:

LoopForever:
  b LoopForever
 80002ca:	e7fe      	b.n	80002ca <LoopForever>
  ldr   r0, =_estack
 80002cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80002d8:	08000a60 	.word	0x08000a60
  ldr r2, =_sbss
 80002dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80002e0:	20000028 	.word	0x20000028

080002e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e4:	e7fe      	b.n	80002e4 <ADC1_2_IRQHandler>
	...

080002e8 <GPIO_PeriClockControl>:
  * @param[in] pGPIOx  - Base address of GPIO peripheral (e.g., GPIOA, GPIOB, etc.)
  * @param[in] EnorDi  - Enable or disable macros: ENABLE = 1, DISABLE = 0
  * @return    - None
  * @note      - Must be called before accessing GPIO registers.
  */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	460b      	mov	r3, r1
 80002f2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80002f4:	78fb      	ldrb	r3, [r7, #3]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d157      	bne.n	80003aa <GPIO_PeriClockControl+0xc2>
		if(pGPIOx==GPIOA){
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000300:	d106      	bne.n	8000310 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000302:	4b58      	ldr	r3, [pc, #352]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 8000304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000306:	4a57      	ldr	r2, [pc, #348]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	64d3      	str	r3, [r2, #76]	@ 0x4c
		}
		else if(pGPIOx==GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 800030e:	e0a3      	b.n	8000458 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB){
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	4a55      	ldr	r2, [pc, #340]	@ (8000468 <GPIO_PeriClockControl+0x180>)
 8000314:	4293      	cmp	r3, r2
 8000316:	d106      	bne.n	8000326 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000318:	4b52      	ldr	r3, [pc, #328]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 800031a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031c:	4a51      	ldr	r2, [pc, #324]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 800031e:	f043 0302 	orr.w	r3, r3, #2
 8000322:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000324:	e098      	b.n	8000458 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC){
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4a50      	ldr	r2, [pc, #320]	@ (800046c <GPIO_PeriClockControl+0x184>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d106      	bne.n	800033c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800032e:	4b4d      	ldr	r3, [pc, #308]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000332:	4a4c      	ldr	r2, [pc, #304]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 8000334:	f043 0304 	orr.w	r3, r3, #4
 8000338:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800033a:	e08d      	b.n	8000458 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD){
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4a4c      	ldr	r2, [pc, #304]	@ (8000470 <GPIO_PeriClockControl+0x188>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d106      	bne.n	8000352 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000344:	4b47      	ldr	r3, [pc, #284]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 8000346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000348:	4a46      	ldr	r2, [pc, #280]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 800034a:	f043 0308 	orr.w	r3, r3, #8
 800034e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000350:	e082      	b.n	8000458 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE){
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a47      	ldr	r2, [pc, #284]	@ (8000474 <GPIO_PeriClockControl+0x18c>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d106      	bne.n	8000368 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800035a:	4b42      	ldr	r3, [pc, #264]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 800035c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800035e:	4a41      	ldr	r2, [pc, #260]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 8000360:	f043 0310 	orr.w	r3, r3, #16
 8000364:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000366:	e077      	b.n	8000458 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF){
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a43      	ldr	r2, [pc, #268]	@ (8000478 <GPIO_PeriClockControl+0x190>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d106      	bne.n	800037e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000370:	4b3c      	ldr	r3, [pc, #240]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 8000372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000374:	4a3b      	ldr	r2, [pc, #236]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800037c:	e06c      	b.n	8000458 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG){
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a3e      	ldr	r2, [pc, #248]	@ (800047c <GPIO_PeriClockControl+0x194>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000386:	4b37      	ldr	r3, [pc, #220]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800038a:	4a36      	ldr	r2, [pc, #216]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 800038c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000390:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000392:	e061      	b.n	8000458 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH){
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a3a      	ldr	r2, [pc, #232]	@ (8000480 <GPIO_PeriClockControl+0x198>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d15d      	bne.n	8000458 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 800039c:	4b31      	ldr	r3, [pc, #196]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 800039e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a0:	4a30      	ldr	r2, [pc, #192]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 80003a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003a8:	e056      	b.n	8000458 <GPIO_PeriClockControl+0x170>
		if(pGPIOx==GPIOA){
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80003b0:	d106      	bne.n	80003c0 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80003b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 80003b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003b6:	4a2b      	ldr	r2, [pc, #172]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 80003b8:	f023 0301 	bic.w	r3, r3, #1
 80003bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003be:	e04b      	b.n	8000458 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB){
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a29      	ldr	r2, [pc, #164]	@ (8000468 <GPIO_PeriClockControl+0x180>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80003c8:	4b26      	ldr	r3, [pc, #152]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 80003ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003cc:	4a25      	ldr	r2, [pc, #148]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 80003ce:	f023 0302 	bic.w	r3, r3, #2
 80003d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003d4:	e040      	b.n	8000458 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC){
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a24      	ldr	r2, [pc, #144]	@ (800046c <GPIO_PeriClockControl+0x184>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80003de:	4b21      	ldr	r3, [pc, #132]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e2:	4a20      	ldr	r2, [pc, #128]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 80003e4:	f023 0304 	bic.w	r3, r3, #4
 80003e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003ea:	e035      	b.n	8000458 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD){
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a20      	ldr	r2, [pc, #128]	@ (8000470 <GPIO_PeriClockControl+0x188>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d106      	bne.n	8000402 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80003f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 80003f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f8:	4a1a      	ldr	r2, [pc, #104]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 80003fa:	f023 0308 	bic.w	r3, r3, #8
 80003fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000400:	e02a      	b.n	8000458 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE){
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a1b      	ldr	r2, [pc, #108]	@ (8000474 <GPIO_PeriClockControl+0x18c>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d106      	bne.n	8000418 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 800040a:	4b16      	ldr	r3, [pc, #88]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800040e:	4a15      	ldr	r2, [pc, #84]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 8000410:	f023 0310 	bic.w	r3, r3, #16
 8000414:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000416:	e01f      	b.n	8000458 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF){
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a17      	ldr	r2, [pc, #92]	@ (8000478 <GPIO_PeriClockControl+0x190>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000420:	4b10      	ldr	r3, [pc, #64]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 8000422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000424:	4a0f      	ldr	r2, [pc, #60]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 8000426:	f023 0320 	bic.w	r3, r3, #32
 800042a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800042c:	e014      	b.n	8000458 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG){
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a12      	ldr	r2, [pc, #72]	@ (800047c <GPIO_PeriClockControl+0x194>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d106      	bne.n	8000444 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000436:	4b0b      	ldr	r3, [pc, #44]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043a:	4a0a      	ldr	r2, [pc, #40]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 800043c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000440:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000442:	e009      	b.n	8000458 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a0e      	ldr	r2, [pc, #56]	@ (8000480 <GPIO_PeriClockControl+0x198>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d105      	bne.n	8000458 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 800044c:	4b05      	ldr	r3, [pc, #20]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 800044e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000450:	4a04      	ldr	r2, [pc, #16]	@ (8000464 <GPIO_PeriClockControl+0x17c>)
 8000452:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000456:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	40021000 	.word	0x40021000
 8000468:	48000400 	.word	0x48000400
 800046c:	48000800 	.word	0x48000800
 8000470:	48000c00 	.word	0x48000c00
 8000474:	48001000 	.word	0x48001000
 8000478:	48001400 	.word	0x48001400
 800047c:	48001800 	.word	0x48001800
 8000480:	48001c00 	.word	0x48001c00

08000484 <GPIO_Init>:
  * @param[in] pGPIOHandle - Handle structure that contains GPIO configuration information.
  * @return    - None
  * @note      - Make sure peripheral clock for GPIO is enabled before calling this function.
  */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000484:	b480      	push	{r7}
 8000486:	b087      	sub	sp, #28
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	617b      	str	r3, [r7, #20]

    // 1. Configure the mode of GPIO pin
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	795b      	ldrb	r3, [r3, #5]
 8000494:	2b03      	cmp	r3, #3
 8000496:	d822      	bhi.n	80004de <GPIO_Init+0x5a>
    {
        // non-interrupt mode
        temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	795b      	ldrb	r3, [r3, #5]
 800049c:	461a      	mov	r2, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	791b      	ldrb	r3, [r3, #4]
 80004a2:	005b      	lsls	r3, r3, #1
 80004a4:	fa02 f303 	lsl.w	r3, r2, r3
 80004a8:	617b      	str	r3, [r7, #20]
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	791b      	ldrb	r3, [r3, #4]
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	2103      	movs	r1, #3
 80004b8:	fa01 f303 	lsl.w	r3, r1, r3
 80004bc:	43db      	mvns	r3, r3
 80004be:	4619      	mov	r1, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	400a      	ands	r2, r1
 80004c6:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	6819      	ldr	r1, [r3, #0]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	697a      	ldr	r2, [r7, #20]
 80004d4:	430a      	orrs	r2, r1
 80004d6:	601a      	str	r2, [r3, #0]
        temp = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	617b      	str	r3, [r7, #20]
 80004dc:	e0cb      	b.n	8000676 <GPIO_Init+0x1f2>
    }
    else
    {
        // interrupt mode
        if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	795b      	ldrb	r3, [r3, #5]
 80004e2:	2b04      	cmp	r3, #4
 80004e4:	d117      	bne.n	8000516 <GPIO_Init+0x92>
        {
        	EXTI->FTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e6:	4b47      	ldr	r3, [pc, #284]	@ (8000604 <GPIO_Init+0x180>)
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	7912      	ldrb	r2, [r2, #4]
 80004ee:	4611      	mov	r1, r2
 80004f0:	2201      	movs	r2, #1
 80004f2:	408a      	lsls	r2, r1
 80004f4:	4611      	mov	r1, r2
 80004f6:	4a43      	ldr	r2, [pc, #268]	@ (8000604 <GPIO_Init+0x180>)
 80004f8:	430b      	orrs	r3, r1
 80004fa:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR1 &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004fc:	4b41      	ldr	r3, [pc, #260]	@ (8000604 <GPIO_Init+0x180>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	7912      	ldrb	r2, [r2, #4]
 8000504:	4611      	mov	r1, r2
 8000506:	2201      	movs	r2, #1
 8000508:	408a      	lsls	r2, r1
 800050a:	43d2      	mvns	r2, r2
 800050c:	4611      	mov	r1, r2
 800050e:	4a3d      	ldr	r2, [pc, #244]	@ (8000604 <GPIO_Init+0x180>)
 8000510:	400b      	ands	r3, r1
 8000512:	6093      	str	r3, [r2, #8]
 8000514:	e035      	b.n	8000582 <GPIO_Init+0xfe>

        }
        else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	795b      	ldrb	r3, [r3, #5]
 800051a:	2b05      	cmp	r3, #5
 800051c:	d117      	bne.n	800054e <GPIO_Init+0xca>
        {
        	EXTI->RTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800051e:	4b39      	ldr	r3, [pc, #228]	@ (8000604 <GPIO_Init+0x180>)
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	7912      	ldrb	r2, [r2, #4]
 8000526:	4611      	mov	r1, r2
 8000528:	2201      	movs	r2, #1
 800052a:	408a      	lsls	r2, r1
 800052c:	4611      	mov	r1, r2
 800052e:	4a35      	ldr	r2, [pc, #212]	@ (8000604 <GPIO_Init+0x180>)
 8000530:	430b      	orrs	r3, r1
 8000532:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR1 &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000534:	4b33      	ldr	r3, [pc, #204]	@ (8000604 <GPIO_Init+0x180>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	7912      	ldrb	r2, [r2, #4]
 800053c:	4611      	mov	r1, r2
 800053e:	2201      	movs	r2, #1
 8000540:	408a      	lsls	r2, r1
 8000542:	43d2      	mvns	r2, r2
 8000544:	4611      	mov	r1, r2
 8000546:	4a2f      	ldr	r2, [pc, #188]	@ (8000604 <GPIO_Init+0x180>)
 8000548:	400b      	ands	r3, r1
 800054a:	60d3      	str	r3, [r2, #12]
 800054c:	e019      	b.n	8000582 <GPIO_Init+0xfe>
        }
        else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	795b      	ldrb	r3, [r3, #5]
 8000552:	2b06      	cmp	r3, #6
 8000554:	d115      	bne.n	8000582 <GPIO_Init+0xfe>
        {
        	EXTI->FTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000556:	4b2b      	ldr	r3, [pc, #172]	@ (8000604 <GPIO_Init+0x180>)
 8000558:	68db      	ldr	r3, [r3, #12]
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	7912      	ldrb	r2, [r2, #4]
 800055e:	4611      	mov	r1, r2
 8000560:	2201      	movs	r2, #1
 8000562:	408a      	lsls	r2, r1
 8000564:	4611      	mov	r1, r2
 8000566:	4a27      	ldr	r2, [pc, #156]	@ (8000604 <GPIO_Init+0x180>)
 8000568:	430b      	orrs	r3, r1
 800056a:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800056c:	4b25      	ldr	r3, [pc, #148]	@ (8000604 <GPIO_Init+0x180>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	7912      	ldrb	r2, [r2, #4]
 8000574:	4611      	mov	r1, r2
 8000576:	2201      	movs	r2, #1
 8000578:	408a      	lsls	r2, r1
 800057a:	4611      	mov	r1, r2
 800057c:	4a21      	ldr	r2, [pc, #132]	@ (8000604 <GPIO_Init+0x180>)
 800057e:	430b      	orrs	r3, r1
 8000580:	6093      	str	r3, [r2, #8]
        }
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	791b      	ldrb	r3, [r3, #4]
 8000586:	089b      	lsrs	r3, r3, #2
 8000588:	74fb      	strb	r3, [r7, #19]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	791b      	ldrb	r3, [r3, #4]
 800058e:	f003 0303 	and.w	r3, r3, #3
 8000592:	74bb      	strb	r3, [r7, #18]
        uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800059c:	d042      	beq.n	8000624 <GPIO_Init+0x1a0>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a19      	ldr	r2, [pc, #100]	@ (8000608 <GPIO_Init+0x184>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d02b      	beq.n	8000600 <GPIO_Init+0x17c>
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a17      	ldr	r2, [pc, #92]	@ (800060c <GPIO_Init+0x188>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d024      	beq.n	80005fc <GPIO_Init+0x178>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a16      	ldr	r2, [pc, #88]	@ (8000610 <GPIO_Init+0x18c>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d01d      	beq.n	80005f8 <GPIO_Init+0x174>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a14      	ldr	r2, [pc, #80]	@ (8000614 <GPIO_Init+0x190>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d016      	beq.n	80005f4 <GPIO_Init+0x170>
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a13      	ldr	r2, [pc, #76]	@ (8000618 <GPIO_Init+0x194>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d00f      	beq.n	80005f0 <GPIO_Init+0x16c>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a11      	ldr	r2, [pc, #68]	@ (800061c <GPIO_Init+0x198>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d008      	beq.n	80005ec <GPIO_Init+0x168>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a10      	ldr	r2, [pc, #64]	@ (8000620 <GPIO_Init+0x19c>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d101      	bne.n	80005e8 <GPIO_Init+0x164>
 80005e4:	2307      	movs	r3, #7
 80005e6:	e01e      	b.n	8000626 <GPIO_Init+0x1a2>
 80005e8:	2300      	movs	r3, #0
 80005ea:	e01c      	b.n	8000626 <GPIO_Init+0x1a2>
 80005ec:	2306      	movs	r3, #6
 80005ee:	e01a      	b.n	8000626 <GPIO_Init+0x1a2>
 80005f0:	2305      	movs	r3, #5
 80005f2:	e018      	b.n	8000626 <GPIO_Init+0x1a2>
 80005f4:	2304      	movs	r3, #4
 80005f6:	e016      	b.n	8000626 <GPIO_Init+0x1a2>
 80005f8:	2303      	movs	r3, #3
 80005fa:	e014      	b.n	8000626 <GPIO_Init+0x1a2>
 80005fc:	2302      	movs	r3, #2
 80005fe:	e012      	b.n	8000626 <GPIO_Init+0x1a2>
 8000600:	2301      	movs	r3, #1
 8000602:	e010      	b.n	8000626 <GPIO_Init+0x1a2>
 8000604:	40010400 	.word	0x40010400
 8000608:	48000400 	.word	0x48000400
 800060c:	48000800 	.word	0x48000800
 8000610:	48000c00 	.word	0x48000c00
 8000614:	48001000 	.word	0x48001000
 8000618:	48001400 	.word	0x48001400
 800061c:	48001800 	.word	0x48001800
 8000620:	48001c00 	.word	0x48001c00
 8000624:	2300      	movs	r3, #0
 8000626:	747b      	strb	r3, [r7, #17]
        SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4));
 8000628:	4a63      	ldr	r2, [pc, #396]	@ (80007b8 <GPIO_Init+0x334>)
 800062a:	7cfb      	ldrb	r3, [r7, #19]
 800062c:	3302      	adds	r3, #2
 800062e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000632:	7cbb      	ldrb	r3, [r7, #18]
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	210f      	movs	r1, #15
 8000638:	fa01 f303 	lsl.w	r3, r1, r3
 800063c:	43db      	mvns	r3, r3
 800063e:	4618      	mov	r0, r3
 8000640:	495d      	ldr	r1, [pc, #372]	@ (80007b8 <GPIO_Init+0x334>)
 8000642:	7cfb      	ldrb	r3, [r7, #19]
 8000644:	4002      	ands	r2, r0
 8000646:	3302      	adds	r3, #2
 8000648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG -> EXTICR[temp1] = portcode << (temp2 * 4);
 800064c:	7c7a      	ldrb	r2, [r7, #17]
 800064e:	7cbb      	ldrb	r3, [r7, #18]
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	fa02 f103 	lsl.w	r1, r2, r3
 8000656:	4a58      	ldr	r2, [pc, #352]	@ (80007b8 <GPIO_Init+0x334>)
 8000658:	7cfb      	ldrb	r3, [r7, #19]
 800065a:	3302      	adds	r3, #2
 800065c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        EXTI -> IMR1 |= 1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000660:	4b56      	ldr	r3, [pc, #344]	@ (80007bc <GPIO_Init+0x338>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	7912      	ldrb	r2, [r2, #4]
 8000668:	4611      	mov	r1, r2
 800066a:	2201      	movs	r2, #1
 800066c:	408a      	lsls	r2, r1
 800066e:	4611      	mov	r1, r2
 8000670:	4a52      	ldr	r2, [pc, #328]	@ (80007bc <GPIO_Init+0x338>)
 8000672:	430b      	orrs	r3, r1
 8000674:	6013      	str	r3, [r2, #0]
    }

    // 2. Configure speed
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	799b      	ldrb	r3, [r3, #6]
 800067a:	461a      	mov	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	791b      	ldrb	r3, [r3, #4]
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	689a      	ldr	r2, [r3, #8]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	2103      	movs	r1, #3
 8000696:	fa01 f303 	lsl.w	r3, r1, r3
 800069a:	43db      	mvns	r3, r3
 800069c:	4619      	mov	r1, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	400a      	ands	r2, r1
 80006a4:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	6899      	ldr	r1, [r3, #8]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	430a      	orrs	r2, r1
 80006b4:	609a      	str	r2, [r3, #8]
    temp = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]

    // 3. Configure pull-up/pull-down
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	79db      	ldrb	r3, [r3, #7]
 80006be:	461a      	mov	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	791b      	ldrb	r3, [r3, #4]
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	68da      	ldr	r2, [r3, #12]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	791b      	ldrb	r3, [r3, #4]
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	2103      	movs	r1, #3
 80006da:	fa01 f303 	lsl.w	r3, r1, r3
 80006de:	43db      	mvns	r3, r3
 80006e0:	4619      	mov	r1, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	400a      	ands	r2, r1
 80006e8:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	68d9      	ldr	r1, [r3, #12]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	697a      	ldr	r2, [r7, #20]
 80006f6:	430a      	orrs	r2, r1
 80006f8:	60da      	str	r2, [r3, #12]
    temp = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]

    // 4. Configure output type
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	7a1b      	ldrb	r3, [r3, #8]
 8000702:	461a      	mov	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	791b      	ldrb	r3, [r3, #4]
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	685a      	ldr	r2, [r3, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	791b      	ldrb	r3, [r3, #4]
 8000718:	4619      	mov	r1, r3
 800071a:	2301      	movs	r3, #1
 800071c:	408b      	lsls	r3, r1
 800071e:	43db      	mvns	r3, r3
 8000720:	4619      	mov	r1, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	400a      	ands	r2, r1
 8000728:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	6859      	ldr	r1, [r3, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	697a      	ldr	r2, [r7, #20]
 8000736:	430a      	orrs	r2, r1
 8000738:	605a      	str	r2, [r3, #4]
    temp = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]

    // 5. Configure alternate function if needed
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	795b      	ldrb	r3, [r3, #5]
 8000742:	2b02      	cmp	r3, #2
 8000744:	d131      	bne.n	80007aa <GPIO_Init+0x326>
    {
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;  // AFR[0] or AFR[1]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	08db      	lsrs	r3, r3, #3
 800074c:	743b      	strb	r3, [r7, #16]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;  // Position within register
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	791b      	ldrb	r3, [r3, #4]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	73fb      	strb	r3, [r7, #15]

        pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	7c3a      	ldrb	r2, [r7, #16]
 800075e:	3208      	adds	r2, #8
 8000760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	220f      	movs	r2, #15
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43db      	mvns	r3, r3
 8000770:	4618      	mov	r0, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	7c3a      	ldrb	r2, [r7, #16]
 8000778:	4001      	ands	r1, r0
 800077a:	3208      	adds	r2, #8
 800077c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	7c3a      	ldrb	r2, [r7, #16]
 8000786:	3208      	adds	r2, #8
 8000788:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	7a5b      	ldrb	r3, [r3, #9]
 8000790:	461a      	mov	r2, r3
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	4618      	mov	r0, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	7c3a      	ldrb	r2, [r7, #16]
 80007a2:	4301      	orrs	r1, r0
 80007a4:	3208      	adds	r2, #8
 80007a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 80007aa:	bf00      	nop
 80007ac:	371c      	adds	r7, #28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40010000 	.word	0x40010000
 80007bc:	40010400 	.word	0x40010400

080007c0 <SPI_PeriClockControl>:
 */
#include "stm32l4xx_spi_driver.h"

// Peripheral clock setup
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE) {
 80007cc:	78fb      	ldrb	r3, [r7, #3]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d11f      	bne.n	8000812 <SPI_PeriClockControl+0x52>
        if (pSPIx == SPI1) {
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a12      	ldr	r2, [pc, #72]	@ (8000820 <SPI_PeriClockControl+0x60>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d106      	bne.n	80007e8 <SPI_PeriClockControl+0x28>
            SPI1_PCLK_EN();
 80007da:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <SPI_PeriClockControl+0x64>)
 80007dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007de:	4a11      	ldr	r2, [pc, #68]	@ (8000824 <SPI_PeriClockControl+0x64>)
 80007e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007e4:	6613      	str	r3, [r2, #96]	@ 0x60
            SPI3_PCLK_EN();
        }
    } else {

    }
}
 80007e6:	e014      	b.n	8000812 <SPI_PeriClockControl+0x52>
        } else if (pSPIx == SPI2) {
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000828 <SPI_PeriClockControl+0x68>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d106      	bne.n	80007fe <SPI_PeriClockControl+0x3e>
            SPI2_PCLK_EN();
 80007f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <SPI_PeriClockControl+0x64>)
 80007f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000824 <SPI_PeriClockControl+0x64>)
 80007f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007fa:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80007fc:	e009      	b.n	8000812 <SPI_PeriClockControl+0x52>
        } else if (pSPIx == SPI3) {
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a0a      	ldr	r2, [pc, #40]	@ (800082c <SPI_PeriClockControl+0x6c>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d105      	bne.n	8000812 <SPI_PeriClockControl+0x52>
            SPI3_PCLK_EN();
 8000806:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <SPI_PeriClockControl+0x64>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800080a:	4a06      	ldr	r2, [pc, #24]	@ (8000824 <SPI_PeriClockControl+0x64>)
 800080c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000810:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40013000 	.word	0x40013000
 8000824:	40021000 	.word	0x40021000
 8000828:	40003800 	.word	0x40003800
 800082c:	40003c00 	.word	0x40003c00

08000830 <SPI_Init>:

// Init and deinit SPI
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	SPI_PeriClockControl(pSPIHandle->pSPIx,ENABLE);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2101      	movs	r1, #1
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ffbe 	bl	80007c0 <SPI_PeriClockControl>
    uint32_t tempreg = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
    SPI_PeripheralControl(SPI1 , DISABLE);
 8000848:	2100      	movs	r1, #0
 800084a:	4836      	ldr	r0, [pc, #216]	@ (8000924 <SPI_Init+0xf4>)
 800084c:	f000 f8b8 	bl	80009c0 <SPI_PeripheralControl>

    // Configure device mode
    tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	791b      	ldrb	r3, [r3, #4]
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	4313      	orrs	r3, r2
 800085a:	60fb      	str	r3, [r7, #12]

    // Configure bus config
    if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	795b      	ldrb	r3, [r3, #5]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d104      	bne.n	800086e <SPI_Init+0x3e>
        tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	e014      	b.n	8000898 <SPI_Init+0x68>
    } else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) {
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	795b      	ldrb	r3, [r3, #5]
 8000872:	2b02      	cmp	r3, #2
 8000874:	d104      	bne.n	8000880 <SPI_Init+0x50>
        tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	e00b      	b.n	8000898 <SPI_Init+0x68>
    } else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_TXONLY) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	795b      	ldrb	r3, [r3, #5]
 8000884:	2b03      	cmp	r3, #3
 8000886:	d107      	bne.n	8000898 <SPI_Init+0x68>
        tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800088e:	60fb      	str	r3, [r7, #12]
        tempreg |= (1 << SPI_CR1_RXONLY);
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000896:	60fb      	str	r3, [r7, #12]
    }

    // Configure clock speed
    tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	799b      	ldrb	r3, [r3, #6]
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	60fb      	str	r3, [r7, #12]

    // Configure CPOL & CPHA
    tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	7a1b      	ldrb	r3, [r3, #8]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]
    tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	7a5b      	ldrb	r3, [r3, #9]
 80008b4:	461a      	mov	r2, r3
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	60fb      	str	r3, [r7, #12]

    tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	7a9b      	ldrb	r3, [r3, #10]
 80008c0:	025b      	lsls	r3, r3, #9
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	60fb      	str	r3, [r7, #12]
    // Write to CR1
    pSPIHandle->pSPIx->CR1 = tempreg;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	601a      	str	r2, [r3, #0]

    // Configure data size in CR2
    pSPIHandle->pSPIx->CR2 &= ~(0xF << SPI_CR2_DS);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	685a      	ldr	r2, [r3, #4]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 80008de:	605a      	str	r2, [r3, #4]
    pSPIHandle->pSPIx->CR2 |= (pSPIHandle->SPIConfig.SPI_DataSize << SPI_CR2_DS);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	6859      	ldr	r1, [r3, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	79db      	ldrb	r3, [r3, #7]
 80008ea:	021a      	lsls	r2, r3, #8
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	430a      	orrs	r2, r1
 80008f2:	605a      	str	r2, [r3, #4]

    if(pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_SSM)) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d007      	beq.n	8000912 <SPI_Init+0xe2>
    	        pSPIHandle->pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000910:	601a      	str	r2, [r3, #0]
    }

    SPI_PeripheralControl(SPI1 , ENABLE);
 8000912:	2101      	movs	r1, #1
 8000914:	4803      	ldr	r0, [pc, #12]	@ (8000924 <SPI_Init+0xf4>)
 8000916:	f000 f853 	bl	80009c0 <SPI_PeripheralControl>
}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40013000 	.word	0x40013000

08000928 <SPI_GetFlagStatus>:
        SPI3_REG_RESET();
    }
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
    if (pSPIx->SR & FlagName) {
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	689a      	ldr	r2, [r3, #8]
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	4013      	ands	r3, r2
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SPI_GetFlagStatus+0x1a>
        return FLAG_SET;
 800093e:	2301      	movs	r3, #1
 8000940:	e000      	b.n	8000944 <SPI_GetFlagStatus+0x1c>
    }
    return FLAG_RESET;
 8000942:	2300      	movs	r3, #0
}
 8000944:	4618      	mov	r0, r3
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <SPI_SendData>:

// Data send
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]

    while (len > 0) {
 800095c:	e028      	b.n	80009b0 <SPI_SendData+0x60>
        // Wait until TXE is set
        while (SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == RESET);
 800095e:	bf00      	nop
 8000960:	2102      	movs	r1, #2
 8000962:	68f8      	ldr	r0, [r7, #12]
 8000964:	f7ff ffe0 	bl	8000928 <SPI_GetFlagStatus>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d0f8      	beq.n	8000960 <SPI_SendData+0x10>

        uint8_t dsize = ((pSPIx->CR2 >> SPI_CR2_DS) & 0xF);
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	0a1b      	lsrs	r3, r3, #8
 8000974:	b2db      	uxtb	r3, r3
 8000976:	f003 030f 	and.w	r3, r3, #15
 800097a:	75fb      	strb	r3, [r7, #23]

        if (dsize == SPI_DATASIZE_16BIT) {
 800097c:	7dfb      	ldrb	r3, [r7, #23]
 800097e:	2b0f      	cmp	r3, #15
 8000980:	d10b      	bne.n	800099a <SPI_SendData+0x4a>
            // 16-bit transfer
            *((volatile uint16_t *)&pSPIx->DR) = *((uint16_t *)pTxBuffer);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	330c      	adds	r3, #12
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	8812      	ldrh	r2, [r2, #0]
 800098a:	801a      	strh	r2, [r3, #0]
            pTxBuffer += 2;
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	3302      	adds	r3, #2
 8000990:	60bb      	str	r3, [r7, #8]
            len -= 2;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3b02      	subs	r3, #2
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	e00a      	b.n	80009b0 <SPI_SendData+0x60>
        } else	{
            // 8-bit transfer
            *((volatile uint8_t *)&pSPIx->DR) = *pTxBuffer;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	330c      	adds	r3, #12
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	7812      	ldrb	r2, [r2, #0]
 80009a2:	701a      	strb	r2, [r3, #0]
            pTxBuffer++;
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	3301      	adds	r3, #1
 80009a8:	60bb      	str	r3, [r7, #8]
            len--;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3b01      	subs	r3, #1
 80009ae:	607b      	str	r3, [r7, #4]
    while (len > 0) {
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d1d3      	bne.n	800095e <SPI_SendData+0xe>
        }
    }
}
 80009b6:	bf00      	nop
 80009b8:	bf00      	nop
 80009ba:	3718      	adds	r7, #24
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <SPI_PeripheralControl>:
        len--;
    }
}

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx,uint8_t EnorDi)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d106      	bne.n	80009e0 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1  |= (1 << SPI_CR1_SPE);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1  &= ~(1 << SPI_CR1_SPE);
	}
}
 80009de:	e005      	b.n	80009ec <SPI_PeripheralControl+0x2c>
		pSPIx->CR1  &= ~(1 << SPI_CR1_SPE);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	601a      	str	r2, [r3, #0]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <__libc_init_array>:
 80009f8:	b570      	push	{r4, r5, r6, lr}
 80009fa:	4d0d      	ldr	r5, [pc, #52]	@ (8000a30 <__libc_init_array+0x38>)
 80009fc:	4c0d      	ldr	r4, [pc, #52]	@ (8000a34 <__libc_init_array+0x3c>)
 80009fe:	1b64      	subs	r4, r4, r5
 8000a00:	10a4      	asrs	r4, r4, #2
 8000a02:	2600      	movs	r6, #0
 8000a04:	42a6      	cmp	r6, r4
 8000a06:	d109      	bne.n	8000a1c <__libc_init_array+0x24>
 8000a08:	4d0b      	ldr	r5, [pc, #44]	@ (8000a38 <__libc_init_array+0x40>)
 8000a0a:	4c0c      	ldr	r4, [pc, #48]	@ (8000a3c <__libc_init_array+0x44>)
 8000a0c:	f000 f818 	bl	8000a40 <_init>
 8000a10:	1b64      	subs	r4, r4, r5
 8000a12:	10a4      	asrs	r4, r4, #2
 8000a14:	2600      	movs	r6, #0
 8000a16:	42a6      	cmp	r6, r4
 8000a18:	d105      	bne.n	8000a26 <__libc_init_array+0x2e>
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}
 8000a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a20:	4798      	blx	r3
 8000a22:	3601      	adds	r6, #1
 8000a24:	e7ee      	b.n	8000a04 <__libc_init_array+0xc>
 8000a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a2a:	4798      	blx	r3
 8000a2c:	3601      	adds	r6, #1
 8000a2e:	e7f2      	b.n	8000a16 <__libc_init_array+0x1e>
 8000a30:	08000a58 	.word	0x08000a58
 8000a34:	08000a58 	.word	0x08000a58
 8000a38:	08000a58 	.word	0x08000a58
 8000a3c:	08000a5c 	.word	0x08000a5c

08000a40 <_init>:
 8000a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a42:	bf00      	nop
 8000a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a46:	bc08      	pop	{r3}
 8000a48:	469e      	mov	lr, r3
 8000a4a:	4770      	bx	lr

08000a4c <_fini>:
 8000a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a4e:	bf00      	nop
 8000a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a52:	bc08      	pop	{r3}
 8000a54:	469e      	mov	lr, r3
 8000a56:	4770      	bx	lr
